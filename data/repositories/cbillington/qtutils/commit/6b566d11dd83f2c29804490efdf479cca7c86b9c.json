{"rendered": {"message": {"raw": "PySide2 support\n\nPySide2 looks to be the future of Qt in Python so I figured we should add support,\nit was not too hard.\n\nThe version of PySide2 in conda-forge at the moment is an alpha and has some\nmissing widgets and raises NotImplementedErrors on a few things, so labscript programs\nare not working perfectly. But these are issues with PySide2, not qtutils.\n\nThe only issue I've seen that might be the a problem with qtutils so far is that the outputbox\ntext isn't white. Not sure why.\n\nThere are other rough edges - some PySide2 methods appear to not accept say, integers,\nrequiring the right Qt datatype such as a Qt.Checkstate. So where integers have\nbeen saved to config files, when restored they need to be wrapped in Qt.CheckState(int) before being\nused in Qt methods. And they will need to converted to integers before being saved to the config file\nso that they are compatible betwen Qt wrappers. This means labscript programs are all erroring on\nloading their config files.\n\nEither PySide2 will sort issues like this out (it seems to be in very active development at the moment)\nor fixes can be applied to the applications. There is plenty of time, but basic\nqtutils support seems to be step 1 so here it is.\n\nFor now PySide2 is listed as the lowest priority Qt lib in qtutils.qt, so it\nis unlikely anyone will have issues for the moment, but I expect it will be more\nwidely used in the future and probably become the default Qt in\nAnaconda.", "markup": "markdown", "html": "<p>PySide2 support</p>\n<p>PySide2 looks to be the future of Qt in Python so I figured we should add support,<br />\nit was not too hard.</p>\n<p>The version of PySide2 in conda-forge at the moment is an alpha and has some<br />\nmissing widgets and raises NotImplementedErrors on a few things, so labscript programs<br />\nare not working perfectly. But these are issues with PySide2, not qtutils.</p>\n<p>The only issue I've seen that might be the a problem with qtutils so far is that the outputbox<br />\ntext isn't white. Not sure why.</p>\n<p>There are other rough edges - some PySide2 methods appear to not accept say, integers,<br />\nrequiring the right Qt datatype such as a Qt.Checkstate. So where integers have<br />\nbeen saved to config files, when restored they need to be wrapped in Qt.CheckState(int) before being<br />\nused in Qt methods. And they will need to converted to integers before being saved to the config file<br />\nso that they are compatible betwen Qt wrappers. This means labscript programs are all erroring on<br />\nloading their config files.</p>\n<p>Either PySide2 will sort issues like this out (it seems to be in very active development at the moment)<br />\nor fixes can be applied to the applications. There is plenty of time, but basic<br />\nqtutils support seems to be step 1 so here it is.</p>\n<p>For now PySide2 is listed as the lowest priority Qt lib in qtutils.qt, so it<br />\nis unlikely anyone will have issues for the moment, but I expect it will be more<br />\nwidely used in the future and probably become the default Qt in<br />\nAnaconda.</p>", "type": "rendered"}}, "hash": "6b566d11dd83f2c29804490efdf479cca7c86b9c", "repository": {"links": {"self": {"href": "data/repositories/cbillington/qtutils.json"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/6b566d11dd83f2c29804490efdf479cca7c86b9c.json"}, "comments": {"href": "data/repositories/cbillington/qtutils/commit/6b566d11dd83f2c29804490efdf479cca7c86b9c/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/patch/6b566d11dd83f2c29804490efdf479cca7c86b9c"}, "html": {"href": "#!/cbillington/qtutils/commits/6b566d11dd83f2c29804490efdf479cca7c86b9c"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/diff/6b566d11dd83f2c29804490efdf479cca7c86b9c"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/6b566d11dd83f2c29804490efdf479cca7c86b9c/approve"}, "statuses": {"href": "data/repositories/cbillington/qtutils/commit/6b566d11dd83f2c29804490efdf479cca7c86b9c/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author"}, "summary": {"raw": "PySide2 support\n\nPySide2 looks to be the future of Qt in Python so I figured we should add support,\nit was not too hard.\n\nThe version of PySide2 in conda-forge at the moment is an alpha and has some\nmissing widgets and raises NotImplementedErrors on a few things, so labscript programs\nare not working perfectly. But these are issues with PySide2, not qtutils.\n\nThe only issue I've seen that might be the a problem with qtutils so far is that the outputbox\ntext isn't white. Not sure why.\n\nThere are other rough edges - some PySide2 methods appear to not accept say, integers,\nrequiring the right Qt datatype such as a Qt.Checkstate. So where integers have\nbeen saved to config files, when restored they need to be wrapped in Qt.CheckState(int) before being\nused in Qt methods. And they will need to converted to integers before being saved to the config file\nso that they are compatible betwen Qt wrappers. This means labscript programs are all erroring on\nloading their config files.\n\nEither PySide2 will sort issues like this out (it seems to be in very active development at the moment)\nor fixes can be applied to the applications. There is plenty of time, but basic\nqtutils support seems to be step 1 so here it is.\n\nFor now PySide2 is listed as the lowest priority Qt lib in qtutils.qt, so it\nis unlikely anyone will have issues for the moment, but I expect it will be more\nwidely used in the future and probably become the default Qt in\nAnaconda.", "markup": "markdown", "html": "<p>PySide2 support</p>\n<p>PySide2 looks to be the future of Qt in Python so I figured we should add support,<br />\nit was not too hard.</p>\n<p>The version of PySide2 in conda-forge at the moment is an alpha and has some<br />\nmissing widgets and raises NotImplementedErrors on a few things, so labscript programs<br />\nare not working perfectly. But these are issues with PySide2, not qtutils.</p>\n<p>The only issue I've seen that might be the a problem with qtutils so far is that the outputbox<br />\ntext isn't white. Not sure why.</p>\n<p>There are other rough edges - some PySide2 methods appear to not accept say, integers,<br />\nrequiring the right Qt datatype such as a Qt.Checkstate. So where integers have<br />\nbeen saved to config files, when restored they need to be wrapped in Qt.CheckState(int) before being<br />\nused in Qt methods. And they will need to converted to integers before being saved to the config file<br />\nso that they are compatible betwen Qt wrappers. This means labscript programs are all erroring on<br />\nloading their config files.</p>\n<p>Either PySide2 will sort issues like this out (it seems to be in very active development at the moment)<br />\nor fixes can be applied to the applications. There is plenty of time, but basic<br />\nqtutils support seems to be step 1 so here it is.</p>\n<p>For now PySide2 is listed as the lowest priority Qt lib in qtutils.qt, so it<br />\nis unlikely anyone will have issues for the moment, but I expect it will be more<br />\nwidely used in the future and probably become the default Qt in<br />\nAnaconda.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "455fb0a14938454df67f2d822719220d58c6d062", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/455fb0a14938454df67f2d822719220d58c6d062.json"}, "html": {"href": "#!/cbillington/qtutils/commits/455fb0a14938454df67f2d822719220d58c6d062"}}}], "date": "2018-06-15T05:50:41+00:00", "message": "PySide2 support\n\nPySide2 looks to be the future of Qt in Python so I figured we should add support,\nit was not too hard.\n\nThe version of PySide2 in conda-forge at the moment is an alpha and has some\nmissing widgets and raises NotImplementedErrors on a few things, so labscript programs\nare not working perfectly. But these are issues with PySide2, not qtutils.\n\nThe only issue I've seen that might be the a problem with qtutils so far is that the outputbox\ntext isn't white. Not sure why.\n\nThere are other rough edges - some PySide2 methods appear to not accept say, integers,\nrequiring the right Qt datatype such as a Qt.Checkstate. So where integers have\nbeen saved to config files, when restored they need to be wrapped in Qt.CheckState(int) before being\nused in Qt methods. And they will need to converted to integers before being saved to the config file\nso that they are compatible betwen Qt wrappers. This means labscript programs are all erroring on\nloading their config files.\n\nEither PySide2 will sort issues like this out (it seems to be in very active development at the moment)\nor fixes can be applied to the applications. There is plenty of time, but basic\nqtutils support seems to be step 1 so here it is.\n\nFor now PySide2 is listed as the lowest priority Qt lib in qtutils.qt, so it\nis unlikely anyone will have issues for the moment, but I expect it will be more\nwidely used in the future and probably become the default Qt in\nAnaconda.", "type": "commit", "git_hash": "2ad4b351154b8af8a5fb67267182cc3fbdc61002", "tags": null, "branches": "default"}