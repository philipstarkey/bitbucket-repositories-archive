{"rendered": {"message": {"raw": "Upscale icons for better HiDPI support.\n\nCustom icons were upscaled by re-exporting source svgs at higher resolution.\n\nFugue icons upscaled to 32x32 by simple pixel doubling. This way we are not\nrelying on OS scaling or on Qt to scale the icons, which may scale with\ninterpolation that looks even worse considering icons are pixel-art.\n\nThe script to perform the upscaling is included in the repository, and\nthe original 16x16 icons kept.\n\nThis is a decent stop-gap to look OK on high iDPI screens until an icon set as\ncomprehensive as fugue exists at higher resolution (I cannot find anything\ncomparable at the moment).\n\nIncluding icons in multiple sizes was an option I explored, but it does not work\nwell with Qt designer - it does not choose the correct icon size from .ico\nfiles. Including an excessively large icon and letting Qt downscale is the\ncurrent best practice (unfortunately). I would have liked to upscale the icons\nusing clever pixel-art scaling filters, but then they look terrible when\nQt *downscales* them fot a standard DPI screen. So scaling by pixel doubling\nis the lesser evil for the moment.", "markup": "markdown", "html": "<p>Upscale icons for better HiDPI support.</p>\n<p>Custom icons were upscaled by re-exporting source svgs at higher resolution.</p>\n<p>Fugue icons upscaled to 32x32 by simple pixel doubling. This way we are not<br />\nrelying on OS scaling or on Qt to scale the icons, which may scale with<br />\ninterpolation that looks even worse considering icons are pixel-art.</p>\n<p>The script to perform the upscaling is included in the repository, and<br />\nthe original 16x16 icons kept.</p>\n<p>This is a decent stop-gap to look OK on high iDPI screens until an icon set as<br />\ncomprehensive as fugue exists at higher resolution (I cannot find anything<br />\ncomparable at the moment).</p>\n<p>Including icons in multiple sizes was an option I explored, but it does not work<br />\nwell with Qt designer - it does not choose the correct icon size from .ico<br />\nfiles. Including an excessively large icon and letting Qt downscale is the<br />\ncurrent best practice (unfortunately). I would have liked to upscale the icons<br />\nusing clever pixel-art scaling filters, but then they look terrible when<br />\nQt <em>downscales</em> them fot a standard DPI screen. So scaling by pixel doubling<br />\nis the lesser evil for the moment.</p>", "type": "rendered"}}, "hash": "98a06a7588989c90d8b7a02d18cb31731fb2be46", "repository": {"links": {"self": {"href": "data/repositories/cbillington/qtutils.json"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/98a06a7588989c90d8b7a02d18cb31731fb2be46.json"}, "comments": {"href": "data/repositories/cbillington/qtutils/commit/98a06a7588989c90d8b7a02d18cb31731fb2be46/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/patch/98a06a7588989c90d8b7a02d18cb31731fb2be46"}, "html": {"href": "#!/cbillington/qtutils/commits/98a06a7588989c90d8b7a02d18cb31731fb2be46"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/diff/98a06a7588989c90d8b7a02d18cb31731fb2be46"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/98a06a7588989c90d8b7a02d18cb31731fb2be46/approve"}, "statuses": {"href": "data/repositories/cbillington/qtutils/commit/98a06a7588989c90d8b7a02d18cb31731fb2be46/statuses_page=1.json"}}, "author": {"raw": "chrisjbillington", "type": "author"}, "summary": {"raw": "Upscale icons for better HiDPI support.\n\nCustom icons were upscaled by re-exporting source svgs at higher resolution.\n\nFugue icons upscaled to 32x32 by simple pixel doubling. This way we are not\nrelying on OS scaling or on Qt to scale the icons, which may scale with\ninterpolation that looks even worse considering icons are pixel-art.\n\nThe script to perform the upscaling is included in the repository, and\nthe original 16x16 icons kept.\n\nThis is a decent stop-gap to look OK on high iDPI screens until an icon set as\ncomprehensive as fugue exists at higher resolution (I cannot find anything\ncomparable at the moment).\n\nIncluding icons in multiple sizes was an option I explored, but it does not work\nwell with Qt designer - it does not choose the correct icon size from .ico\nfiles. Including an excessively large icon and letting Qt downscale is the\ncurrent best practice (unfortunately). I would have liked to upscale the icons\nusing clever pixel-art scaling filters, but then they look terrible when\nQt *downscales* them fot a standard DPI screen. So scaling by pixel doubling\nis the lesser evil for the moment.", "markup": "markdown", "html": "<p>Upscale icons for better HiDPI support.</p>\n<p>Custom icons were upscaled by re-exporting source svgs at higher resolution.</p>\n<p>Fugue icons upscaled to 32x32 by simple pixel doubling. This way we are not<br />\nrelying on OS scaling or on Qt to scale the icons, which may scale with<br />\ninterpolation that looks even worse considering icons are pixel-art.</p>\n<p>The script to perform the upscaling is included in the repository, and<br />\nthe original 16x16 icons kept.</p>\n<p>This is a decent stop-gap to look OK on high iDPI screens until an icon set as<br />\ncomprehensive as fugue exists at higher resolution (I cannot find anything<br />\ncomparable at the moment).</p>\n<p>Including icons in multiple sizes was an option I explored, but it does not work<br />\nwell with Qt designer - it does not choose the correct icon size from .ico<br />\nfiles. Including an excessively large icon and letting Qt downscale is the<br />\ncurrent best practice (unfortunately). I would have liked to upscale the icons<br />\nusing clever pixel-art scaling filters, but then they look terrible when<br />\nQt <em>downscales</em> them fot a standard DPI screen. So scaling by pixel doubling<br />\nis the lesser evil for the moment.</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "ce633e06d4e2b60d0cc92f666a501302b27b1bcf", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/ce633e06d4e2b60d0cc92f666a501302b27b1bcf.json"}, "html": {"href": "#!/cbillington/qtutils/commits/ce633e06d4e2b60d0cc92f666a501302b27b1bcf"}}}], "date": "2019-03-28T19:56:28+00:00", "message": "Upscale icons for better HiDPI support.\n\nCustom icons were upscaled by re-exporting source svgs at higher resolution.\n\nFugue icons upscaled to 32x32 by simple pixel doubling. This way we are not\nrelying on OS scaling or on Qt to scale the icons, which may scale with\ninterpolation that looks even worse considering icons are pixel-art.\n\nThe script to perform the upscaling is included in the repository, and\nthe original 16x16 icons kept.\n\nThis is a decent stop-gap to look OK on high iDPI screens until an icon set as\ncomprehensive as fugue exists at higher resolution (I cannot find anything\ncomparable at the moment).\n\nIncluding icons in multiple sizes was an option I explored, but it does not work\nwell with Qt designer - it does not choose the correct icon size from .ico\nfiles. Including an excessively large icon and letting Qt downscale is the\ncurrent best practice (unfortunately). I would have liked to upscale the icons\nusing clever pixel-art scaling filters, but then they look terrible when\nQt *downscales* them fot a standard DPI screen. So scaling by pixel doubling\nis the lesser evil for the moment.", "type": "commit", "git_hash": "c5826a193b5bddb7749c15ef2b773718df813f61", "tags": null, "branches": "hidpi"}