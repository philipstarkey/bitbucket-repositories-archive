{"pagelen": 100, "values": [{"rendered": {"message": {"raw": "Created a toolpalette widget in Qt to replace the GTK ToolPalette widget. Currently it will resize a grid layout so that you never need to scroll.\nWill now work on adding groups to the toolpalette which can be minimised\n\nAdded .hgignore file which now ignores all .pyc files", "markup": "markdown", "html": "<p>Created a toolpalette widget in Qt to replace the GTK ToolPalette widget. Currently it will resize a grid layout so that you never need to scroll.<br />\nWill now work on adding groups to the toolpalette which can be minimised</p>\n<p>Added .hgignore file which now ignores all .pyc files</p>", "type": "rendered"}}, "hash": "2dd8aff0eb67e0522440e3317ef938dda9a818f3", "repository": {"links": {"self": {"href": "data/repositories/cbillington/qtutils.json"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/2dd8aff0eb67e0522440e3317ef938dda9a818f3.json"}, "comments": {"href": "data/repositories/cbillington/qtutils/commit/2dd8aff0eb67e0522440e3317ef938dda9a818f3/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/patch/2dd8aff0eb67e0522440e3317ef938dda9a818f3"}, "html": {"href": "#!/cbillington/qtutils/commits/2dd8aff0eb67e0522440e3317ef938dda9a818f3"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/diff/2dd8aff0eb67e0522440e3317ef938dda9a818f3"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/2dd8aff0eb67e0522440e3317ef938dda9a818f3/approve"}, "statuses": {"href": "data/repositories/cbillington/qtutils/commit/2dd8aff0eb67e0522440e3317ef938dda9a818f3/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Created a toolpalette widget in Qt to replace the GTK ToolPalette widget. Currently it will resize a grid layout so that you never need to scroll.\nWill now work on adding groups to the toolpalette which can be minimised\n\nAdded .hgignore file which now ignores all .pyc files", "markup": "markdown", "html": "<p>Created a toolpalette widget in Qt to replace the GTK ToolPalette widget. Currently it will resize a grid layout so that you never need to scroll.<br />\nWill now work on adding groups to the toolpalette which can be minimised</p>\n<p>Added .hgignore file which now ignores all .pyc files</p>", "type": "rendered"}, "parents": [{"hash": "49e01f79a7ce3046d07f5109cf438b72791aef71", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/49e01f79a7ce3046d07f5109cf438b72791aef71.json"}, "html": {"href": "#!/cbillington/qtutils/commits/49e01f79a7ce3046d07f5109cf438b72791aef71"}}}], "date": "2013-01-18T23:48:17+00:00", "message": "Created a toolpalette widget in Qt to replace the GTK ToolPalette widget. Currently it will resize a grid layout so that you never need to scroll.\nWill now work on adding groups to the toolpalette which can be minimised\n\nAdded .hgignore file which now ignores all .pyc files", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed unclear variable name in invoke_in_main.py\nRenamed function in dragdroptab.py to match what it does\nRenamed dragdroptab.pyw -> dragdroptab.py", "markup": "markdown", "html": "<p>Fixed unclear variable name in invoke_in_main.py<br />\nRenamed function in dragdroptab.py to match what it does<br />\nRenamed dragdroptab.pyw -&gt; dragdroptab.py</p>", "type": "rendered"}}, "hash": "49e01f79a7ce3046d07f5109cf438b72791aef71", "repository": {"links": {"self": {"href": "data/repositories/cbillington/qtutils.json"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/49e01f79a7ce3046d07f5109cf438b72791aef71.json"}, "comments": {"href": "data/repositories/cbillington/qtutils/commit/49e01f79a7ce3046d07f5109cf438b72791aef71/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/patch/49e01f79a7ce3046d07f5109cf438b72791aef71"}, "html": {"href": "#!/cbillington/qtutils/commits/49e01f79a7ce3046d07f5109cf438b72791aef71"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/diff/49e01f79a7ce3046d07f5109cf438b72791aef71"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/49e01f79a7ce3046d07f5109cf438b72791aef71/approve"}, "statuses": {"href": "data/repositories/cbillington/qtutils/commit/49e01f79a7ce3046d07f5109cf438b72791aef71/statuses_page=1.json"}}, "author": {"raw": "Phil@pinetab.staff.monash.edu.au", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Fixed unclear variable name in invoke_in_main.py\nRenamed function in dragdroptab.py to match what it does\nRenamed dragdroptab.pyw -> dragdroptab.py", "markup": "markdown", "html": "<p>Fixed unclear variable name in invoke_in_main.py<br />\nRenamed function in dragdroptab.py to match what it does<br />\nRenamed dragdroptab.pyw -&gt; dragdroptab.py</p>", "type": "rendered"}, "parents": [{"hash": "9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1.json"}, "html": {"href": "#!/cbillington/qtutils/commits/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1"}}}], "date": "2013-01-10T23:55:11+00:00", "message": "Fixed unclear variable name in invoke_in_main.py\nRenamed function in dragdroptab.py to match what it does\nRenamed dragdroptab.pyw -> dragdroptab.py", "type": "commit"}, {"rendered": {"message": {"raw": "Added the dragdroptab widget for Qt into the newly created widgets module", "markup": "markdown", "html": "<p>Added the dragdroptab widget for Qt into the newly created widgets module</p>", "type": "rendered"}}, "hash": "9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1", "repository": {"links": {"self": {"href": "data/repositories/cbillington/qtutils.json"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1.json"}, "comments": {"href": "data/repositories/cbillington/qtutils/commit/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/patch/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1"}, "html": {"href": "#!/cbillington/qtutils/commits/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/diff/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1/approve"}, "statuses": {"href": "data/repositories/cbillington/qtutils/commit/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1/statuses_page=1.json"}}, "author": {"raw": "Phil@pinetab.staff.monash.edu.au", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Added the dragdroptab widget for Qt into the newly created widgets module", "markup": "markdown", "html": "<p>Added the dragdroptab widget for Qt into the newly created widgets module</p>", "type": "rendered"}, "parents": [{"hash": "9d3fffebe25b9b019a814d801eb9d1382e69c568", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/9d3fffebe25b9b019a814d801eb9d1382e69c568.json"}, "html": {"href": "#!/cbillington/qtutils/commits/9d3fffebe25b9b019a814d801eb9d1382e69c568"}}}], "date": "2013-01-10T23:17:43+00:00", "message": "Added the dragdroptab widget for Qt into the newly created widgets module", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed a bug where you could not set wait=False when using @inmain_decorator because it threw an error about incorrect number of function arguments.", "markup": "markdown", "html": "<p>Fixed a bug where you could not set wait=False when using @inmain_decorator because it threw an error about incorrect number of function arguments.</p>", "type": "rendered"}}, "hash": "9d3fffebe25b9b019a814d801eb9d1382e69c568", "repository": {"links": {"self": {"href": "data/repositories/cbillington/qtutils.json"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/9d3fffebe25b9b019a814d801eb9d1382e69c568.json"}, "comments": {"href": "data/repositories/cbillington/qtutils/commit/9d3fffebe25b9b019a814d801eb9d1382e69c568/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/patch/9d3fffebe25b9b019a814d801eb9d1382e69c568"}, "html": {"href": "#!/cbillington/qtutils/commits/9d3fffebe25b9b019a814d801eb9d1382e69c568"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/diff/9d3fffebe25b9b019a814d801eb9d1382e69c568"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/9d3fffebe25b9b019a814d801eb9d1382e69c568/approve"}, "statuses": {"href": "data/repositories/cbillington/qtutils/commit/9d3fffebe25b9b019a814d801eb9d1382e69c568/statuses_page=1.json"}}, "author": {"raw": "Phil@pinetab.staff.monash.edu.au", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Fixed a bug where you could not set wait=False when using @inmain_decorator because it threw an error about incorrect number of function arguments.", "markup": "markdown", "html": "<p>Fixed a bug where you could not set wait=False when using @inmain_decorator because it threw an error about incorrect number of function arguments.</p>", "type": "rendered"}, "parents": [{"hash": "b40f243071d95d70a16c46d40e97c5ec6f9ca0db", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/b40f243071d95d70a16c46d40e97c5ec6f9ca0db.json"}, "html": {"href": "#!/cbillington/qtutils/commits/b40f243071d95d70a16c46d40e97c5ec6f9ca0db"}}}], "date": "2013-01-10T23:17:10+00:00", "message": "Fixed a bug where you could not set wait=False when using @inmain_decorator because it threw an error about incorrect number of function arguments.", "type": "commit"}, {"rendered": {"message": {"raw": "Added function inthread(fn, *args, **kwargs) for easily launching a function in a daemon thread.", "markup": "markdown", "html": "<p>Added function inthread(fn, <em>args, </em>*kwargs) for easily launching a function in a daemon thread.</p>", "type": "rendered"}}, "hash": "b40f243071d95d70a16c46d40e97c5ec6f9ca0db", "repository": {"links": {"self": {"href": "data/repositories/cbillington/qtutils.json"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/b40f243071d95d70a16c46d40e97c5ec6f9ca0db.json"}, "comments": {"href": "data/repositories/cbillington/qtutils/commit/b40f243071d95d70a16c46d40e97c5ec6f9ca0db/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/patch/b40f243071d95d70a16c46d40e97c5ec6f9ca0db"}, "html": {"href": "#!/cbillington/qtutils/commits/b40f243071d95d70a16c46d40e97c5ec6f9ca0db"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/diff/b40f243071d95d70a16c46d40e97c5ec6f9ca0db"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/b40f243071d95d70a16c46d40e97c5ec6f9ca0db/approve"}, "statuses": {"href": "data/repositories/cbillington/qtutils/commit/b40f243071d95d70a16c46d40e97c5ec6f9ca0db/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Added function inthread(fn, *args, **kwargs) for easily launching a function in a daemon thread.", "markup": "markdown", "html": "<p>Added function inthread(fn, <em>args, </em>*kwargs) for easily launching a function in a daemon thread.</p>", "type": "rendered"}, "parents": [{"hash": "73a9ddb98e4b54e3a6956af34c62cfcb837afade", "type": "commit", "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade.json"}, "html": {"href": "#!/cbillington/qtutils/commits/73a9ddb98e4b54e3a6956af34c62cfcb837afade"}}}], "date": "2012-10-15T12:18:49+00:00", "message": "Added function inthread(fn, *args, **kwargs) for easily launching a function in a daemon thread.", "type": "commit"}, {"rendered": {"message": {"raw": "Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.\ninmain(fn,*args,**kwargs): runs a function in the mainloop, waiting on it and returning its result.\ninmain_later(fn,*args,**kwargs): ask for a function to be run in the mainloop, not waiting on it.\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).\n\nQt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.", "markup": "markdown", "html": "<p>Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:<br />\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.<br />\ninmain(fn,*args,<strong>kwargs): runs a function in the mainloop, waiting on it and returning its result.<br />\ninmain_later(fn,*args,</strong>kwargs): ask for a function to be run in the mainloop, not waiting on it.<br />\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).</p>\n<p>Qt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.</p>", "type": "rendered"}}, "hash": "73a9ddb98e4b54e3a6956af34c62cfcb837afade", "repository": {"links": {"self": {"href": "data/repositories/cbillington/qtutils.json"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "links": {"self": {"href": "data/repositories/cbillington/qtutils/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade.json"}, "comments": {"href": "data/repositories/cbillington/qtutils/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/patch/73a9ddb98e4b54e3a6956af34c62cfcb837afade"}, "html": {"href": "#!/cbillington/qtutils/commits/73a9ddb98e4b54e3a6956af34c62cfcb837afade"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/diff/73a9ddb98e4b54e3a6956af34c62cfcb837afade"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade/approve"}, "statuses": {"href": "data/repositories/cbillington/qtutils/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.\ninmain(fn,*args,**kwargs): runs a function in the mainloop, waiting on it and returning its result.\ninmain_later(fn,*args,**kwargs): ask for a function to be run in the mainloop, not waiting on it.\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).\n\nQt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.", "markup": "markdown", "html": "<p>Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:<br />\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.<br />\ninmain(fn,*args,<strong>kwargs): runs a function in the mainloop, waiting on it and returning its result.<br />\ninmain_later(fn,*args,</strong>kwargs): ask for a function to be run in the mainloop, not waiting on it.<br />\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).</p>\n<p>Qt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.</p>", "type": "rendered"}, "parents": [], "date": "2012-10-14T12:16:22+00:00", "message": "Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.\ninmain(fn,*args,**kwargs): runs a function in the mainloop, waiting on it and returning its result.\ninmain_later(fn,*args,**kwargs): ask for a function to be run in the mainloop, not waiting on it.\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).\n\nQt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.", "type": "commit"}], "previous": "data/repositories/cbillington/qtutils/commits/1.5.4_page=1.json"}