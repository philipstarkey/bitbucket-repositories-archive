{"rendered": {"message": {"raw": "Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.\ninmain(fn,*args,**kwargs): runs a function in the mainloop, waiting on it and returning its result.\ninmain_later(fn,*args,**kwargs): ask for a function to be run in the mainloop, not waiting on it.\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).\n\nQt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.", "markup": "markdown", "html": "<p>Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:<br />\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.<br />\ninmain(fn,*args,<strong>kwargs): runs a function in the mainloop, waiting on it and returning its result.<br />\ninmain_later(fn,*args,</strong>kwargs): ask for a function to be run in the mainloop, not waiting on it.<br />\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).</p>\n<p>Qt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.</p>", "type": "rendered"}}, "hash": "73a9ddb98e4b54e3a6956af34c62cfcb837afade", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev.json"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade.json"}, "comments": {"href": "data/repositories/pstarkey/qtutils-dev/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/patch/73a9ddb98e4b54e3a6956af34c62cfcb837afade"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/73a9ddb98e4b54e3a6956af34c62cfcb837afade"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/diff/73a9ddb98e4b54e3a6956af34c62cfcb837afade"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade/approve"}, "statuses": {"href": "data/repositories/pstarkey/qtutils-dev/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.\ninmain(fn,*args,**kwargs): runs a function in the mainloop, waiting on it and returning its result.\ninmain_later(fn,*args,**kwargs): ask for a function to be run in the mainloop, not waiting on it.\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).\n\nQt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.", "markup": "markdown", "html": "<p>Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:<br />\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.<br />\ninmain(fn,*args,<strong>kwargs): runs a function in the mainloop, waiting on it and returning its result.<br />\ninmain_later(fn,*args,</strong>kwargs): ask for a function to be run in the mainloop, not waiting on it.<br />\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).</p>\n<p>Qt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.</p>", "type": "rendered"}, "participants": [], "parents": [], "date": "2012-10-14T12:16:22+00:00", "message": "Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.\ninmain(fn,*args,**kwargs): runs a function in the mainloop, waiting on it and returning its result.\ninmain_later(fn,*args,**kwargs): ask for a function to be run in the mainloop, not waiting on it.\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).\n\nQt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.", "type": "commit", "git_hash": "|7a3c4b85-dc5b-4f28-b615-259111d2eba4|c71fd5838b4d7241d13000b30d46cdd5b9ea7f99", "tags": null, "branches": "default"}