{"pagelen": 100, "values": [{"rendered": {"message": {"raw": "Wrote a test to use these in BLACS/output_classes.py and thus fixed some bugs\n\nStill have a a weird bug where clicking a combobox with a model causes the application to stop responding...", "markup": "markdown", "html": "<p>Wrote a test to use these in BLACS/output_classes.py and thus fixed some bugs</p>\n<p>Still have a a weird bug where clicking a combobox with a model causes the application to stop responding...</p>", "type": "rendered"}}, "hash": "2f070de5b95fffe6ff4b48bf1aaa6ef6d1914172", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev.json"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/2f070de5b95fffe6ff4b48bf1aaa6ef6d1914172.json"}, "comments": {"href": "data/repositories/pstarkey/qtutils-dev/commit/2f070de5b95fffe6ff4b48bf1aaa6ef6d1914172/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/patch/2f070de5b95fffe6ff4b48bf1aaa6ef6d1914172"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/2f070de5b95fffe6ff4b48bf1aaa6ef6d1914172"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/diff/2f070de5b95fffe6ff4b48bf1aaa6ef6d1914172"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/2f070de5b95fffe6ff4b48bf1aaa6ef6d1914172/approve"}, "statuses": {"href": "data/repositories/pstarkey/qtutils-dev/commit/2f070de5b95fffe6ff4b48bf1aaa6ef6d1914172/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Wrote a test to use these in BLACS/output_classes.py and thus fixed some bugs\n\nStill have a a weird bug where clicking a combobox with a model causes the application to stop responding...", "markup": "markdown", "html": "<p>Wrote a test to use these in BLACS/output_classes.py and thus fixed some bugs</p>\n<p>Still have a a weird bug where clicking a combobox with a model causes the application to stop responding...</p>", "type": "rendered"}, "parents": [{"hash": "259bf94ae3fc904ed63a4218da91508dd793856a", "type": "commit", "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/259bf94ae3fc904ed63a4218da91508dd793856a.json"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/259bf94ae3fc904ed63a4218da91508dd793856a"}}}], "date": "2013-01-28T10:33:33+00:00", "message": "Wrote a test to use these in BLACS/output_classes.py and thus fixed some bugs\n\nStill have a a weird bug where clicking a combobox with a model causes the application to stop responding...", "type": "commit"}, {"rendered": {"message": {"raw": "Modified the digital/analog out classes to stop recursion of lock states and to integrate with the new AO/DO output class in BLACS", "markup": "markdown", "html": "<p>Modified the digital/analog out classes to stop recursion of lock states and to integrate with the new AO/DO output class in BLACS</p>", "type": "rendered"}}, "hash": "259bf94ae3fc904ed63a4218da91508dd793856a", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev.json"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/259bf94ae3fc904ed63a4218da91508dd793856a.json"}, "comments": {"href": "data/repositories/pstarkey/qtutils-dev/commit/259bf94ae3fc904ed63a4218da91508dd793856a/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/patch/259bf94ae3fc904ed63a4218da91508dd793856a"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/259bf94ae3fc904ed63a4218da91508dd793856a"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/diff/259bf94ae3fc904ed63a4218da91508dd793856a"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/259bf94ae3fc904ed63a4218da91508dd793856a/approve"}, "statuses": {"href": "data/repositories/pstarkey/qtutils-dev/commit/259bf94ae3fc904ed63a4218da91508dd793856a/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Modified the digital/analog out classes to stop recursion of lock states and to integrate with the new AO/DO output class in BLACS", "markup": "markdown", "html": "<p>Modified the digital/analog out classes to stop recursion of lock states and to integrate with the new AO/DO output class in BLACS</p>", "type": "rendered"}, "parents": [{"hash": "0921d1f80bf0b8331ca2318541c531527150d287", "type": "commit", "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/0921d1f80bf0b8331ca2318541c531527150d287.json"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/0921d1f80bf0b8331ca2318541c531527150d287"}}}], "date": "2013-01-28T06:16:07+00:00", "message": "Modified the digital/analog out classes to stop recursion of lock states and to integrate with the new AO/DO output class in BLACS", "type": "commit"}, {"rendered": {"message": {"raw": "Created analogoutput widget that can be locked/unlocked. The combobox currently stays unlocked and you cannot get to the lock item in the contxt menu of the combobox.\n\nWill need some work to integrate with an AO class (eg linking comboboxes to a common model, etc)", "markup": "markdown", "html": "<p>Created analogoutput widget that can be locked/unlocked. The combobox currently stays unlocked and you cannot get to the lock item in the contxt menu of the combobox.</p>\n<p>Will need some work to integrate with an AO class (eg linking comboboxes to a common model, etc)</p>", "type": "rendered"}}, "hash": "0921d1f80bf0b8331ca2318541c531527150d287", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev.json"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/0921d1f80bf0b8331ca2318541c531527150d287.json"}, "comments": {"href": "data/repositories/pstarkey/qtutils-dev/commit/0921d1f80bf0b8331ca2318541c531527150d287/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/patch/0921d1f80bf0b8331ca2318541c531527150d287"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/0921d1f80bf0b8331ca2318541c531527150d287"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/diff/0921d1f80bf0b8331ca2318541c531527150d287"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/0921d1f80bf0b8331ca2318541c531527150d287/approve"}, "statuses": {"href": "data/repositories/pstarkey/qtutils-dev/commit/0921d1f80bf0b8331ca2318541c531527150d287/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Created analogoutput widget that can be locked/unlocked. The combobox currently stays unlocked and you cannot get to the lock item in the contxt menu of the combobox.\n\nWill need some work to integrate with an AO class (eg linking comboboxes to a common model, etc)", "markup": "markdown", "html": "<p>Created analogoutput widget that can be locked/unlocked. The combobox currently stays unlocked and you cannot get to the lock item in the contxt menu of the combobox.</p>\n<p>Will need some work to integrate with an AO class (eg linking comboboxes to a common model, etc)</p>", "type": "rendered"}, "parents": [{"hash": "add978295111f423962dafdb95c6339e9bcb64a6", "type": "commit", "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/add978295111f423962dafdb95c6339e9bcb64a6.json"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/add978295111f423962dafdb95c6339e9bcb64a6"}}}], "date": "2013-01-25T00:27:55+00:00", "message": "Created analogoutput widget that can be locked/unlocked. The combobox currently stays unlocked and you cannot get to the lock item in the contxt menu of the combobox.\n\nWill need some work to integrate with an AO class (eg linking comboboxes to a common model, etc)", "type": "commit"}, {"rendered": {"message": {"raw": "Created a digital output widget that is effectively a checkable QPushButton that also has a right click menu to lock/unlock the widget (which works even if the widget is disabled via setEnabled(False), meaning we don't have to implement the horrible hack we did in GTK to change the widget theme and foribly set the button state back to what it was when someone clicked it!).\n\nMade the example toolpalette accept style arguments from the commandline (I like using -style cleanlooks)", "markup": "markdown", "html": "<p>Created a digital output widget that is effectively a checkable QPushButton that also has a right click menu to lock/unlock the widget (which works even if the widget is disabled via setEnabled(False), meaning we don't have to implement the horrible hack we did in GTK to change the widget theme and foribly set the button state back to what it was when someone clicked it!).</p>\n<p>Made the example toolpalette accept style arguments from the commandline (I like using -style cleanlooks)</p>", "type": "rendered"}}, "hash": "add978295111f423962dafdb95c6339e9bcb64a6", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev.json"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/add978295111f423962dafdb95c6339e9bcb64a6.json"}, "comments": {"href": "data/repositories/pstarkey/qtutils-dev/commit/add978295111f423962dafdb95c6339e9bcb64a6/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/patch/add978295111f423962dafdb95c6339e9bcb64a6"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/add978295111f423962dafdb95c6339e9bcb64a6"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/diff/add978295111f423962dafdb95c6339e9bcb64a6"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/add978295111f423962dafdb95c6339e9bcb64a6/approve"}, "statuses": {"href": "data/repositories/pstarkey/qtutils-dev/commit/add978295111f423962dafdb95c6339e9bcb64a6/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Created a digital output widget that is effectively a checkable QPushButton that also has a right click menu to lock/unlock the widget (which works even if the widget is disabled via setEnabled(False), meaning we don't have to implement the horrible hack we did in GTK to change the widget theme and foribly set the button state back to what it was when someone clicked it!).\n\nMade the example toolpalette accept style arguments from the commandline (I like using -style cleanlooks)", "markup": "markdown", "html": "<p>Created a digital output widget that is effectively a checkable QPushButton that also has a right click menu to lock/unlock the widget (which works even if the widget is disabled via setEnabled(False), meaning we don't have to implement the horrible hack we did in GTK to change the widget theme and foribly set the button state back to what it was when someone clicked it!).</p>\n<p>Made the example toolpalette accept style arguments from the commandline (I like using -style cleanlooks)</p>", "type": "rendered"}, "parents": [{"hash": "5e366a98b873b7cd01b8ed95629d06e17e9a3e50", "type": "commit", "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/5e366a98b873b7cd01b8ed95629d06e17e9a3e50.json"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/5e366a98b873b7cd01b8ed95629d06e17e9a3e50"}}}], "date": "2013-01-20T04:57:49+00:00", "message": "Created a digital output widget that is effectively a checkable QPushButton that also has a right click menu to lock/unlock the widget (which works even if the widget is disabled via setEnabled(False), meaning we don't have to implement the horrible hack we did in GTK to change the widget theme and foribly set the button state back to what it was when someone clicked it!).\n\nMade the example toolpalette accept style arguments from the commandline (I like using -style cleanlooks)", "type": "commit"}, {"rendered": {"message": {"raw": "Made a toolpalettegroup class. This now puts hide/show buttons at the top of each ToolPalette\nYou can also link the widths of items across multiple toolpalettes so that they look nice!\nFixed a bug with the 'number of widgets in a row' calculation. This still needs a bit of work as there is a fudge factor in there still.\n\nStill need to implement an icon in the hide/show button to indicate the hide/show state (like an arrow)\nNeed to implement some reorder methods for the toolpalettegroup.\nNeed to implement remove methods for the toolpalettegroup and the linked width group\nPossibly should replace my complex dictionary/tuple structure with classes\nNeed to work out why the 'tab key' ordering is strange\n\nWould be cool if I could implement drag/drop for the toolpalletes with the toolpalette group!", "markup": "markdown", "html": "<p>Made a toolpalettegroup class. This now puts hide/show buttons at the top of each ToolPalette<br />\nYou can also link the widths of items across multiple toolpalettes so that they look nice!<br />\nFixed a bug with the 'number of widgets in a row' calculation. This still needs a bit of work as there is a fudge factor in there still.</p>\n<p>Still need to implement an icon in the hide/show button to indicate the hide/show state (like an arrow)<br />\nNeed to implement some reorder methods for the toolpalettegroup.<br />\nNeed to implement remove methods for the toolpalettegroup and the linked width group<br />\nPossibly should replace my complex dictionary/tuple structure with classes<br />\nNeed to work out why the 'tab key' ordering is strange</p>\n<p>Would be cool if I could implement drag/drop for the toolpalletes with the toolpalette group!</p>", "type": "rendered"}}, "hash": "5e366a98b873b7cd01b8ed95629d06e17e9a3e50", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev.json"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/5e366a98b873b7cd01b8ed95629d06e17e9a3e50.json"}, "comments": {"href": "data/repositories/pstarkey/qtutils-dev/commit/5e366a98b873b7cd01b8ed95629d06e17e9a3e50/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/patch/5e366a98b873b7cd01b8ed95629d06e17e9a3e50"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/5e366a98b873b7cd01b8ed95629d06e17e9a3e50"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/diff/5e366a98b873b7cd01b8ed95629d06e17e9a3e50"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/5e366a98b873b7cd01b8ed95629d06e17e9a3e50/approve"}, "statuses": {"href": "data/repositories/pstarkey/qtutils-dev/commit/5e366a98b873b7cd01b8ed95629d06e17e9a3e50/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Made a toolpalettegroup class. This now puts hide/show buttons at the top of each ToolPalette\nYou can also link the widths of items across multiple toolpalettes so that they look nice!\nFixed a bug with the 'number of widgets in a row' calculation. This still needs a bit of work as there is a fudge factor in there still.\n\nStill need to implement an icon in the hide/show button to indicate the hide/show state (like an arrow)\nNeed to implement some reorder methods for the toolpalettegroup.\nNeed to implement remove methods for the toolpalettegroup and the linked width group\nPossibly should replace my complex dictionary/tuple structure with classes\nNeed to work out why the 'tab key' ordering is strange\n\nWould be cool if I could implement drag/drop for the toolpalletes with the toolpalette group!", "markup": "markdown", "html": "<p>Made a toolpalettegroup class. This now puts hide/show buttons at the top of each ToolPalette<br />\nYou can also link the widths of items across multiple toolpalettes so that they look nice!<br />\nFixed a bug with the 'number of widgets in a row' calculation. This still needs a bit of work as there is a fudge factor in there still.</p>\n<p>Still need to implement an icon in the hide/show button to indicate the hide/show state (like an arrow)<br />\nNeed to implement some reorder methods for the toolpalettegroup.<br />\nNeed to implement remove methods for the toolpalettegroup and the linked width group<br />\nPossibly should replace my complex dictionary/tuple structure with classes<br />\nNeed to work out why the 'tab key' ordering is strange</p>\n<p>Would be cool if I could implement drag/drop for the toolpalletes with the toolpalette group!</p>", "type": "rendered"}, "parents": [{"hash": "2dd8aff0eb67e0522440e3317ef938dda9a818f3", "type": "commit", "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/2dd8aff0eb67e0522440e3317ef938dda9a818f3.json"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/2dd8aff0eb67e0522440e3317ef938dda9a818f3"}}}], "date": "2013-01-19T06:05:00+00:00", "message": "Made a toolpalettegroup class. This now puts hide/show buttons at the top of each ToolPalette\nYou can also link the widths of items across multiple toolpalettes so that they look nice!\nFixed a bug with the 'number of widgets in a row' calculation. This still needs a bit of work as there is a fudge factor in there still.\n\nStill need to implement an icon in the hide/show button to indicate the hide/show state (like an arrow)\nNeed to implement some reorder methods for the toolpalettegroup.\nNeed to implement remove methods for the toolpalettegroup and the linked width group\nPossibly should replace my complex dictionary/tuple structure with classes\nNeed to work out why the 'tab key' ordering is strange\n\nWould be cool if I could implement drag/drop for the toolpalletes with the toolpalette group!", "type": "commit"}, {"rendered": {"message": {"raw": "Created a toolpalette widget in Qt to replace the GTK ToolPalette widget. Currently it will resize a grid layout so that you never need to scroll.\nWill now work on adding groups to the toolpalette which can be minimised\n\nAdded .hgignore file which now ignores all .pyc files", "markup": "markdown", "html": "<p>Created a toolpalette widget in Qt to replace the GTK ToolPalette widget. Currently it will resize a grid layout so that you never need to scroll.<br />\nWill now work on adding groups to the toolpalette which can be minimised</p>\n<p>Added .hgignore file which now ignores all .pyc files</p>", "type": "rendered"}}, "hash": "2dd8aff0eb67e0522440e3317ef938dda9a818f3", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev.json"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/2dd8aff0eb67e0522440e3317ef938dda9a818f3.json"}, "comments": {"href": "data/repositories/pstarkey/qtutils-dev/commit/2dd8aff0eb67e0522440e3317ef938dda9a818f3/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/patch/2dd8aff0eb67e0522440e3317ef938dda9a818f3"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/2dd8aff0eb67e0522440e3317ef938dda9a818f3"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/diff/2dd8aff0eb67e0522440e3317ef938dda9a818f3"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/2dd8aff0eb67e0522440e3317ef938dda9a818f3/approve"}, "statuses": {"href": "data/repositories/pstarkey/qtutils-dev/commit/2dd8aff0eb67e0522440e3317ef938dda9a818f3/statuses_page=1.json"}}, "author": {"raw": "pstarkey", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Created a toolpalette widget in Qt to replace the GTK ToolPalette widget. Currently it will resize a grid layout so that you never need to scroll.\nWill now work on adding groups to the toolpalette which can be minimised\n\nAdded .hgignore file which now ignores all .pyc files", "markup": "markdown", "html": "<p>Created a toolpalette widget in Qt to replace the GTK ToolPalette widget. Currently it will resize a grid layout so that you never need to scroll.<br />\nWill now work on adding groups to the toolpalette which can be minimised</p>\n<p>Added .hgignore file which now ignores all .pyc files</p>", "type": "rendered"}, "parents": [{"hash": "49e01f79a7ce3046d07f5109cf438b72791aef71", "type": "commit", "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/49e01f79a7ce3046d07f5109cf438b72791aef71.json"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/49e01f79a7ce3046d07f5109cf438b72791aef71"}}}], "date": "2013-01-18T23:48:17+00:00", "message": "Created a toolpalette widget in Qt to replace the GTK ToolPalette widget. Currently it will resize a grid layout so that you never need to scroll.\nWill now work on adding groups to the toolpalette which can be minimised\n\nAdded .hgignore file which now ignores all .pyc files", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed unclear variable name in invoke_in_main.py\nRenamed function in dragdroptab.py to match what it does\nRenamed dragdroptab.pyw -> dragdroptab.py", "markup": "markdown", "html": "<p>Fixed unclear variable name in invoke_in_main.py<br />\nRenamed function in dragdroptab.py to match what it does<br />\nRenamed dragdroptab.pyw -&gt; dragdroptab.py</p>", "type": "rendered"}}, "hash": "49e01f79a7ce3046d07f5109cf438b72791aef71", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev.json"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/49e01f79a7ce3046d07f5109cf438b72791aef71.json"}, "comments": {"href": "data/repositories/pstarkey/qtutils-dev/commit/49e01f79a7ce3046d07f5109cf438b72791aef71/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/patch/49e01f79a7ce3046d07f5109cf438b72791aef71"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/49e01f79a7ce3046d07f5109cf438b72791aef71"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/diff/49e01f79a7ce3046d07f5109cf438b72791aef71"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/49e01f79a7ce3046d07f5109cf438b72791aef71/approve"}, "statuses": {"href": "data/repositories/pstarkey/qtutils-dev/commit/49e01f79a7ce3046d07f5109cf438b72791aef71/statuses_page=1.json"}}, "author": {"raw": "Phil@pinetab.staff.monash.edu.au", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Fixed unclear variable name in invoke_in_main.py\nRenamed function in dragdroptab.py to match what it does\nRenamed dragdroptab.pyw -> dragdroptab.py", "markup": "markdown", "html": "<p>Fixed unclear variable name in invoke_in_main.py<br />\nRenamed function in dragdroptab.py to match what it does<br />\nRenamed dragdroptab.pyw -&gt; dragdroptab.py</p>", "type": "rendered"}, "parents": [{"hash": "9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1", "type": "commit", "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1.json"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1"}}}], "date": "2013-01-10T23:55:11+00:00", "message": "Fixed unclear variable name in invoke_in_main.py\nRenamed function in dragdroptab.py to match what it does\nRenamed dragdroptab.pyw -> dragdroptab.py", "type": "commit"}, {"rendered": {"message": {"raw": "Added the dragdroptab widget for Qt into the newly created widgets module", "markup": "markdown", "html": "<p>Added the dragdroptab widget for Qt into the newly created widgets module</p>", "type": "rendered"}}, "hash": "9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev.json"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1.json"}, "comments": {"href": "data/repositories/pstarkey/qtutils-dev/commit/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/patch/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/diff/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1/approve"}, "statuses": {"href": "data/repositories/pstarkey/qtutils-dev/commit/9cc1ff363c04ec5f0e15d9b591664c71b6a1a3d1/statuses_page=1.json"}}, "author": {"raw": "Phil@pinetab.staff.monash.edu.au", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Added the dragdroptab widget for Qt into the newly created widgets module", "markup": "markdown", "html": "<p>Added the dragdroptab widget for Qt into the newly created widgets module</p>", "type": "rendered"}, "parents": [{"hash": "9d3fffebe25b9b019a814d801eb9d1382e69c568", "type": "commit", "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/9d3fffebe25b9b019a814d801eb9d1382e69c568.json"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/9d3fffebe25b9b019a814d801eb9d1382e69c568"}}}], "date": "2013-01-10T23:17:43+00:00", "message": "Added the dragdroptab widget for Qt into the newly created widgets module", "type": "commit"}, {"rendered": {"message": {"raw": "Fixed a bug where you could not set wait=False when using @inmain_decorator because it threw an error about incorrect number of function arguments.", "markup": "markdown", "html": "<p>Fixed a bug where you could not set wait=False when using @inmain_decorator because it threw an error about incorrect number of function arguments.</p>", "type": "rendered"}}, "hash": "9d3fffebe25b9b019a814d801eb9d1382e69c568", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev.json"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/9d3fffebe25b9b019a814d801eb9d1382e69c568.json"}, "comments": {"href": "data/repositories/pstarkey/qtutils-dev/commit/9d3fffebe25b9b019a814d801eb9d1382e69c568/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/patch/9d3fffebe25b9b019a814d801eb9d1382e69c568"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/9d3fffebe25b9b019a814d801eb9d1382e69c568"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/diff/9d3fffebe25b9b019a814d801eb9d1382e69c568"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/9d3fffebe25b9b019a814d801eb9d1382e69c568/approve"}, "statuses": {"href": "data/repositories/pstarkey/qtutils-dev/commit/9d3fffebe25b9b019a814d801eb9d1382e69c568/statuses_page=1.json"}}, "author": {"raw": "Phil@pinetab.staff.monash.edu.au", "type": "author", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, "summary": {"raw": "Fixed a bug where you could not set wait=False when using @inmain_decorator because it threw an error about incorrect number of function arguments.", "markup": "markdown", "html": "<p>Fixed a bug where you could not set wait=False when using @inmain_decorator because it threw an error about incorrect number of function arguments.</p>", "type": "rendered"}, "parents": [{"hash": "b40f243071d95d70a16c46d40e97c5ec6f9ca0db", "type": "commit", "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/b40f243071d95d70a16c46d40e97c5ec6f9ca0db.json"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/b40f243071d95d70a16c46d40e97c5ec6f9ca0db"}}}], "date": "2013-01-10T23:17:10+00:00", "message": "Fixed a bug where you could not set wait=False when using @inmain_decorator because it threw an error about incorrect number of function arguments.", "type": "commit"}, {"rendered": {"message": {"raw": "Added function inthread(fn, *args, **kwargs) for easily launching a function in a daemon thread.", "markup": "markdown", "html": "<p>Added function inthread(fn, <em>args, </em>*kwargs) for easily launching a function in a daemon thread.</p>", "type": "rendered"}}, "hash": "b40f243071d95d70a16c46d40e97c5ec6f9ca0db", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev.json"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/b40f243071d95d70a16c46d40e97c5ec6f9ca0db.json"}, "comments": {"href": "data/repositories/pstarkey/qtutils-dev/commit/b40f243071d95d70a16c46d40e97c5ec6f9ca0db/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/patch/b40f243071d95d70a16c46d40e97c5ec6f9ca0db"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/b40f243071d95d70a16c46d40e97c5ec6f9ca0db"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/diff/b40f243071d95d70a16c46d40e97c5ec6f9ca0db"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/b40f243071d95d70a16c46d40e97c5ec6f9ca0db/approve"}, "statuses": {"href": "data/repositories/pstarkey/qtutils-dev/commit/b40f243071d95d70a16c46d40e97c5ec6f9ca0db/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Added function inthread(fn, *args, **kwargs) for easily launching a function in a daemon thread.", "markup": "markdown", "html": "<p>Added function inthread(fn, <em>args, </em>*kwargs) for easily launching a function in a daemon thread.</p>", "type": "rendered"}, "parents": [{"hash": "73a9ddb98e4b54e3a6956af34c62cfcb837afade", "type": "commit", "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade.json"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/73a9ddb98e4b54e3a6956af34c62cfcb837afade"}}}], "date": "2012-10-15T12:18:49+00:00", "message": "Added function inthread(fn, *args, **kwargs) for easily launching a function in a daemon thread.", "type": "commit"}, {"rendered": {"message": {"raw": "Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.\ninmain(fn,*args,**kwargs): runs a function in the mainloop, waiting on it and returning its result.\ninmain_later(fn,*args,**kwargs): ask for a function to be run in the mainloop, not waiting on it.\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).\n\nQt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.", "markup": "markdown", "html": "<p>Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:<br />\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.<br />\ninmain(fn,*args,<strong>kwargs): runs a function in the mainloop, waiting on it and returning its result.<br />\ninmain_later(fn,*args,</strong>kwargs): ask for a function to be run in the mainloop, not waiting on it.<br />\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).</p>\n<p>Qt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.</p>", "type": "rendered"}}, "hash": "73a9ddb98e4b54e3a6956af34c62cfcb837afade", "repository": {"links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev.json"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "links": {"self": {"href": "data/repositories/pstarkey/qtutils-dev/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade.json"}, "comments": {"href": "data/repositories/pstarkey/qtutils-dev/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/patch/73a9ddb98e4b54e3a6956af34c62cfcb837afade"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/73a9ddb98e4b54e3a6956af34c62cfcb837afade"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/diff/73a9ddb98e4b54e3a6956af34c62cfcb837afade"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade/approve"}, "statuses": {"href": "data/repositories/pstarkey/qtutils-dev/commit/73a9ddb98e4b54e3a6956af34c62cfcb837afade/statuses_page=1.json"}}, "author": {"raw": "cbilling", "type": "author", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "summary": {"raw": "Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.\ninmain(fn,*args,**kwargs): runs a function in the mainloop, waiting on it and returning its result.\ninmain_later(fn,*args,**kwargs): ask for a function to be run in the mainloop, not waiting on it.\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).\n\nQt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.", "markup": "markdown", "html": "<p>Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:<br />\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.<br />\ninmain(fn,*args,<strong>kwargs): runs a function in the mainloop, waiting on it and returning its result.<br />\ninmain_later(fn,*args,</strong>kwargs): ask for a function to be run in the mainloop, not waiting on it.<br />\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).</p>\n<p>Qt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.</p>", "type": "rendered"}, "parents": [], "date": "2012-10-14T12:16:22+00:00", "message": "Added qtutils; a bunch of utilities for facilitating multithreaded programming in qt. They are:\nqtlock: a context manager which ensures the mainloop is blocked whilst it is held.\ninmain(fn,*args,**kwargs): runs a function in the mainloop, waiting on it and returning its result.\ninmain_later(fn,*args,**kwargs): ask for a function to be run in the mainloop, not waiting on it.\ninmain_decorator(wait=True): a decorator which causes decorated functions to be executed in the mainloop (and either waited on on to return or not).\n\nQt and Python are very hackable, and thanks to this the above utilities have functionality built in to protect from their misuse. Any deadlocks arising from their misuse ought to be raised as an exception, and any Qt method calls that aren't done in a threadsafe way ought to raise an exception too. Further, Qt normally spouts (contextless, impossible to see the origin of) warnings when threads are used incorrectly, these have been promoted to exceptions with full tracebacks.", "type": "commit"}], "previous": "data/repositories/pstarkey/qtutils-dev/commits/1.6.0_page=1.json"}