{"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41775691.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41775691"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Onto the matter of trying to maintain semi-continuous integration of new code in the face of this backward incompatible change.\n\nThings are a bit tricky: since this is a backward incompatible change, we can't update the other programs one-by-one whilst having them actually be usable together.\n\nI see two options for dealing with this.\n\nThe first option is to have tested forks of all the GUI programs on standby, and to merge them, as well as this change, all on the same day, releasing qtutils 2.0.0 on PyPI at the same time.\n\nThe second option is to have this module have a different name after this release, say, `qtutils2`. That way, we can release it on PyPI and it can be installed simultaneously with the existing `qtutils`.\n\nThe only problem with the second option is that `labscript_utils.qtwidgets` is used by multiple programs, and so it would be tricky to ensure it kept working through the transition.\n\nSo I think we should go with option 1. What do you think @philipstarkey ?\n\nIf we go for option 1, then @PhyNerd should change the version in `setup.py` in this pull request to `'2.0.0'`, and change the qtutils version checks in other programs in their Qt5 forks to require `'2.0.0'`. Also in a version check should be added `labscript_utils/qtwidgets/__init__.py` requiring qtutils 2.0.0, as there isn't a check there at all presently.\n\nThen @PhyNerd should make pull requests for all the other repositories. Testers can then install qtutils 2.0.0 from source (I can provide prebuilt icon resource files so you can skip the building step), pull from the branches named in the pull requests of each repository, and then test that things work. By \"work\", I mean we should test that there aren't any regressions when running with PyQt4. Whether things actually work on Qt5 or not I am happy to defer for later pull requests. Just making sure programs are compatible with qtutils 2.0 whilst still running with PyQt4 is what I would like to go for.\n\nThe changes are pretty formulaic or minor, so once the pull requests are there, we can read over them in the pull request threads, and testing should not be so bad. If other pull requests are pending and not yet tested, we can merge the qtutils 2.0 compatibility ones first - other pull requests can adapt to them if necessary rather than the other way around. Though so far from what I can see all the pending pull requests are not in conflict. Nonetheless the qtutils 2.0 compatibility ones should take priority.\n\nThe other pull requests are building up, and so I've been working on test suites to help with testing the Qt applications. So we may have some degree of automated testing soon which may help.", "markup": "markdown", "html": "<p>Onto the matter of trying to maintain semi-continuous integration of new code in the face of this backward incompatible change.</p>\n<p>Things are a bit tricky: since this is a backward incompatible change, we can't update the other programs one-by-one whilst having them actually be usable together.</p>\n<p>I see two options for dealing with this.</p>\n<p>The first option is to have tested forks of all the GUI programs on standby, and to merge them, as well as this change, all on the same day, releasing qtutils 2.0.0 on PyPI at the same time.</p>\n<p>The second option is to have this module have a different name after this release, say, <code>qtutils2</code>. That way, we can release it on PyPI and it can be installed simultaneously with the existing <code>qtutils</code>.</p>\n<p>The only problem with the second option is that <code>labscript_utils.qtwidgets</code> is used by multiple programs, and so it would be tricky to ensure it kept working through the transition.</p>\n<p>So I think we should go with option 1. What do you think @philipstarkey ?</p>\n<p>If we go for option 1, then @PhyNerd should change the version in <code>setup.py</code> in this pull request to <code>'2.0.0'</code>, and change the qtutils version checks in other programs in their Qt5 forks to require <code>'2.0.0'</code>. Also in a version check should be added <code>labscript_utils/qtwidgets/__init__.py</code> requiring qtutils 2.0.0, as there isn't a check there at all presently.</p>\n<p>Then @PhyNerd should make pull requests for all the other repositories. Testers can then install qtutils 2.0.0 from source (I can provide prebuilt icon resource files so you can skip the building step), pull from the branches named in the pull requests of each repository, and then test that things work. By \"work\", I mean we should test that there aren't any regressions when running with PyQt4. Whether things actually work on Qt5 or not I am happy to defer for later pull requests. Just making sure programs are compatible with qtutils 2.0 whilst still running with PyQt4 is what I would like to go for.</p>\n<p>The changes are pretty formulaic or minor, so once the pull requests are there, we can read over them in the pull request threads, and testing should not be so bad. If other pull requests are pending and not yet tested, we can merge the qtutils 2.0 compatibility ones first - other pull requests can adapt to them if necessary rather than the other way around. Though so far from what I can see all the pending pull requests are not in conflict. Nonetheless the qtutils 2.0 compatibility ones should take priority.</p>\n<p>The other pull requests are building up, and so I've been working on test suites to help with testing the Qt applications. So we may have some degree of automated testing soon which may help.</p>", "type": "rendered"}, "created_on": "2017-07-30T23:08:57.022459+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-30T23:08:57.050883+00:00", "type": "pullrequest_comment", "id": 41775691}