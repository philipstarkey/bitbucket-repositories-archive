{"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41301738.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41301738"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "About Python 3 changes, a few things:\n\nFirstly, I'd vote to hold off Python 3 compatibility for a separate pull request so that we can review and test this one without more changes coming in. I know it slows things down a bit, but is more friendly to regression testing and ensures we can have fewer things in mind when we're reading over the changes.\n\nSecondly, once you are making Python 3 compatibility changes, I see you're changing strings a bit. To ensure things with strings really are the same on Python 2 and Python 3, what you'll want to do is `from __future__ import unicode_literals`, and then any strings that are definitely supposed to be bytestrings, prefix like `b'string'`.\n\nFor example, in your most recent commit, you got some strings (the `'stdout'` and `'stderr'` ones) and added `.encode('utf8')` to them. This does different things in Python 2 vs Python 3 (in Python 2 the strings start out being bytestrings and remain bytestrings, whereas in Python 3 they start out being unicode strings and become bytestrings), and although it gives the same result, it's less error-prone to make sure that actually the exact same thing is happening in both Python versions.\n\nSo the solution to this is to do the `unicode_literals` import and then prefix `b''` to make those bytestrings - then they don't need encoding at all. In both Python versions they are bytestrings.\n\nBut actually, I'd prefer to back out that change for now so that this pull request could remain about PyQt5.\n\nI would also prefer not to change the encoding of files from ascii until we drop Python 2 support, so with the german umlaut test sentence, if you could change it back to `'Der schnelle braune Fuchs ist \\xc3\\xbcber den faulen Hund gesprungen\\n'.decode('utf8')` but prefix a `b` to tell Python 3 it's a bytestring:\n\n`b'Der schnelle braune Fuchs ist \\xc3\\xbcber den faulen Hund gesprungen\\n'.decode('utf8')`\n\nthen you can get rid of the `utf8` encoding marker on the file.\n\nThe `b''` prefix is valid syntax on both Python 2 and Python 3 (in Python 2 it simply does nothing), so it can be used everywhere that you want to make the strings stay like they were in Python 2.", "markup": "markdown", "html": "<p>About Python 3 changes, a few things:</p>\n<p>Firstly, I'd vote to hold off Python 3 compatibility for a separate pull request so that we can review and test this one without more changes coming in. I know it slows things down a bit, but is more friendly to regression testing and ensures we can have fewer things in mind when we're reading over the changes.</p>\n<p>Secondly, once you are making Python 3 compatibility changes, I see you're changing strings a bit. To ensure things with strings really are the same on Python 2 and Python 3, what you'll want to do is <code>from __future__ import unicode_literals</code>, and then any strings that are definitely supposed to be bytestrings, prefix like <code>b'string'</code>.</p>\n<p>For example, in your most recent commit, you got some strings (the <code>'stdout'</code> and <code>'stderr'</code> ones) and added <code>.encode('utf8')</code> to them. This does different things in Python 2 vs Python 3 (in Python 2 the strings start out being bytestrings and remain bytestrings, whereas in Python 3 they start out being unicode strings and become bytestrings), and although it gives the same result, it's less error-prone to make sure that actually the exact same thing is happening in both Python versions.</p>\n<p>So the solution to this is to do the <code>unicode_literals</code> import and then prefix <code>b''</code> to make those bytestrings - then they don't need encoding at all. In both Python versions they are bytestrings.</p>\n<p>But actually, I'd prefer to back out that change for now so that this pull request could remain about PyQt5.</p>\n<p>I would also prefer not to change the encoding of files from ascii until we drop Python 2 support, so with the german umlaut test sentence, if you could change it back to <code>'Der schnelle braune Fuchs ist \\xc3\\xbcber den faulen Hund gesprungen\\n'.decode('utf8')</code> but prefix a <code>b</code> to tell Python 3 it's a bytestring:</p>\n<p><code>b'Der schnelle braune Fuchs ist \\xc3\\xbcber den faulen Hund gesprungen\\n'.decode('utf8')</code></p>\n<p>then you can get rid of the <code>utf8</code> encoding marker on the file.</p>\n<p>The <code>b''</code> prefix is valid syntax on both Python 2 and Python 3 (in Python 2 it simply does nothing), so it can be used everywhere that you want to make the strings stay like they were in Python 2.</p>", "type": "rendered"}, "created_on": "2017-07-23T16:19:02.147987+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-23T16:19:02.155671+00:00", "type": "pullrequest_comment", "id": 41301738}