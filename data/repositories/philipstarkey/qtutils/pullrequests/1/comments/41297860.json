{"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41297860.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41297860"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "OK, so here is a diff so far with whitespace ignored for easier review (`hg diff -wB -r 113 -r 136`). I'll update this comment after any future commits to this pull request.\n\nBecause this diff ignores whitespace changes, I can see at least one line in the diff that looks like it has incorrect indentation - but the actual file is fine and has the correct indentation, just FYI.\n\n```\n#!diff\n\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/UiLoader.py\n--- a/qtutils/UiLoader.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/UiLoader.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -14,6 +14,8 @@\n \n from __future__ import print_function\n import sys\n+import qtutils.qt\n+\n \n class UiLoaderPromotionException(Exception):\n     pass\n@@ -21,7 +23,8 @@\n class UiLoaderUnknownWidgetException(Exception):\n     pass\n     \n-if 'PySide' in sys.modules.copy():\n+\n+if qtutils.qt.QT_ENV == qtutils.qt.PYSIDE:\n     from PySide.QtUiTools import QUiLoader\n      \n     class UiLoader(QUiLoader):\n@@ -91,7 +94,10 @@\n         \n else:\n     from types import ModuleType\n+    if qtutils.qt.QT_ENV == qtutils.qt.PYQT4:\n     from PyQt4 import uic\n+    elif qtutils.qt.QT_ENV == qtutils.qt.PYQT5:\n+        from PyQt5 import uic\n     \n     class UiLoader(object):\n         def __init__(self):\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/__init__.py\n--- a/qtutils/__init__.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/__init__.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -20,22 +20,9 @@\n     # Version file has not been autogenerated from build process:\n     __version__ = None\n \n-import sys\n-if 'PySide' in sys.modules.copy():   \n-    from PySide.QtCore import qInstallMsgHandler \n-else:\n-    from PyQt4.QtCore import qInstallMsgHandler \n+from qtutils.qt.QtCore import qInstallMessageHandler\n+from qtutils.locking import qtlock\n \n-def _message_handler(type, message):\n-    \"\"\"Handle qt warnings etc with an exception, so they don't pass\n-    unnoticed\"\"\"\n-    print('%s: %s'%(type,message))\n-    #raise Exception('%s: %s'%(type,message))\n-\n-qInstallMsgHandler(_message_handler)\n-del qInstallMsgHandler\n-\n-from qtutils.locking import qtlock\n qtlock.enforce()\n \n from qtutils.invoke_in_main import inmain, inmain_later, inthread, inmain_decorator\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/auto_scroll_to_end.py\n--- a/qtutils/auto_scroll_to_end.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/auto_scroll_to_end.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -1,14 +1,10 @@\n from __future__ import print_function\n import sys\n-import threading\n import weakref\n \n-if 'PySide' in sys.modules:\n-    from PySide.QtCore import *\n-    from PySide.QtGui import *\n-else:\n-    from PyQt4.QtCore import *\n-    from PyQt4.QtGui import *\n+from qtutils.qt.QtCore import *\n+from qtutils.qt.QtGui import *\n+from qtutils.qt.QtWidgets import *\n \n # These are weakref dictionarys so that we do not hold references\n # to the scrollbars after nobody else does:\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/disconnect_contextmanager.py\n--- a/qtutils/disconnect_contextmanager.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/disconnect_contextmanager.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -14,11 +14,6 @@\n \n from __future__ import print_function\n \n-import sys\n-if 'PySide' in sys.modules:\n-    from PySide.QtCore import *\n-else:\n-    from PyQt4.QtCore import *\n     \n class DisconnectContextManager(object):\n     def __init__(self, signal, slot):\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/icons/__init__.py\n--- a/qtutils/icons/__init__.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/icons/__init__.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -1,5 +1,7 @@\n-import sys\n-if 'Pyside' in sys.modules:\n+import qtutils.qt\n+if qtutils.qt.QT_ENV == qtutils.qt.PYSIDE:\n     import qtutils.icons._icons_pyside\n-else:\n+elif qtutils.qt.QT_ENV == qtutils.qt.PYQT4:\n     import qtutils.icons._icons_pyqt4\n+elif qtutils.qt.QT_ENV == qtutils.qt.PYQT5:\n+    import qtutils.icons._icons_pyqt5\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/icons/_build.py\n--- a/qtutils/icons/_build.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/icons/_build.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -3,6 +3,7 @@\n \n this_folder = os.path.dirname(os.path.realpath(__file__))\n qrc_filename = os.path.join(this_folder, 'icons.qrc')\n+py_filename_pyqt5 = os.path.join(this_folder, '_icons_pyqt5.py')\n py_filename_pyqt4 = os.path.join(this_folder, '_icons_pyqt4.py')\n py_filename_pyside = os.path.join(this_folder, '_icons_pyside.py')\n icon_folders = ['custom', 'fugue']\n@@ -19,6 +20,36 @@\n                 outfile.write(line_format_string%relative_path)      \n         outfile.write(footer)\n         \n+\n+def find_pyrcc5():\n+    import PyQt5\n+    # If we're on Windows, it's probably in the pyqt4 directory:\n+    if os.name == 'nt':\n+        pyqt5_dir = os.path.abspath(os.path.dirname(PyQt5.__file__))\n+        pyrcc5 = os.path.join(pyqt5_dir, 'pyrcc5.exe')\n+        if os.path.exists(pyrcc5):\n+            return pyrcc5\n+    # Otherwise, or if it was not found there, check if it's in the PATH:\n+    pyrcc5 = 'pyrcc5'\n+    try:\n+        subprocess.call([pyrcc5], stdout=open(os.devnull), stderr=open(os.devnull))\n+        return pyrcc5\n+    except OSError:\n+        # Still no?\n+        msg = \"\"\"\n+                Cannot find pyrcc5, the PyQt5 utility for building resource\n+                files. This module was configured to find it in the PyQt5\n+                directory on Windows, which is where it is for the Anaconda\n+                Python distribution. This module should also find pyrcc5 if it\n+                in in the PATH, on any OS. Please find pyrcc5 and put it in your\n+                PATH. On Debian based systems it is available in the pyqt5-dev-\n+                tools package. If you want to install qtutils without PyQt5\n+                support, simply run:\n+                python setup.py install NO_PYQT5\"\"\"\n+        import textwrap\n+        raise OSError(textwrap.dedent(msg).strip())\n+\n+\n def find_pyrcc4():\n     import PyQt4\n     # If we're on Windows, it's probably in the pyqt4 directory:\n@@ -75,6 +106,15 @@\n         import textwrap\n         raise OSError(textwrap.dedent(msg).strip())\n         \n+\n+def make_py_file_pyqt5():\n+    pyrcc5 = find_pyrcc5()\n+    child = subprocess.Popen([pyrcc5, '-o', py_filename_pyqt5, qrc_filename])\n+    stdoutdata, stderrdata = child.communicate()\n+    if child.returncode != 0:\n+        raise OSError(stderrdata)\n+\n+\n def make_py_file_pyqt4():\n     pyrcc4 = find_pyrcc4()\n     child = subprocess.Popen([pyrcc4, '-py3', '-o', py_filename_pyqt4, qrc_filename])\n@@ -89,6 +129,12 @@\n     if child.returncode != 0:\n         raise OSError(stderrdata)\n         \n+\n+def pyqt5():\n+    if not os.path.exists(py_filename_pyqt5):\n+        make_py_file_pyqt5()\n+\n+\n def pyqt4():\n     if not os.path.exists(py_filename_pyqt4):    \n         make_py_file_pyqt4()\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/invoke_in_main.py\n--- a/qtutils/invoke_in_main.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/invoke_in_main.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -24,10 +24,7 @@\n import threading\n import functools\n \n-if 'PySide' in sys.modules.copy():\n-    from PySide.QtCore import *\n-else:\n-    from PyQt4.QtCore import *\n+from qtutils.qt.QtCore import *\n \n \n class CallEvent(QEvent):\n@@ -122,7 +119,7 @@\n     \n     def loop(index):\n         if index < 3:\n-            thread = inthread(loop, index+1)\n+            inthread(loop, index + 1)\n         while True:\n             # print('MyThread-%d: %s'%(index,str(QThread.currentThread())))\n             # print('MyThread-%d: %s'%(index,threading.current_thread().name))\n@@ -147,7 +144,6 @@\n     signal.signal(signal.SIGINT, sigint_handler)\n \n     thread = inthread(loop, 1)\n-    x = lambda: inmain(myFunction2)\n-    timer = QTimer.singleShot(0,x)\n+    timer = QTimer.singleShot(0, lambda: inmain(myFunction2))\n     qapplication.exec_()\n \ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/locking.py\n--- a/qtutils/locking.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/locking.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -14,12 +14,9 @@\n \n from __future__ import print_function\n import threading\n-import sys\n \n-if 'PySide' in sys.modules.copy():\n-    from PySide.QtCore import *\n-else:\n-    from PyQt4.QtCore import *\n+from qtutils.qt.QtCore import *\n+\n \n class BlockEvent(QEvent):\n     \"\"\"An event requesting the mainloop to be blocked until further notice.\"\"\"\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/outputbox.py\n--- a/qtutils/outputbox.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/outputbox.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -14,14 +14,10 @@\n \n from __future__ import print_function\n import threading\n-import sys\n \n-if 'PySide' in sys.modules:\n-    from PySide.QtCore import *\n-    from PySide.QtGui import *\n-else:\n-    from PyQt4.QtCore import *\n-    from PyQt4.QtGui import *\n+from qtutils.qt.QtCore import *\n+from qtutils.qt.QtGui import *\n+from qtutils.qt.QtWidgets import *\n \n import zmq\n from qtutils.auto_scroll_to_end import set_auto_scroll_to_end\n@@ -186,7 +182,7 @@\n         output_box.output('More red.\\n', True)\n         output_box.output('The \\\"quick white fox\\\" jumped over the \\'lazy\\' dog\\n')\n         output_box.output('<The quick red fox jumped over the lazy dog>\\n', True)\n-        output_box.output('Der schnelle braune Fuchs hat \\xc3\\xbcber den faulen Hund gesprungen\\n'.decode('utf8'), True)\n+        output_box.output('Der schnelle braune Fuchs ist \\xc3\\xbcber den faulen Hund gesprungen\\n'.decode('utf8'), True)\n \n     def button_pushed(*args, **kwargs):\n         import random\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/qsettings_wrapper.py\n--- a/qtutils/qsettings_wrapper.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/qsettings_wrapper.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -13,13 +13,8 @@\n #####################################################################\n \n from __future__ import print_function\n-import sys\n-if 'PySide' in sys.modules:\n-    from PySide.QtCore import QSettings\n-    QVariant = None\n-else:\n-    from PyQt4.QtCore import QSettings\n-    from PyQt4.QtCore import QVariant\n+\n+from qtutils.qt.QtCore import QSettings\n \n import ast\n \n@@ -52,8 +47,6 @@\n     @inmain_decorator()\n     def _get(self, name):\n         valrepr = self._qsettings.value(name)\n-        if QVariant is not None and isinstance(valrepr, QVariant):\n-            valrepr = str(valrepr.toString())\n         return ast.literal_eval(valrepr)\n         \n     @inmain_decorator()\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/qt.py\n--- /dev/null\tThu Jan 01 00:00:00 1970 +0000\n+++ b/qtutils/qt.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -0,0 +1,114 @@\n+#####################################################################\n+#                                                                   #\n+# qt.py                                                             #\n+#                                                                   #\n+# Copyright 2017, Jan Werkmann                                      #\n+#                                                                   #\n+# This file is part of the qtutils project                          #\n+# (see #!/philipstarkey/qtutils )                #\n+# and is licensed under the 2-clause, or 3-clause, BSD License.     #\n+# See the license.txt file in the root of the project               #\n+# for the full license.                                             #\n+#                                                                   #\n+# The purpose of this wrapper is to provide a abstraction layer     #\n+# around the different versions of QtGui, QtCore and QtWidgets.     #\n+# The warpper is supposed to act like PyQt5, but might need         #\n+# addition in some cases.                                           #\n+#####################################################################\n+import sys\n+\n+PYSIDE = 'PySide'\n+PYQT4 = 'PyQt4'\n+PYQT5 = 'PyQt5'\n+QT_ENV = None\n+\n+\n+def set_pyqt4_api():\n+    import sip\n+    # This must be done before importing PyQt4:\n+    API_NAMES = [\"QDate\", \"QDateTime\", \"QString\", \"QTextStream\", \"QTime\", \"QUrl\", \"QVariant\"]\n+    API_VERSION = 2\n+    for name in API_NAMES:\n+        try:\n+            sip.setapi(name, API_VERSION)\n+        except ValueError:\n+            pass\n+\n+\n+def check_pyqt4_api():\n+    \"\"\"If PyQt4 was already imported before we got a chance to set API version\n+    2, ensure the API versions are either not set, or set to version 2.\n+    Otherwise confusing errors may occur later - better to catch this now\"\"\"\n+    import sip\n+    API_NAMES = [\"QDate\", \"QDateTime\", \"QString\", \"QTextStream\", \"QTime\", \"QUrl\", \"QVariant\"]\n+    API_VERSION = 2\n+    for name in API_NAMES:\n+        try:\n+            if sip.getapi(name) != API_VERSION:\n+                msg = (\"qtutils is only compatible with version 2 of the  PyQt4 API.\" +\n+                       \"Whilst you can import PyQt4 prior to importing qtutils (in order to tell qtutils \" +\n+                       \"to use PyQt4), either set the API version to 2 yourself, or import qtutils \" +\n+                       \"(which will set it for you) prior to importing QtGui or QtCore.\")\n+                raise RuntimeError(msg)\n+        except ValueError:\n+            # API version not set yet.\n+            pass\n+\n+\n+libs = [PYQT5, PYQT4, PYSIDE]\n+for lib in libs:\n+    if lib in sys.modules:\n+        QT_ENV = lib\n+        if lib == PYQT4:\n+            check_pyqt4_api()\n+            set_pyqt4_api()\n+        break\n+else:\n+    for lib in libs:\n+        if lib == PYQT4:\n+            # Have to set pyqt API v2 before importing PyQt4:\n+            set_pyqt4_api()\n+        try:\n+            __import__(lib)\n+            QT_ENV = lib\n+            break\n+        except ImportError:\n+            pass\n+\n+if QT_ENV is None:\n+    raise Exception(\"No Qt Enviroment was detected!\")\n+\n+if QT_ENV == PYQT5:\n+    from PyQt5 import QtGui, QtCore, QtWidgets\n+else:\n+    if QT_ENV == PYQT4:\n+        from PyQt4 import QtGui, QtCore\n+\n+    elif QT_ENV == PYSIDE:\n+        from PySide import QtGui, QtCore\n+        import PySide\n+        QtCore.QT_VERSION_STR = PySide.QtCore.__version__\n+        QtCore.PYQT_VERSION_STR = PySide.__version__\n+\n+    # Allow the methods that have been renamed in Qt5 to be accessed by their\n+    # Qt5 names:\n+    QtGui.QHeaderView.setSectionsMovable = QtGui.QHeaderView.setMovable\n+    QtGui.QHeaderView.setSectionsClickable = QtGui.QHeaderView.setClickable\n+    QtGui.QHeaderView.setSectionResizeMode = QtGui.QHeaderView.setResizeMode\n+\n+    if QT_ENV == PYQT4:\n+        # Pyside does not have the methods ending in \"-AndFilter\":\n+        QtGui.QFileDialog.getOpenFileName = QtGui.QFileDialog.getOpenFileNameAndFilter\n+        QtGui.QFileDialog.getOpenFileNames = QtGui.QFileDialog.getOpenFileNamesAndFilter\n+        QtGui.QFileDialog.getSaveFileName = QtGui.QFileDialog.getSaveFileNameAndFilter\n+\n+    QtWidgets = QtGui\n+    QtCore.QSortFilterProxyModel = QtGui.QSortFilterProxyModel\n+    QtWidgets.QStyleOptionProgressBar = QtGui.QStyleOptionProgressBarV2\n+    QtWidgets.QStyleOptionTab = QtGui.QStyleOptionTabV3\n+    QtWidgets.QStyleOptionViewItem = QtGui.QStyleOptionViewItemV4\n+    QtCore.qInstallMessageHandler = QtCore.qInstallMsgHandler\n+\n+sys.modules['qtutils.qt.QtGui'] = QtGui\n+sys.modules['qtutils.qt.QtWidgets'] = QtWidgets\n+sys.modules['qtutils.qt.QtCore'] = QtCore\ndiff -r 478e547522b4 -r a43b82aebe8d setup.py\n--- a/setup.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/setup.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -13,6 +13,7 @@\n import sys\n import os\n \n+BUILD_PYQT5_ICONS_RESOURCE = True\n BUILD_PYQT4_ICONS_RESOURCE = True\n BUILD_PYSIDE_ICONS_RESOURCE = True\n \n@@ -22,8 +23,11 @@\n if 'NO_PYQT4' in sys.argv:\n     BUILD_PYQT4_ICONS_RESOURCE = False\n     sys.argv.remove('NO_PYQT4')\n+if 'NO_PYQT5' in sys.argv:\n+    BUILD_PYQT5_ICONS_RESOURCE = False\n+    sys.argv.remove('NO_PYQT5')\n \n-VERSION = '1.6.1'\n+VERSION = '2.0.0'\n \n # Do the build process for icon resource files, this will only do anything\n # if the files are not already present.  The idea is that someone like me\n@@ -37,6 +41,8 @@\n print('building qt icon resource files ...')\n sys.path.insert(0,'qtutils/icons')\n import _build\n+if BUILD_PYQT5_ICONS_RESOURCE:\n+    _build.pyqt5()\n if BUILD_PYQT4_ICONS_RESOURCE:\n     _build.pyqt4()\n if BUILD_PYSIDE_ICONS_RESOURCE:\n\n```\n", "markup": "markdown", "html": "<p>OK, so here is a diff so far with whitespace ignored for easier review (<code>hg diff -wB -r 113 -r 136</code>). I'll update this comment after any future commits to this pull request.</p>\n<p>Because this diff ignores whitespace changes, I can see at least one line in the diff that looks like it has incorrect indentation - but the actual file is fine and has the correct indentation, just FYI.</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/UiLoader.py</span>\n<span class=\"gd\">--- a/qtutils/UiLoader.py   Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/UiLoader.py   Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -14,6 +14,8 @@</span>\n\n from __future__ import print_function\n import sys\n<span class=\"gi\">+import qtutils.qt</span>\n<span class=\"gi\">+</span>\n\n class UiLoaderPromotionException(Exception):\n     pass\n<span class=\"gu\">@@ -21,7 +23,8 @@</span>\n class UiLoaderUnknownWidgetException(Exception):\n     pass\n\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules.copy():</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+if qtutils.qt.QT_ENV == qtutils.qt.PYSIDE:</span>\n     from PySide.QtUiTools import QUiLoader\n\n     class UiLoader(QUiLoader):\n<span class=\"gu\">@@ -91,7 +94,10 @@</span>\n\n else:\n     from types import ModuleType\n<span class=\"gi\">+    if qtutils.qt.QT_ENV == qtutils.qt.PYQT4:</span>\n     from PyQt4 import uic\n<span class=\"gi\">+    elif qtutils.qt.QT_ENV == qtutils.qt.PYQT5:</span>\n<span class=\"gi\">+        from PyQt5 import uic</span>\n\n     class UiLoader(object):\n         def __init__(self):\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/__init__.py</span>\n<span class=\"gd\">--- a/qtutils/__init__.py   Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/__init__.py   Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -20,22 +20,9 @@</span>\n     # Version file has not been autogenerated from build process:\n     __version__ = None\n\n<span class=\"gd\">-import sys</span>\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules.copy():   </span>\n<span class=\"gd\">-    from PySide.QtCore import qInstallMsgHandler </span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import qInstallMsgHandler </span>\n<span class=\"gi\">+from qtutils.qt.QtCore import qInstallMessageHandler</span>\n<span class=\"gi\">+from qtutils.locking import qtlock</span>\n\n<span class=\"gd\">-def _message_handler(type, message):</span>\n<span class=\"gd\">-    &quot;&quot;&quot;Handle qt warnings etc with an exception, so they don&#39;t pass</span>\n<span class=\"gd\">-    unnoticed&quot;&quot;&quot;</span>\n<span class=\"gd\">-    print(&#39;%s: %s&#39;%(type,message))</span>\n<span class=\"gd\">-    #raise Exception(&#39;%s: %s&#39;%(type,message))</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-qInstallMsgHandler(_message_handler)</span>\n<span class=\"gd\">-del qInstallMsgHandler</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-from qtutils.locking import qtlock</span>\n qtlock.enforce()\n\n from qtutils.invoke_in_main import inmain, inmain_later, inthread, inmain_decorator\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/auto_scroll_to_end.py</span>\n<span class=\"gd\">--- a/qtutils/auto_scroll_to_end.py Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/auto_scroll_to_end.py Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -1,14 +1,10 @@</span>\n from __future__ import print_function\n import sys\n<span class=\"gd\">-import threading</span>\n import weakref\n\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules:</span>\n<span class=\"gd\">-    from PySide.QtCore import *</span>\n<span class=\"gd\">-    from PySide.QtGui import *</span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import *</span>\n<span class=\"gd\">-    from PyQt4.QtGui import *</span>\n<span class=\"gi\">+from qtutils.qt.QtCore import *</span>\n<span class=\"gi\">+from qtutils.qt.QtGui import *</span>\n<span class=\"gi\">+from qtutils.qt.QtWidgets import *</span>\n\n # These are weakref dictionarys so that we do not hold references\n # to the scrollbars after nobody else does:\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/disconnect_contextmanager.py</span>\n<span class=\"gd\">--- a/qtutils/disconnect_contextmanager.py  Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/disconnect_contextmanager.py  Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -14,11 +14,6 @@</span>\n\n from __future__ import print_function\n\n<span class=\"gd\">-import sys</span>\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules:</span>\n<span class=\"gd\">-    from PySide.QtCore import *</span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import *</span>\n\n class DisconnectContextManager(object):\n     def __init__(self, signal, slot):\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/icons/__init__.py</span>\n<span class=\"gd\">--- a/qtutils/icons/__init__.py Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/icons/__init__.py Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -1,5 +1,7 @@</span>\n<span class=\"gd\">-import sys</span>\n<span class=\"gd\">-if &#39;Pyside&#39; in sys.modules:</span>\n<span class=\"gi\">+import qtutils.qt</span>\n<span class=\"gi\">+if qtutils.qt.QT_ENV == qtutils.qt.PYSIDE:</span>\n     import qtutils.icons._icons_pyside\n<span class=\"gd\">-else:</span>\n<span class=\"gi\">+elif qtutils.qt.QT_ENV == qtutils.qt.PYQT4:</span>\n     import qtutils.icons._icons_pyqt4\n<span class=\"gi\">+elif qtutils.qt.QT_ENV == qtutils.qt.PYQT5:</span>\n<span class=\"gi\">+    import qtutils.icons._icons_pyqt5</span>\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/icons/_build.py</span>\n<span class=\"gd\">--- a/qtutils/icons/_build.py   Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/icons/_build.py   Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -3,6 +3,7 @@</span>\n\n this_folder = os.path.dirname(os.path.realpath(__file__))\n qrc_filename = os.path.join(this_folder, &#39;icons.qrc&#39;)\n<span class=\"gi\">+py_filename_pyqt5 = os.path.join(this_folder, &#39;_icons_pyqt5.py&#39;)</span>\n py_filename_pyqt4 = os.path.join(this_folder, &#39;_icons_pyqt4.py&#39;)\n py_filename_pyside = os.path.join(this_folder, &#39;_icons_pyside.py&#39;)\n icon_folders = [&#39;custom&#39;, &#39;fugue&#39;]\n<span class=\"gu\">@@ -19,6 +20,36 @@</span>\n                 outfile.write(line_format_string%relative_path)      \n         outfile.write(footer)\n\n<span class=\"gi\">+</span>\n<span class=\"gi\">+def find_pyrcc5():</span>\n<span class=\"gi\">+    import PyQt5</span>\n<span class=\"gi\">+    # If we&#39;re on Windows, it&#39;s probably in the pyqt4 directory:</span>\n<span class=\"gi\">+    if os.name == &#39;nt&#39;:</span>\n<span class=\"gi\">+        pyqt5_dir = os.path.abspath(os.path.dirname(PyQt5.__file__))</span>\n<span class=\"gi\">+        pyrcc5 = os.path.join(pyqt5_dir, &#39;pyrcc5.exe&#39;)</span>\n<span class=\"gi\">+        if os.path.exists(pyrcc5):</span>\n<span class=\"gi\">+            return pyrcc5</span>\n<span class=\"gi\">+    # Otherwise, or if it was not found there, check if it&#39;s in the PATH:</span>\n<span class=\"gi\">+    pyrcc5 = &#39;pyrcc5&#39;</span>\n<span class=\"gi\">+    try:</span>\n<span class=\"gi\">+        subprocess.call([pyrcc5], stdout=open(os.devnull), stderr=open(os.devnull))</span>\n<span class=\"gi\">+        return pyrcc5</span>\n<span class=\"gi\">+    except OSError:</span>\n<span class=\"gi\">+        # Still no?</span>\n<span class=\"gi\">+        msg = &quot;&quot;&quot;</span>\n<span class=\"gi\">+                Cannot find pyrcc5, the PyQt5 utility for building resource</span>\n<span class=\"gi\">+                files. This module was configured to find it in the PyQt5</span>\n<span class=\"gi\">+                directory on Windows, which is where it is for the Anaconda</span>\n<span class=\"gi\">+                Python distribution. This module should also find pyrcc5 if it</span>\n<span class=\"gi\">+                in in the PATH, on any OS. Please find pyrcc5 and put it in your</span>\n<span class=\"gi\">+                PATH. On Debian based systems it is available in the pyqt5-dev-</span>\n<span class=\"gi\">+                tools package. If you want to install qtutils without PyQt5</span>\n<span class=\"gi\">+                support, simply run:</span>\n<span class=\"gi\">+                python setup.py install NO_PYQT5&quot;&quot;&quot;</span>\n<span class=\"gi\">+        import textwrap</span>\n<span class=\"gi\">+        raise OSError(textwrap.dedent(msg).strip())</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n def find_pyrcc4():\n     import PyQt4\n     # If we&#39;re on Windows, it&#39;s probably in the pyqt4 directory:\n<span class=\"gu\">@@ -75,6 +106,15 @@</span>\n         import textwrap\n         raise OSError(textwrap.dedent(msg).strip())\n\n<span class=\"gi\">+</span>\n<span class=\"gi\">+def make_py_file_pyqt5():</span>\n<span class=\"gi\">+    pyrcc5 = find_pyrcc5()</span>\n<span class=\"gi\">+    child = subprocess.Popen([pyrcc5, &#39;-o&#39;, py_filename_pyqt5, qrc_filename])</span>\n<span class=\"gi\">+    stdoutdata, stderrdata = child.communicate()</span>\n<span class=\"gi\">+    if child.returncode != 0:</span>\n<span class=\"gi\">+        raise OSError(stderrdata)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n def make_py_file_pyqt4():\n     pyrcc4 = find_pyrcc4()\n     child = subprocess.Popen([pyrcc4, &#39;-py3&#39;, &#39;-o&#39;, py_filename_pyqt4, qrc_filename])\n<span class=\"gu\">@@ -89,6 +129,12 @@</span>\n     if child.returncode != 0:\n         raise OSError(stderrdata)\n\n<span class=\"gi\">+</span>\n<span class=\"gi\">+def pyqt5():</span>\n<span class=\"gi\">+    if not os.path.exists(py_filename_pyqt5):</span>\n<span class=\"gi\">+        make_py_file_pyqt5()</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n def pyqt4():\n     if not os.path.exists(py_filename_pyqt4):    \n         make_py_file_pyqt4()\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/invoke_in_main.py</span>\n<span class=\"gd\">--- a/qtutils/invoke_in_main.py Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/invoke_in_main.py Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -24,10 +24,7 @@</span>\n import threading\n import functools\n\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules.copy():</span>\n<span class=\"gd\">-    from PySide.QtCore import *</span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import *</span>\n<span class=\"gi\">+from qtutils.qt.QtCore import *</span>\n\n\n class CallEvent(QEvent):\n<span class=\"gu\">@@ -122,7 +119,7 @@</span>\n\n     def loop(index):\n         if index &lt; 3:\n<span class=\"gd\">-            thread = inthread(loop, index+1)</span>\n<span class=\"gi\">+            inthread(loop, index + 1)</span>\n         while True:\n             # print(&#39;MyThread-%d: %s&#39;%(index,str(QThread.currentThread())))\n             # print(&#39;MyThread-%d: %s&#39;%(index,threading.current_thread().name))\n<span class=\"gu\">@@ -147,7 +144,6 @@</span>\n     signal.signal(signal.SIGINT, sigint_handler)\n\n     thread = inthread(loop, 1)\n<span class=\"gd\">-    x = lambda: inmain(myFunction2)</span>\n<span class=\"gd\">-    timer = QTimer.singleShot(0,x)</span>\n<span class=\"gi\">+    timer = QTimer.singleShot(0, lambda: inmain(myFunction2))</span>\n     qapplication.exec_()\n\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/locking.py</span>\n<span class=\"gd\">--- a/qtutils/locking.py    Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/locking.py    Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -14,12 +14,9 @@</span>\n\n from __future__ import print_function\n import threading\n<span class=\"gd\">-import sys</span>\n\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules.copy():</span>\n<span class=\"gd\">-    from PySide.QtCore import *</span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import *</span>\n<span class=\"gi\">+from qtutils.qt.QtCore import *</span>\n<span class=\"gi\">+</span>\n\n class BlockEvent(QEvent):\n     &quot;&quot;&quot;An event requesting the mainloop to be blocked until further notice.&quot;&quot;&quot;\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/outputbox.py</span>\n<span class=\"gd\">--- a/qtutils/outputbox.py  Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/outputbox.py  Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -14,14 +14,10 @@</span>\n\n from __future__ import print_function\n import threading\n<span class=\"gd\">-import sys</span>\n\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules:</span>\n<span class=\"gd\">-    from PySide.QtCore import *</span>\n<span class=\"gd\">-    from PySide.QtGui import *</span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import *</span>\n<span class=\"gd\">-    from PyQt4.QtGui import *</span>\n<span class=\"gi\">+from qtutils.qt.QtCore import *</span>\n<span class=\"gi\">+from qtutils.qt.QtGui import *</span>\n<span class=\"gi\">+from qtutils.qt.QtWidgets import *</span>\n\n import zmq\n from qtutils.auto_scroll_to_end import set_auto_scroll_to_end\n<span class=\"gu\">@@ -186,7 +182,7 @@</span>\n         output_box.output(&#39;More red.\\n&#39;, True)\n         output_box.output(&#39;The \\&quot;quick white fox\\&quot; jumped over the \\&#39;lazy\\&#39; dog\\n&#39;)\n         output_box.output(&#39;&lt;The quick red fox jumped over the lazy dog&gt;\\n&#39;, True)\n<span class=\"gd\">-        output_box.output(&#39;Der schnelle braune Fuchs hat \\xc3\\xbcber den faulen Hund gesprungen\\n&#39;.decode(&#39;utf8&#39;), True)</span>\n<span class=\"gi\">+        output_box.output(&#39;Der schnelle braune Fuchs ist \\xc3\\xbcber den faulen Hund gesprungen\\n&#39;.decode(&#39;utf8&#39;), True)</span>\n\n     def button_pushed(*args, **kwargs):\n         import random\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/qsettings_wrapper.py</span>\n<span class=\"gd\">--- a/qtutils/qsettings_wrapper.py  Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/qsettings_wrapper.py  Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -13,13 +13,8 @@</span>\n #####################################################################\n\n from __future__ import print_function\n<span class=\"gd\">-import sys</span>\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules:</span>\n<span class=\"gd\">-    from PySide.QtCore import QSettings</span>\n<span class=\"gd\">-    QVariant = None</span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import QSettings</span>\n<span class=\"gd\">-    from PyQt4.QtCore import QVariant</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+from qtutils.qt.QtCore import QSettings</span>\n\n import ast\n\n<span class=\"gu\">@@ -52,8 +47,6 @@</span>\n     @inmain_decorator()\n     def _get(self, name):\n         valrepr = self._qsettings.value(name)\n<span class=\"gd\">-        if QVariant is not None and isinstance(valrepr, QVariant):</span>\n<span class=\"gd\">-            valrepr = str(valrepr.toString())</span>\n         return ast.literal_eval(valrepr)\n\n     @inmain_decorator()\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/qt.py</span>\n<span class=\"gd\">--- /dev/null   Thu Jan 01 00:00:00 1970 +0000</span>\n<span class=\"gi\">+++ b/qtutils/qt.py Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -0,0 +1,114 @@</span>\n<span class=\"gi\">+#####################################################################</span>\n<span class=\"gi\">+#                                                                   #</span>\n<span class=\"gi\">+# qt.py                                                             #</span>\n<span class=\"gi\">+#                                                                   #</span>\n<span class=\"gi\">+# Copyright 2017, Jan Werkmann                                      #</span>\n<span class=\"gi\">+#                                                                   #</span>\n<span class=\"gi\">+# This file is part of the qtutils project                          #</span>\n<span class=\"gi\">+# (see #!/philipstarkey/qtutils )                #</span>\n<span class=\"gi\">+# and is licensed under the 2-clause, or 3-clause, BSD License.     #</span>\n<span class=\"gi\">+# See the license.txt file in the root of the project               #</span>\n<span class=\"gi\">+# for the full license.                                             #</span>\n<span class=\"gi\">+#                                                                   #</span>\n<span class=\"gi\">+# The purpose of this wrapper is to provide a abstraction layer     #</span>\n<span class=\"gi\">+# around the different versions of QtGui, QtCore and QtWidgets.     #</span>\n<span class=\"gi\">+# The warpper is supposed to act like PyQt5, but might need         #</span>\n<span class=\"gi\">+# addition in some cases.                                           #</span>\n<span class=\"gi\">+#####################################################################</span>\n<span class=\"gi\">+import sys</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+PYSIDE = &#39;PySide&#39;</span>\n<span class=\"gi\">+PYQT4 = &#39;PyQt4&#39;</span>\n<span class=\"gi\">+PYQT5 = &#39;PyQt5&#39;</span>\n<span class=\"gi\">+QT_ENV = None</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+def set_pyqt4_api():</span>\n<span class=\"gi\">+    import sip</span>\n<span class=\"gi\">+    # This must be done before importing PyQt4:</span>\n<span class=\"gi\">+    API_NAMES = [&quot;QDate&quot;, &quot;QDateTime&quot;, &quot;QString&quot;, &quot;QTextStream&quot;, &quot;QTime&quot;, &quot;QUrl&quot;, &quot;QVariant&quot;]</span>\n<span class=\"gi\">+    API_VERSION = 2</span>\n<span class=\"gi\">+    for name in API_NAMES:</span>\n<span class=\"gi\">+        try:</span>\n<span class=\"gi\">+            sip.setapi(name, API_VERSION)</span>\n<span class=\"gi\">+        except ValueError:</span>\n<span class=\"gi\">+            pass</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+def check_pyqt4_api():</span>\n<span class=\"gi\">+    &quot;&quot;&quot;If PyQt4 was already imported before we got a chance to set API version</span>\n<span class=\"gi\">+    2, ensure the API versions are either not set, or set to version 2.</span>\n<span class=\"gi\">+    Otherwise confusing errors may occur later - better to catch this now&quot;&quot;&quot;</span>\n<span class=\"gi\">+    import sip</span>\n<span class=\"gi\">+    API_NAMES = [&quot;QDate&quot;, &quot;QDateTime&quot;, &quot;QString&quot;, &quot;QTextStream&quot;, &quot;QTime&quot;, &quot;QUrl&quot;, &quot;QVariant&quot;]</span>\n<span class=\"gi\">+    API_VERSION = 2</span>\n<span class=\"gi\">+    for name in API_NAMES:</span>\n<span class=\"gi\">+        try:</span>\n<span class=\"gi\">+            if sip.getapi(name) != API_VERSION:</span>\n<span class=\"gi\">+                msg = (&quot;qtutils is only compatible with version 2 of the  PyQt4 API.&quot; +</span>\n<span class=\"gi\">+                       &quot;Whilst you can import PyQt4 prior to importing qtutils (in order to tell qtutils &quot; +</span>\n<span class=\"gi\">+                       &quot;to use PyQt4), either set the API version to 2 yourself, or import qtutils &quot; +</span>\n<span class=\"gi\">+                       &quot;(which will set it for you) prior to importing QtGui or QtCore.&quot;)</span>\n<span class=\"gi\">+                raise RuntimeError(msg)</span>\n<span class=\"gi\">+        except ValueError:</span>\n<span class=\"gi\">+            # API version not set yet.</span>\n<span class=\"gi\">+            pass</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+libs = [PYQT5, PYQT4, PYSIDE]</span>\n<span class=\"gi\">+for lib in libs:</span>\n<span class=\"gi\">+    if lib in sys.modules:</span>\n<span class=\"gi\">+        QT_ENV = lib</span>\n<span class=\"gi\">+        if lib == PYQT4:</span>\n<span class=\"gi\">+            check_pyqt4_api()</span>\n<span class=\"gi\">+            set_pyqt4_api()</span>\n<span class=\"gi\">+        break</span>\n<span class=\"gi\">+else:</span>\n<span class=\"gi\">+    for lib in libs:</span>\n<span class=\"gi\">+        if lib == PYQT4:</span>\n<span class=\"gi\">+            # Have to set pyqt API v2 before importing PyQt4:</span>\n<span class=\"gi\">+            set_pyqt4_api()</span>\n<span class=\"gi\">+        try:</span>\n<span class=\"gi\">+            __import__(lib)</span>\n<span class=\"gi\">+            QT_ENV = lib</span>\n<span class=\"gi\">+            break</span>\n<span class=\"gi\">+        except ImportError:</span>\n<span class=\"gi\">+            pass</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+if QT_ENV is None:</span>\n<span class=\"gi\">+    raise Exception(&quot;No Qt Enviroment was detected!&quot;)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+if QT_ENV == PYQT5:</span>\n<span class=\"gi\">+    from PyQt5 import QtGui, QtCore, QtWidgets</span>\n<span class=\"gi\">+else:</span>\n<span class=\"gi\">+    if QT_ENV == PYQT4:</span>\n<span class=\"gi\">+        from PyQt4 import QtGui, QtCore</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    elif QT_ENV == PYSIDE:</span>\n<span class=\"gi\">+        from PySide import QtGui, QtCore</span>\n<span class=\"gi\">+        import PySide</span>\n<span class=\"gi\">+        QtCore.QT_VERSION_STR = PySide.QtCore.__version__</span>\n<span class=\"gi\">+        QtCore.PYQT_VERSION_STR = PySide.__version__</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    # Allow the methods that have been renamed in Qt5 to be accessed by their</span>\n<span class=\"gi\">+    # Qt5 names:</span>\n<span class=\"gi\">+    QtGui.QHeaderView.setSectionsMovable = QtGui.QHeaderView.setMovable</span>\n<span class=\"gi\">+    QtGui.QHeaderView.setSectionsClickable = QtGui.QHeaderView.setClickable</span>\n<span class=\"gi\">+    QtGui.QHeaderView.setSectionResizeMode = QtGui.QHeaderView.setResizeMode</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    if QT_ENV == PYQT4:</span>\n<span class=\"gi\">+        # Pyside does not have the methods ending in &quot;-AndFilter&quot;:</span>\n<span class=\"gi\">+        QtGui.QFileDialog.getOpenFileName = QtGui.QFileDialog.getOpenFileNameAndFilter</span>\n<span class=\"gi\">+        QtGui.QFileDialog.getOpenFileNames = QtGui.QFileDialog.getOpenFileNamesAndFilter</span>\n<span class=\"gi\">+        QtGui.QFileDialog.getSaveFileName = QtGui.QFileDialog.getSaveFileNameAndFilter</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    QtWidgets = QtGui</span>\n<span class=\"gi\">+    QtCore.QSortFilterProxyModel = QtGui.QSortFilterProxyModel</span>\n<span class=\"gi\">+    QtWidgets.QStyleOptionProgressBar = QtGui.QStyleOptionProgressBarV2</span>\n<span class=\"gi\">+    QtWidgets.QStyleOptionTab = QtGui.QStyleOptionTabV3</span>\n<span class=\"gi\">+    QtWidgets.QStyleOptionViewItem = QtGui.QStyleOptionViewItemV4</span>\n<span class=\"gi\">+    QtCore.qInstallMessageHandler = QtCore.qInstallMsgHandler</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+sys.modules[&#39;qtutils.qt.QtGui&#39;] = QtGui</span>\n<span class=\"gi\">+sys.modules[&#39;qtutils.qt.QtWidgets&#39;] = QtWidgets</span>\n<span class=\"gi\">+sys.modules[&#39;qtutils.qt.QtCore&#39;] = QtCore</span>\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d setup.py</span>\n<span class=\"gd\">--- a/setup.py  Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/setup.py  Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -13,6 +13,7 @@</span>\n import sys\n import os\n\n<span class=\"gi\">+BUILD_PYQT5_ICONS_RESOURCE = True</span>\n BUILD_PYQT4_ICONS_RESOURCE = True\n BUILD_PYSIDE_ICONS_RESOURCE = True\n\n<span class=\"gu\">@@ -22,8 +23,11 @@</span>\n if &#39;NO_PYQT4&#39; in sys.argv:\n     BUILD_PYQT4_ICONS_RESOURCE = False\n     sys.argv.remove(&#39;NO_PYQT4&#39;)\n<span class=\"gi\">+if &#39;NO_PYQT5&#39; in sys.argv:</span>\n<span class=\"gi\">+    BUILD_PYQT5_ICONS_RESOURCE = False</span>\n<span class=\"gi\">+    sys.argv.remove(&#39;NO_PYQT5&#39;)</span>\n\n<span class=\"gd\">-VERSION = &#39;1.6.1&#39;</span>\n<span class=\"gi\">+VERSION = &#39;2.0.0&#39;</span>\n\n # Do the build process for icon resource files, this will only do anything\n # if the files are not already present.  The idea is that someone like me\n<span class=\"gu\">@@ -37,6 +41,8 @@</span>\n print(&#39;building qt icon resource files ...&#39;)\n sys.path.insert(0,&#39;qtutils/icons&#39;)\n import _build\n<span class=\"gi\">+if BUILD_PYQT5_ICONS_RESOURCE:</span>\n<span class=\"gi\">+    _build.pyqt5()</span>\n if BUILD_PYQT4_ICONS_RESOURCE:\n     _build.pyqt4()\n if BUILD_PYSIDE_ICONS_RESOURCE:\n</pre></div>", "type": "rendered"}, "created_on": "2017-07-23T01:55:33.570347+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-10T20:52:26.823653+00:00", "type": "pullrequest_comment", "id": 41297860}