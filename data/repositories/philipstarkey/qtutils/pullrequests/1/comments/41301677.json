{"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41301677.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41301677"}}, "parent": {"id": 41299269, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41299269.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41299269"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "1. So the 'imported but never used' linter errors you can ignore - these are imported here so that they can be imported from here by other modules. Feel free to add a comment to these lines in whatever format tells your linter to ignore them if you like. It's probably the same linter I use (sometimes use - I keep misconfiguring it every time I upgrade my OS and then never bother to set it up again) and that anyone else using a linter would use, so no harm in adding the comments telling the linter what's up.\n\n2. Potentially to avoid it being garbage collected? I've seen this happen with processes - in certain contexts a subprocess never runs because it is garbage collected before the child actually starts. I'd vote to leave it in just in case. Oh, actually I see that the name is being overwritten once per loop anyway for the first three loops, so it can't be that. In that case, sure, feel free to remove the assignment.\n\n3. Meh, I don't mind if testing code is sloppy. But if you like (to make your linter complain less), move the lambda into the function call directly as an argument rather than assigning it a name.\n\n4. Ah, yes. I was always a bit slack with the copyright headers. If you don't mind, could you add one in, copying from one of the files that has Phil and me credited?", "markup": "markdown", "html": "<ol>\n<li>\n<p>So the 'imported but never used' linter errors you can ignore - these are imported here so that they can be imported from here by other modules. Feel free to add a comment to these lines in whatever format tells your linter to ignore them if you like. It's probably the same linter I use (sometimes use - I keep misconfiguring it every time I upgrade my OS and then never bother to set it up again) and that anyone else using a linter would use, so no harm in adding the comments telling the linter what's up.</p>\n</li>\n<li>\n<p>Potentially to avoid it being garbage collected? I've seen this happen with processes - in certain contexts a subprocess never runs because it is garbage collected before the child actually starts. I'd vote to leave it in just in case. Oh, actually I see that the name is being overwritten once per loop anyway for the first three loops, so it can't be that. In that case, sure, feel free to remove the assignment.</p>\n</li>\n<li>\n<p>Meh, I don't mind if testing code is sloppy. But if you like (to make your linter complain less), move the lambda into the function call directly as an argument rather than assigning it a name.</p>\n</li>\n<li>\n<p>Ah, yes. I was always a bit slack with the copyright headers. If you don't mind, could you add one in, copying from one of the files that has Phil and me credited?</p>\n</li>\n</ol>", "type": "rendered"}, "created_on": "2017-07-23T16:03:43.470809+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-23T16:05:20.657988+00:00", "type": "pullrequest_comment", "id": 41301677}