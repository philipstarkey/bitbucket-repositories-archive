{"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42605442.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42605442"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "I am inclined to suggest some changes before merging. \n\nDespite it being my suggestion, the deprecation errors on the patched attributes should probably be removed. This is because we use other libraries that use Qt, and our patches could interfere with them. Patching *on* an extra attribute is relatively harmless, but *removing* one is less so. We rely on both matplotlib and PyQtGraph, and I had forgotten that we imported other qt-using code that we do not necessarily have control over. [qtpy has come to the same conclusion](https://github.com/spyder-ide/qtpy/pull/120).\n\nIn fact, so far PyQtGraph takes the opposite approach - their shim applies monkeypatches that make PyQt5 look like PyQt4 instead of the other way around. So PyQtGraph is definitely making method calls that rely on PyQt4 names that have been removed in Qt5, and we could easily tread on its toes if we remove them.\n\nSo we should delete the _patch function, and just add the methods the simple way.\n\nAlso, we should ditch the message handler as mentioned. So the patch for these changes is:\n\n\n```\n#!diff\n\ndiff -r 573a45834c56 qtutils/__init__.py\n--- a/qtutils/__init__.py\tThu Aug 10 08:42:27 2017 +0200\n+++ b/qtutils/__init__.py\tThu Aug 10 14:53:44 2017 -0400\n@@ -23,17 +23,6 @@\n from qtutils.qt.QtCore import qInstallMessageHandler\n from qtutils.locking import qtlock\n \n-\n-def _message_handler(type, message):\n-    \"\"\"Handle qt warnings etc with an exception, so they don't pass\n-    unnoticed\"\"\"\n-    print('%s: %s' % (type, message))\n-    # raise Exception('%s: %s'%(type,message))\n-\n-\n-qInstallMessageHandler(_message_handler)\n-del qInstallMessageHandler\n-\n qtlock.enforce()\n \n from qtutils.invoke_in_main import inmain, inmain_later, inthread, inmain_decorator\ndiff -r 573a45834c56 qtutils/qt.py\n--- a/qtutils/qt.py\tThu Aug 10 08:42:27 2017 +0200\n+++ b/qtutils/qt.py\tThu Aug 10 14:53:44 2017 -0400\n@@ -90,35 +90,17 @@\n         QtCore.QT_VERSION_STR = PySide.QtCore.__version__\n         QtCore.PYQT_VERSION_STR = PySide.__version__\n \n-\n-    def _patch(cls, qt5_method_name, qt4_method_name):\n-        \"\"\"In Qt 4, alias the qt5 method names to point to the qt4\n-        equivalents. Replace the qt4 method with one that raises an exception\n-        pointing the user to use the qt5 method name\"\"\"\n-\n-        # Alias the new method name to point to the existing method\n-        setattr(cls, qt5_method_name, cls.__dict__[qt4_method_name])\n-\n-        def deprecation_error(self, *args, **kwargs):\n-            msg = (\"{}.{} has been renamed to \".format(cls.__name__, qt4_method_name) +\n-                   \"{}.{} in qt5.\".format(cls.__name__, qt5_method_name) +\n-                   \"qtutils requires you use the new method names even in qt4 \" +\n-                   \" (they are aliased to point to the existing methods) so that code works \" +\n-                   \"with both qt4 and qt5\")\n-            raise NameError(msg)\n-\n-        # Accesing the existing method by name will raise an error:\n-        setattr(cls, qt4_method_name, deprecation_error)\n-\n-    _patch(QtGui.QHeaderView, \"setSectionsMovable\", \"setMovable\")\n-    _patch(QtGui.QHeaderView, \"setSectionsClickable\", \"setClickable\")\n-    _patch(QtGui.QHeaderView, \"setSectionResizeMode\", \"setResizeMode\")\n+    # Allow the methods that have been renamed in Qt5 to be accessed by their\n+    # Qt5 names:\n+    QtGui.QHeaderView.setSectionsMovable = QtGui.QHeaderView.setMovable\n+    QtGui.QHeaderView.setSectionsClickable = QtGui.QHeaderView.setClickable\n+    QtGui.QHeaderView.setSectionResizeMode = QtGui.QHeaderView.setResizeMode\n \n     if QT_ENV == PYQT4:\n         # Pyside does not have the methods ending in \"-AndFilter\":\n-        _patch(QtGui.QFileDialog, \"getOpenFileName\", \"getOpenFileNameAndFilter\")\n-        _patch(QtGui.QFileDialog, \"getOpenFileNames\", \"getOpenFileNamesAndFilter\")\n-        _patch(QtGui.QFileDialog, \"getSaveFileName\", \"getSaveFileNameAndFilter\")\n+        QtGui.QFileDialog.getOpenFileName = QtGui.QFileDialog.getOpenFileNameAndFilter\n+        QtGui.QFileDialog.getOpenFileNames = QtGui.QFileDialog.getOpenFileNamesAndFilter\n+        QtGui.QFileDialog.getSaveFileName = QtGui.QFileDialog.getSaveFileNameAndFilter\n \n     QtWidgets = QtGui\n     QtCore.QSortFilterProxyModel = QtGui.QSortFilterProxyModel\n```\n", "markup": "markdown", "html": "<p>I am inclined to suggest some changes before merging. </p>\n<p>Despite it being my suggestion, the deprecation errors on the patched attributes should probably be removed. This is because we use other libraries that use Qt, and our patches could interfere with them. Patching <em>on</em> an extra attribute is relatively harmless, but <em>removing</em> one is less so. We rely on both matplotlib and PyQtGraph, and I had forgotten that we imported other qt-using code that we do not necessarily have control over. <a data-is-external-link=\"true\" href=\"https://github.com/spyder-ide/qtpy/pull/120\" rel=\"nofollow\">qtpy has come to the same conclusion</a>.</p>\n<p>In fact, so far PyQtGraph takes the opposite approach - their shim applies monkeypatches that make PyQt5 look like PyQt4 instead of the other way around. So PyQtGraph is definitely making method calls that rely on PyQt4 names that have been removed in Qt5, and we could easily tread on its toes if we remove them.</p>\n<p>So we should delete the _patch function, and just add the methods the simple way.</p>\n<p>Also, we should ditch the message handler as mentioned. So the patch for these changes is:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r 573a45834c56 qtutils/__init__.py</span>\n<span class=\"gd\">--- a/qtutils/__init__.py   Thu Aug 10 08:42:27 2017 +0200</span>\n<span class=\"gi\">+++ b/qtutils/__init__.py   Thu Aug 10 14:53:44 2017 -0400</span>\n<span class=\"gu\">@@ -23,17 +23,6 @@</span>\n from qtutils.qt.QtCore import qInstallMessageHandler\n from qtutils.locking import qtlock\n\n<span class=\"gd\">-</span>\n<span class=\"gd\">-def _message_handler(type, message):</span>\n<span class=\"gd\">-    &quot;&quot;&quot;Handle qt warnings etc with an exception, so they don&#39;t pass</span>\n<span class=\"gd\">-    unnoticed&quot;&quot;&quot;</span>\n<span class=\"gd\">-    print(&#39;%s: %s&#39; % (type, message))</span>\n<span class=\"gd\">-    # raise Exception(&#39;%s: %s&#39;%(type,message))</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-qInstallMessageHandler(_message_handler)</span>\n<span class=\"gd\">-del qInstallMessageHandler</span>\n<span class=\"gd\">-</span>\n qtlock.enforce()\n\n from qtutils.invoke_in_main import inmain, inmain_later, inthread, inmain_decorator\n<span class=\"gh\">diff -r 573a45834c56 qtutils/qt.py</span>\n<span class=\"gd\">--- a/qtutils/qt.py Thu Aug 10 08:42:27 2017 +0200</span>\n<span class=\"gi\">+++ b/qtutils/qt.py Thu Aug 10 14:53:44 2017 -0400</span>\n<span class=\"gu\">@@ -90,35 +90,17 @@</span>\n         QtCore.QT_VERSION_STR = PySide.QtCore.__version__\n         QtCore.PYQT_VERSION_STR = PySide.__version__\n\n<span class=\"gd\">-</span>\n<span class=\"gd\">-    def _patch(cls, qt5_method_name, qt4_method_name):</span>\n<span class=\"gd\">-        &quot;&quot;&quot;In Qt 4, alias the qt5 method names to point to the qt4</span>\n<span class=\"gd\">-        equivalents. Replace the qt4 method with one that raises an exception</span>\n<span class=\"gd\">-        pointing the user to use the qt5 method name&quot;&quot;&quot;</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-        # Alias the new method name to point to the existing method</span>\n<span class=\"gd\">-        setattr(cls, qt5_method_name, cls.__dict__[qt4_method_name])</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-        def deprecation_error(self, *args, **kwargs):</span>\n<span class=\"gd\">-            msg = (&quot;{}.{} has been renamed to &quot;.format(cls.__name__, qt4_method_name) +</span>\n<span class=\"gd\">-                   &quot;{}.{} in qt5.&quot;.format(cls.__name__, qt5_method_name) +</span>\n<span class=\"gd\">-                   &quot;qtutils requires you use the new method names even in qt4 &quot; +</span>\n<span class=\"gd\">-                   &quot; (they are aliased to point to the existing methods) so that code works &quot; +</span>\n<span class=\"gd\">-                   &quot;with both qt4 and qt5&quot;)</span>\n<span class=\"gd\">-            raise NameError(msg)</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-        # Accesing the existing method by name will raise an error:</span>\n<span class=\"gd\">-        setattr(cls, qt4_method_name, deprecation_error)</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-    _patch(QtGui.QHeaderView, &quot;setSectionsMovable&quot;, &quot;setMovable&quot;)</span>\n<span class=\"gd\">-    _patch(QtGui.QHeaderView, &quot;setSectionsClickable&quot;, &quot;setClickable&quot;)</span>\n<span class=\"gd\">-    _patch(QtGui.QHeaderView, &quot;setSectionResizeMode&quot;, &quot;setResizeMode&quot;)</span>\n<span class=\"gi\">+    # Allow the methods that have been renamed in Qt5 to be accessed by their</span>\n<span class=\"gi\">+    # Qt5 names:</span>\n<span class=\"gi\">+    QtGui.QHeaderView.setSectionsMovable = QtGui.QHeaderView.setMovable</span>\n<span class=\"gi\">+    QtGui.QHeaderView.setSectionsClickable = QtGui.QHeaderView.setClickable</span>\n<span class=\"gi\">+    QtGui.QHeaderView.setSectionResizeMode = QtGui.QHeaderView.setResizeMode</span>\n\n     if QT_ENV == PYQT4:\n         # Pyside does not have the methods ending in &quot;-AndFilter&quot;:\n<span class=\"gd\">-        _patch(QtGui.QFileDialog, &quot;getOpenFileName&quot;, &quot;getOpenFileNameAndFilter&quot;)</span>\n<span class=\"gd\">-        _patch(QtGui.QFileDialog, &quot;getOpenFileNames&quot;, &quot;getOpenFileNamesAndFilter&quot;)</span>\n<span class=\"gd\">-        _patch(QtGui.QFileDialog, &quot;getSaveFileName&quot;, &quot;getSaveFileNameAndFilter&quot;)</span>\n<span class=\"gi\">+        QtGui.QFileDialog.getOpenFileName = QtGui.QFileDialog.getOpenFileNameAndFilter</span>\n<span class=\"gi\">+        QtGui.QFileDialog.getOpenFileNames = QtGui.QFileDialog.getOpenFileNamesAndFilter</span>\n<span class=\"gi\">+        QtGui.QFileDialog.getSaveFileName = QtGui.QFileDialog.getSaveFileNameAndFilter</span>\n\n     QtWidgets = QtGui\n     QtCore.QSortFilterProxyModel = QtGui.QSortFilterProxyModel\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-10T18:54:33.336015+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-10T18:59:34.655519+00:00", "type": "pullrequest_comment", "id": 42605442}