{"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42621208.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42621208"}}, "parent": {"id": 42617480, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42617480.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42617480"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Actually could you change those lines to\n\n`QtGui.QHeaderView.setSectionsMovable = QtGui.QHeaderView.__dict__[\"setMovable\"]`\n\n etc ?\n\nThe `setattr()` calls are unnecessary, it's the getting that returned the wrong type of object. The previous code used setattr because we only had the name of the attribute in the context of the function, whereas now we're not passing attribute names to a function we can can just type it out as normal attribute setting.\n\nThe `__dict__` is the neccesary bit. Getting a method by dotted attribute access or `getattr()` actually does some wrapping of the method rather than giving you the underlying function object, whereas `__dict__['method_name']` gives you the raw thing. Setting an attribute on the other hand is not special. I mean it can be in general but in this case it isn't. And if it were special, `setattr()` and setting with `obj.name = value` would both do the special thing - you would have to do `obj.__dict__['name'] = value` to circumvent the 'set' hooks. If you're curious about this confusion you can read about it [here](https://docs.python.org/3/howto/descriptor.html).", "markup": "markdown", "html": "<p>Actually could you change those lines to</p>\n<p><code>QtGui.QHeaderView.setSectionsMovable = QtGui.QHeaderView.__dict__[\"setMovable\"]</code></p>\n<p>etc ?</p>\n<p>The <code>setattr()</code> calls are unnecessary, it's the getting that returned the wrong type of object. The previous code used setattr because we only had the name of the attribute in the context of the function, whereas now we're not passing attribute names to a function we can can just type it out as normal attribute setting.</p>\n<p>The <code>__dict__</code> is the neccesary bit. Getting a method by dotted attribute access or <code>getattr()</code> actually does some wrapping of the method rather than giving you the underlying function object, whereas <code>__dict__['method_name']</code> gives you the raw thing. Setting an attribute on the other hand is not special. I mean it can be in general but in this case it isn't. And if it were special, <code>setattr()</code> and setting with <code>obj.name = value</code> would both do the special thing - you would have to do <code>obj.__dict__['name'] = value</code> to circumvent the 'set' hooks. If you're curious about this confusion you can read about it <a data-is-external-link=\"true\" href=\"https://docs.python.org/3/howto/descriptor.html\" rel=\"nofollow\">here</a>.</p>", "type": "rendered"}, "created_on": "2017-08-10T23:57:42.837259+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-11T00:01:51.369410+00:00", "type": "pullrequest_comment", "id": 42621208}