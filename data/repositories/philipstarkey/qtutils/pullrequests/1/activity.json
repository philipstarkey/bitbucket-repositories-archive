{"pagelen": 50, "values": [{"update": {"description": "* PEP8 formating\r\n\r\n* PyQt5 imports\r\n\r\n* german grammer fix :P\r\n\r\n* Qt abstraction wrapper\r\n\r\n* PyQt4 API v2\r\n\r\nMost of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\r\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.", "title": "PyQt5", "destination": {"commit": {"hash": "478e547522b4", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/478e547522b4.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/478e547522b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "0b1649c413ce", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/0b1649c413ce"}, "html": {"href": "#!/PhyNerd/qtutils/commits/0b1649c413ce"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "default"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2017-08-15T21:20:05.199479+00:00"}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42622040.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42622040"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Once again, for testing:\n\nI've uploaded a build of the current state of this pull request as \"2.0.0-rc2\". It's downloadable [here](#!/philipstarkey/qtutils/downloads/qtutils-2.0.0-rc2.zip), or installable with pip:\n\n`pip install #!/philipstarkey/qtutils/downloads/qtutils-2.0.0-rc2.zip`\n\nwhich will uninstall qtutils 1.6.1 if it was installed using pip.\n\nYou can revert with:\n\n`pip install qtutils==1.6.1`\n\nHappy testing!", "markup": "markdown", "html": "<p>Once again, for testing:</p>\n<p>I've uploaded a build of the current state of this pull request as \"2.0.0-rc2\". It's downloadable <a data-is-external-link=\"true\" href=\"#!/philipstarkey/qtutils/downloads/qtutils-2.0.0-rc2.zip\" rel=\"nofollow\">here</a>, or installable with pip:</p>\n<p><code>pip install #!/philipstarkey/qtutils/downloads/qtutils-2.0.0-rc2.zip</code></p>\n<p>which will uninstall qtutils 1.6.1 if it was installed using pip.</p>\n<p>You can revert with:</p>\n<p><code>pip install qtutils==1.6.1</code></p>\n<p>Happy testing!</p>", "type": "rendered"}, "created_on": "2017-08-11T00:24:11.136042+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-11T00:24:22.391783+00:00", "type": "pullrequest_comment", "id": 42622040}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"update": {"description": "* PEP8 formating\r\n\r\n* PyQt5 imports\r\n\r\n* german grammer fix :P\r\n\r\n* Qt abstraction wrapper\r\n\r\n* PyQt4 API v2\r\n\r\nMost of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\r\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.", "title": "PyQt5", "destination": {"commit": {"hash": "478e547522b4", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/478e547522b4.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/478e547522b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "0b1649c413ce", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/0b1649c413ce"}, "html": {"href": "#!/PhyNerd/qtutils/commits/0b1649c413ce"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-08-11T00:04:49.400964+00:00"}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42621413.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42621413"}}, "parent": {"id": 42621316, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42621316.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42621316"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Thanks! Don't feel any rush, I can make changes too and upload builds of them. Link was broken because I pasted Python code instead of the actual link - fixed if you are curious later.", "markup": "markdown", "html": "<p>Thanks! Don't feel any rush, I can make changes too and upload builds of them. Link was broken because I pasted Python code instead of the actual link - fixed if you are curious later.</p>", "type": "rendered"}, "created_on": "2017-08-11T00:03:33.974482+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-11T00:03:41.137155+00:00", "type": "pullrequest_comment", "id": 42621413}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42621208.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42621208"}}, "parent": {"id": 42617480, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42617480.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42617480"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Actually could you change those lines to\n\n`QtGui.QHeaderView.setSectionsMovable = QtGui.QHeaderView.__dict__[\"setMovable\"]`\n\n etc ?\n\nThe `setattr()` calls are unnecessary, it's the getting that returned the wrong type of object. The previous code used setattr because we only had the name of the attribute in the context of the function, whereas now we're not passing attribute names to a function we can can just type it out as normal attribute setting.\n\nThe `__dict__` is the neccesary bit. Getting a method by dotted attribute access or `getattr()` actually does some wrapping of the method rather than giving you the underlying function object, whereas `__dict__['method_name']` gives you the raw thing. Setting an attribute on the other hand is not special. I mean it can be in general but in this case it isn't. And if it were special, `setattr()` and setting with `obj.name = value` would both do the special thing - you would have to do `obj.__dict__['name'] = value` to circumvent the 'set' hooks. If you're curious about this confusion you can read about it [here](https://docs.python.org/3/howto/descriptor.html).", "markup": "markdown", "html": "<p>Actually could you change those lines to</p>\n<p><code>QtGui.QHeaderView.setSectionsMovable = QtGui.QHeaderView.__dict__[\"setMovable\"]</code></p>\n<p>etc ?</p>\n<p>The <code>setattr()</code> calls are unnecessary, it's the getting that returned the wrong type of object. The previous code used setattr because we only had the name of the attribute in the context of the function, whereas now we're not passing attribute names to a function we can can just type it out as normal attribute setting.</p>\n<p>The <code>__dict__</code> is the neccesary bit. Getting a method by dotted attribute access or <code>getattr()</code> actually does some wrapping of the method rather than giving you the underlying function object, whereas <code>__dict__['method_name']</code> gives you the raw thing. Setting an attribute on the other hand is not special. I mean it can be in general but in this case it isn't. And if it were special, <code>setattr()</code> and setting with <code>obj.name = value</code> would both do the special thing - you would have to do <code>obj.__dict__['name'] = value</code> to circumvent the 'set' hooks. If you're curious about this confusion you can read about it <a data-is-external-link=\"true\" href=\"https://docs.python.org/3/howto/descriptor.html\" rel=\"nofollow\">here</a>.</p>", "type": "rendered"}, "created_on": "2017-08-10T23:57:42.837259+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-11T00:01:51.369410+00:00", "type": "pullrequest_comment", "id": 42621208}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42621316.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42621316"}}, "parent": {"id": 42621208, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42621208.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42621208"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Thats the last change I'll do today. The link you provided is dead but I'm way to tired to read it anyway.", "markup": "markdown", "html": "<p>Thats the last change I'll do today. The link you provided is dead but I'm way to tired to read it anyway.</p>", "type": "rendered"}, "created_on": "2017-08-11T00:00:23.958941+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-11T00:00:24.028953+00:00", "type": "pullrequest_comment", "id": 42621316}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42617480.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42617480"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "I see your buxfix. My fault - will update the build.", "markup": "markdown", "html": "<p>I see your buxfix. My fault - will update the build.</p>", "type": "rendered"}, "created_on": "2017-08-10T22:16:19.296189+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-10T22:16:19.299240+00:00", "type": "pullrequest_comment", "id": 42617480}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42616720.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42616720"}}, "parent": {"id": 42607647, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42607647.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42607647"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "with the changes lyse doesn't start anymore I'm getting:\n\n```\n#!python\nTraceback (most recent call last):\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/runpy.py\", line 174, in _run_module_as_main\n    \"__main__\", fname, loader, pkg_name)\n  File \"/Users/janwerkmann/anaconda/lib/python2.7/runpy.py\", line 72, in _run_code\n    exec code in run_globals\n  File \"/Users/janwerkmann/labscript_suite/lyse/__main__.py\", line 1835, in <module>\n    app = Lyse()\n  File \"/Users/janwerkmann/labscript_suite/lyse/__main__.py\", line 1770, in __init__\n    self, to_singleshot, from_singleshot, self.output_box.port)\n  File \"/Users/janwerkmann/labscript_suite/lyse/__main__.py\", line 415, in __init__\n    self.header = HorizontalHeaderViewWithWidgets(self.model)\n  File \"/Users/janwerkmann/labscript_suite/labscript_utils/qtwidgets/headerview_with_widgets.py\", line 43, in __init__\n    self.setSectionsMovable(True)\nTypeError: setMovable(self, bool): first argument of unbound method must have type 'QHeaderView'\n```\n\nI think thats why I had defined the functions in my original version of qt.py\n\nUpdate: I'll replace the new_func = old_func with setattr as that fixes it\n\nUpdate2: fixed it! It would be great if you fixed it in the zip you posted earlier too", "markup": "markdown", "html": "<p>with the changes lyse doesn't start anymore I'm getting:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/runpy.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">174</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_run_module_as_main</span>\n    <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">loader</span><span class=\"p\">,</span> <span class=\"n\">pkg_name</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/anaconda/lib/python2.7/runpy.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">72</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_run_code</span>\n    <span class=\"k\">exec</span> <span class=\"n\">code</span> <span class=\"ow\">in</span> <span class=\"n\">run_globals</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/lyse/__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1835</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Lyse</span><span class=\"p\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/lyse/__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1770</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__init__</span>\n    <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">to_singleshot</span><span class=\"p\">,</span> <span class=\"n\">from_singleshot</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_box</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/lyse/__main__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">415</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__init__</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"n\">HorizontalHeaderViewWithWidgets</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/Users/janwerkmann/labscript_suite/labscript_utils/qtwidgets/headerview_with_widgets.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"fm\">__init__</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setSectionsMovable</span><span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">setMovable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">):</span> <span class=\"n\">first</span> <span class=\"n\">argument</span> <span class=\"n\">of</span> <span class=\"n\">unbound</span> <span class=\"n\">method</span> <span class=\"n\">must</span> <span class=\"n\">have</span> <span class=\"nb\">type</span> <span class=\"s1\">&#39;QHeaderView&#39;</span>\n</pre></div>\n\n\n<p>I think thats why I had defined the functions in my original version of qt.py</p>\n<p>Update: I'll replace the new_func = old_func with setattr as that fixes it</p>\n<p>Update2: fixed it! It would be great if you fixed it in the zip you posted earlier too</p>", "type": "rendered"}, "created_on": "2017-08-10T21:58:13.448373+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-10T22:08:06.108035+00:00", "type": "pullrequest_comment", "id": 42616720}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"update": {"description": "* PEP8 formating\r\n\r\n* PyQt5 imports\r\n\r\n* german grammer fix :P\r\n\r\n* Qt abstraction wrapper\r\n\r\n* PyQt4 API v2\r\n\r\nMost of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\r\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.", "title": "PyQt5", "destination": {"commit": {"hash": "478e547522b4", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/478e547522b4.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/478e547522b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "fe5294bee127", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/fe5294bee127"}, "html": {"href": "#!/PhyNerd/qtutils/commits/fe5294bee127"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-08-10T22:05:56.421473+00:00"}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42616920.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42616920"}}, "parent": {"id": 42616454, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42616454.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42616454"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Correct. Edited.", "markup": "markdown", "html": "<p>Correct. Edited.</p>", "type": "rendered"}, "created_on": "2017-08-10T22:02:45.973942+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-10T22:02:45.976516+00:00", "type": "pullrequest_comment", "id": 42616920}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42613934.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42613934"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "for testers, I've uploaded a build of the current state of this pull request as \"2.0.0-rc1\". It's downloadable [here](#!/philipstarkey/qtutils/downloads/qtutils-2.0.0-rc1.zip).\n\nWhat's easier is to install directly from the URL using pip like:\n\n`pip install #!/philipstarkey/qtutils/downloads/qtutils-2.0.0-rc1.zip`\n\nwhich will uninstall qtutils 1.6.1 if it was installed using pip.\n\nYou can revert with:\n\n`pip install qtutils==1.6.1`", "markup": "markdown", "html": "<p>for testers, I've uploaded a build of the current state of this pull request as \"2.0.0-rc1\". It's downloadable <a data-is-external-link=\"true\" href=\"#!/philipstarkey/qtutils/downloads/qtutils-2.0.0-rc1.zip\" rel=\"nofollow\">here</a>.</p>\n<p>What's easier is to install directly from the URL using pip like:</p>\n<p><code>pip install #!/philipstarkey/qtutils/downloads/qtutils-2.0.0-rc1.zip</code></p>\n<p>which will uninstall qtutils 1.6.1 if it was installed using pip.</p>\n<p>You can revert with:</p>\n<p><code>pip install qtutils==1.6.1</code></p>", "type": "rendered"}, "created_on": "2017-08-10T21:07:53.716224+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-10T22:02:28.798548+00:00", "type": "pullrequest_comment", "id": 42613934}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42616454.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42616454"}}, "parent": {"id": 42613934, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42613934.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42613934"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "I think ```pip install qtutils==1.6.1``` gets the current version", "markup": "markdown", "html": "<p>I think <code>pip install qtutils==1.6.1</code> gets the current version</p>", "type": "rendered"}, "created_on": "2017-08-10T21:52:41.041313+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-10T21:52:41.095237+00:00", "type": "pullrequest_comment", "id": 42616454}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41297860.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41297860"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "OK, so here is a diff so far with whitespace ignored for easier review (`hg diff -wB -r 113 -r 136`). I'll update this comment after any future commits to this pull request.\n\nBecause this diff ignores whitespace changes, I can see at least one line in the diff that looks like it has incorrect indentation - but the actual file is fine and has the correct indentation, just FYI.\n\n```\n#!diff\n\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/UiLoader.py\n--- a/qtutils/UiLoader.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/UiLoader.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -14,6 +14,8 @@\n \n from __future__ import print_function\n import sys\n+import qtutils.qt\n+\n \n class UiLoaderPromotionException(Exception):\n     pass\n@@ -21,7 +23,8 @@\n class UiLoaderUnknownWidgetException(Exception):\n     pass\n     \n-if 'PySide' in sys.modules.copy():\n+\n+if qtutils.qt.QT_ENV == qtutils.qt.PYSIDE:\n     from PySide.QtUiTools import QUiLoader\n      \n     class UiLoader(QUiLoader):\n@@ -91,7 +94,10 @@\n         \n else:\n     from types import ModuleType\n+    if qtutils.qt.QT_ENV == qtutils.qt.PYQT4:\n     from PyQt4 import uic\n+    elif qtutils.qt.QT_ENV == qtutils.qt.PYQT5:\n+        from PyQt5 import uic\n     \n     class UiLoader(object):\n         def __init__(self):\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/__init__.py\n--- a/qtutils/__init__.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/__init__.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -20,22 +20,9 @@\n     # Version file has not been autogenerated from build process:\n     __version__ = None\n \n-import sys\n-if 'PySide' in sys.modules.copy():   \n-    from PySide.QtCore import qInstallMsgHandler \n-else:\n-    from PyQt4.QtCore import qInstallMsgHandler \n+from qtutils.qt.QtCore import qInstallMessageHandler\n+from qtutils.locking import qtlock\n \n-def _message_handler(type, message):\n-    \"\"\"Handle qt warnings etc with an exception, so they don't pass\n-    unnoticed\"\"\"\n-    print('%s: %s'%(type,message))\n-    #raise Exception('%s: %s'%(type,message))\n-\n-qInstallMsgHandler(_message_handler)\n-del qInstallMsgHandler\n-\n-from qtutils.locking import qtlock\n qtlock.enforce()\n \n from qtutils.invoke_in_main import inmain, inmain_later, inthread, inmain_decorator\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/auto_scroll_to_end.py\n--- a/qtutils/auto_scroll_to_end.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/auto_scroll_to_end.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -1,14 +1,10 @@\n from __future__ import print_function\n import sys\n-import threading\n import weakref\n \n-if 'PySide' in sys.modules:\n-    from PySide.QtCore import *\n-    from PySide.QtGui import *\n-else:\n-    from PyQt4.QtCore import *\n-    from PyQt4.QtGui import *\n+from qtutils.qt.QtCore import *\n+from qtutils.qt.QtGui import *\n+from qtutils.qt.QtWidgets import *\n \n # These are weakref dictionarys so that we do not hold references\n # to the scrollbars after nobody else does:\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/disconnect_contextmanager.py\n--- a/qtutils/disconnect_contextmanager.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/disconnect_contextmanager.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -14,11 +14,6 @@\n \n from __future__ import print_function\n \n-import sys\n-if 'PySide' in sys.modules:\n-    from PySide.QtCore import *\n-else:\n-    from PyQt4.QtCore import *\n     \n class DisconnectContextManager(object):\n     def __init__(self, signal, slot):\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/icons/__init__.py\n--- a/qtutils/icons/__init__.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/icons/__init__.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -1,5 +1,7 @@\n-import sys\n-if 'Pyside' in sys.modules:\n+import qtutils.qt\n+if qtutils.qt.QT_ENV == qtutils.qt.PYSIDE:\n     import qtutils.icons._icons_pyside\n-else:\n+elif qtutils.qt.QT_ENV == qtutils.qt.PYQT4:\n     import qtutils.icons._icons_pyqt4\n+elif qtutils.qt.QT_ENV == qtutils.qt.PYQT5:\n+    import qtutils.icons._icons_pyqt5\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/icons/_build.py\n--- a/qtutils/icons/_build.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/icons/_build.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -3,6 +3,7 @@\n \n this_folder = os.path.dirname(os.path.realpath(__file__))\n qrc_filename = os.path.join(this_folder, 'icons.qrc')\n+py_filename_pyqt5 = os.path.join(this_folder, '_icons_pyqt5.py')\n py_filename_pyqt4 = os.path.join(this_folder, '_icons_pyqt4.py')\n py_filename_pyside = os.path.join(this_folder, '_icons_pyside.py')\n icon_folders = ['custom', 'fugue']\n@@ -19,6 +20,36 @@\n                 outfile.write(line_format_string%relative_path)      \n         outfile.write(footer)\n         \n+\n+def find_pyrcc5():\n+    import PyQt5\n+    # If we're on Windows, it's probably in the pyqt4 directory:\n+    if os.name == 'nt':\n+        pyqt5_dir = os.path.abspath(os.path.dirname(PyQt5.__file__))\n+        pyrcc5 = os.path.join(pyqt5_dir, 'pyrcc5.exe')\n+        if os.path.exists(pyrcc5):\n+            return pyrcc5\n+    # Otherwise, or if it was not found there, check if it's in the PATH:\n+    pyrcc5 = 'pyrcc5'\n+    try:\n+        subprocess.call([pyrcc5], stdout=open(os.devnull), stderr=open(os.devnull))\n+        return pyrcc5\n+    except OSError:\n+        # Still no?\n+        msg = \"\"\"\n+                Cannot find pyrcc5, the PyQt5 utility for building resource\n+                files. This module was configured to find it in the PyQt5\n+                directory on Windows, which is where it is for the Anaconda\n+                Python distribution. This module should also find pyrcc5 if it\n+                in in the PATH, on any OS. Please find pyrcc5 and put it in your\n+                PATH. On Debian based systems it is available in the pyqt5-dev-\n+                tools package. If you want to install qtutils without PyQt5\n+                support, simply run:\n+                python setup.py install NO_PYQT5\"\"\"\n+        import textwrap\n+        raise OSError(textwrap.dedent(msg).strip())\n+\n+\n def find_pyrcc4():\n     import PyQt4\n     # If we're on Windows, it's probably in the pyqt4 directory:\n@@ -75,6 +106,15 @@\n         import textwrap\n         raise OSError(textwrap.dedent(msg).strip())\n         \n+\n+def make_py_file_pyqt5():\n+    pyrcc5 = find_pyrcc5()\n+    child = subprocess.Popen([pyrcc5, '-o', py_filename_pyqt5, qrc_filename])\n+    stdoutdata, stderrdata = child.communicate()\n+    if child.returncode != 0:\n+        raise OSError(stderrdata)\n+\n+\n def make_py_file_pyqt4():\n     pyrcc4 = find_pyrcc4()\n     child = subprocess.Popen([pyrcc4, '-py3', '-o', py_filename_pyqt4, qrc_filename])\n@@ -89,6 +129,12 @@\n     if child.returncode != 0:\n         raise OSError(stderrdata)\n         \n+\n+def pyqt5():\n+    if not os.path.exists(py_filename_pyqt5):\n+        make_py_file_pyqt5()\n+\n+\n def pyqt4():\n     if not os.path.exists(py_filename_pyqt4):    \n         make_py_file_pyqt4()\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/invoke_in_main.py\n--- a/qtutils/invoke_in_main.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/invoke_in_main.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -24,10 +24,7 @@\n import threading\n import functools\n \n-if 'PySide' in sys.modules.copy():\n-    from PySide.QtCore import *\n-else:\n-    from PyQt4.QtCore import *\n+from qtutils.qt.QtCore import *\n \n \n class CallEvent(QEvent):\n@@ -122,7 +119,7 @@\n     \n     def loop(index):\n         if index < 3:\n-            thread = inthread(loop, index+1)\n+            inthread(loop, index + 1)\n         while True:\n             # print('MyThread-%d: %s'%(index,str(QThread.currentThread())))\n             # print('MyThread-%d: %s'%(index,threading.current_thread().name))\n@@ -147,7 +144,6 @@\n     signal.signal(signal.SIGINT, sigint_handler)\n \n     thread = inthread(loop, 1)\n-    x = lambda: inmain(myFunction2)\n-    timer = QTimer.singleShot(0,x)\n+    timer = QTimer.singleShot(0, lambda: inmain(myFunction2))\n     qapplication.exec_()\n \ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/locking.py\n--- a/qtutils/locking.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/locking.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -14,12 +14,9 @@\n \n from __future__ import print_function\n import threading\n-import sys\n \n-if 'PySide' in sys.modules.copy():\n-    from PySide.QtCore import *\n-else:\n-    from PyQt4.QtCore import *\n+from qtutils.qt.QtCore import *\n+\n \n class BlockEvent(QEvent):\n     \"\"\"An event requesting the mainloop to be blocked until further notice.\"\"\"\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/outputbox.py\n--- a/qtutils/outputbox.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/outputbox.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -14,14 +14,10 @@\n \n from __future__ import print_function\n import threading\n-import sys\n \n-if 'PySide' in sys.modules:\n-    from PySide.QtCore import *\n-    from PySide.QtGui import *\n-else:\n-    from PyQt4.QtCore import *\n-    from PyQt4.QtGui import *\n+from qtutils.qt.QtCore import *\n+from qtutils.qt.QtGui import *\n+from qtutils.qt.QtWidgets import *\n \n import zmq\n from qtutils.auto_scroll_to_end import set_auto_scroll_to_end\n@@ -186,7 +182,7 @@\n         output_box.output('More red.\\n', True)\n         output_box.output('The \\\"quick white fox\\\" jumped over the \\'lazy\\' dog\\n')\n         output_box.output('<The quick red fox jumped over the lazy dog>\\n', True)\n-        output_box.output('Der schnelle braune Fuchs hat \\xc3\\xbcber den faulen Hund gesprungen\\n'.decode('utf8'), True)\n+        output_box.output('Der schnelle braune Fuchs ist \\xc3\\xbcber den faulen Hund gesprungen\\n'.decode('utf8'), True)\n \n     def button_pushed(*args, **kwargs):\n         import random\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/qsettings_wrapper.py\n--- a/qtutils/qsettings_wrapper.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/qtutils/qsettings_wrapper.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -13,13 +13,8 @@\n #####################################################################\n \n from __future__ import print_function\n-import sys\n-if 'PySide' in sys.modules:\n-    from PySide.QtCore import QSettings\n-    QVariant = None\n-else:\n-    from PyQt4.QtCore import QSettings\n-    from PyQt4.QtCore import QVariant\n+\n+from qtutils.qt.QtCore import QSettings\n \n import ast\n \n@@ -52,8 +47,6 @@\n     @inmain_decorator()\n     def _get(self, name):\n         valrepr = self._qsettings.value(name)\n-        if QVariant is not None and isinstance(valrepr, QVariant):\n-            valrepr = str(valrepr.toString())\n         return ast.literal_eval(valrepr)\n         \n     @inmain_decorator()\ndiff -r 478e547522b4 -r a43b82aebe8d qtutils/qt.py\n--- /dev/null\tThu Jan 01 00:00:00 1970 +0000\n+++ b/qtutils/qt.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -0,0 +1,114 @@\n+#####################################################################\n+#                                                                   #\n+# qt.py                                                             #\n+#                                                                   #\n+# Copyright 2017, Jan Werkmann                                      #\n+#                                                                   #\n+# This file is part of the qtutils project                          #\n+# (see #!/philipstarkey/qtutils )                #\n+# and is licensed under the 2-clause, or 3-clause, BSD License.     #\n+# See the license.txt file in the root of the project               #\n+# for the full license.                                             #\n+#                                                                   #\n+# The purpose of this wrapper is to provide a abstraction layer     #\n+# around the different versions of QtGui, QtCore and QtWidgets.     #\n+# The warpper is supposed to act like PyQt5, but might need         #\n+# addition in some cases.                                           #\n+#####################################################################\n+import sys\n+\n+PYSIDE = 'PySide'\n+PYQT4 = 'PyQt4'\n+PYQT5 = 'PyQt5'\n+QT_ENV = None\n+\n+\n+def set_pyqt4_api():\n+    import sip\n+    # This must be done before importing PyQt4:\n+    API_NAMES = [\"QDate\", \"QDateTime\", \"QString\", \"QTextStream\", \"QTime\", \"QUrl\", \"QVariant\"]\n+    API_VERSION = 2\n+    for name in API_NAMES:\n+        try:\n+            sip.setapi(name, API_VERSION)\n+        except ValueError:\n+            pass\n+\n+\n+def check_pyqt4_api():\n+    \"\"\"If PyQt4 was already imported before we got a chance to set API version\n+    2, ensure the API versions are either not set, or set to version 2.\n+    Otherwise confusing errors may occur later - better to catch this now\"\"\"\n+    import sip\n+    API_NAMES = [\"QDate\", \"QDateTime\", \"QString\", \"QTextStream\", \"QTime\", \"QUrl\", \"QVariant\"]\n+    API_VERSION = 2\n+    for name in API_NAMES:\n+        try:\n+            if sip.getapi(name) != API_VERSION:\n+                msg = (\"qtutils is only compatible with version 2 of the  PyQt4 API.\" +\n+                       \"Whilst you can import PyQt4 prior to importing qtutils (in order to tell qtutils \" +\n+                       \"to use PyQt4), either set the API version to 2 yourself, or import qtutils \" +\n+                       \"(which will set it for you) prior to importing QtGui or QtCore.\")\n+                raise RuntimeError(msg)\n+        except ValueError:\n+            # API version not set yet.\n+            pass\n+\n+\n+libs = [PYQT5, PYQT4, PYSIDE]\n+for lib in libs:\n+    if lib in sys.modules:\n+        QT_ENV = lib\n+        if lib == PYQT4:\n+            check_pyqt4_api()\n+            set_pyqt4_api()\n+        break\n+else:\n+    for lib in libs:\n+        if lib == PYQT4:\n+            # Have to set pyqt API v2 before importing PyQt4:\n+            set_pyqt4_api()\n+        try:\n+            __import__(lib)\n+            QT_ENV = lib\n+            break\n+        except ImportError:\n+            pass\n+\n+if QT_ENV is None:\n+    raise Exception(\"No Qt Enviroment was detected!\")\n+\n+if QT_ENV == PYQT5:\n+    from PyQt5 import QtGui, QtCore, QtWidgets\n+else:\n+    if QT_ENV == PYQT4:\n+        from PyQt4 import QtGui, QtCore\n+\n+    elif QT_ENV == PYSIDE:\n+        from PySide import QtGui, QtCore\n+        import PySide\n+        QtCore.QT_VERSION_STR = PySide.QtCore.__version__\n+        QtCore.PYQT_VERSION_STR = PySide.__version__\n+\n+    # Allow the methods that have been renamed in Qt5 to be accessed by their\n+    # Qt5 names:\n+    QtGui.QHeaderView.setSectionsMovable = QtGui.QHeaderView.setMovable\n+    QtGui.QHeaderView.setSectionsClickable = QtGui.QHeaderView.setClickable\n+    QtGui.QHeaderView.setSectionResizeMode = QtGui.QHeaderView.setResizeMode\n+\n+    if QT_ENV == PYQT4:\n+        # Pyside does not have the methods ending in \"-AndFilter\":\n+        QtGui.QFileDialog.getOpenFileName = QtGui.QFileDialog.getOpenFileNameAndFilter\n+        QtGui.QFileDialog.getOpenFileNames = QtGui.QFileDialog.getOpenFileNamesAndFilter\n+        QtGui.QFileDialog.getSaveFileName = QtGui.QFileDialog.getSaveFileNameAndFilter\n+\n+    QtWidgets = QtGui\n+    QtCore.QSortFilterProxyModel = QtGui.QSortFilterProxyModel\n+    QtWidgets.QStyleOptionProgressBar = QtGui.QStyleOptionProgressBarV2\n+    QtWidgets.QStyleOptionTab = QtGui.QStyleOptionTabV3\n+    QtWidgets.QStyleOptionViewItem = QtGui.QStyleOptionViewItemV4\n+    QtCore.qInstallMessageHandler = QtCore.qInstallMsgHandler\n+\n+sys.modules['qtutils.qt.QtGui'] = QtGui\n+sys.modules['qtutils.qt.QtWidgets'] = QtWidgets\n+sys.modules['qtutils.qt.QtCore'] = QtCore\ndiff -r 478e547522b4 -r a43b82aebe8d setup.py\n--- a/setup.py\tMon Sep 07 14:37:22 2015 +1000\n+++ b/setup.py\tThu Aug 10 21:27:19 2017 +0200\n@@ -13,6 +13,7 @@\n import sys\n import os\n \n+BUILD_PYQT5_ICONS_RESOURCE = True\n BUILD_PYQT4_ICONS_RESOURCE = True\n BUILD_PYSIDE_ICONS_RESOURCE = True\n \n@@ -22,8 +23,11 @@\n if 'NO_PYQT4' in sys.argv:\n     BUILD_PYQT4_ICONS_RESOURCE = False\n     sys.argv.remove('NO_PYQT4')\n+if 'NO_PYQT5' in sys.argv:\n+    BUILD_PYQT5_ICONS_RESOURCE = False\n+    sys.argv.remove('NO_PYQT5')\n \n-VERSION = '1.6.1'\n+VERSION = '2.0.0'\n \n # Do the build process for icon resource files, this will only do anything\n # if the files are not already present.  The idea is that someone like me\n@@ -37,6 +41,8 @@\n print('building qt icon resource files ...')\n sys.path.insert(0,'qtutils/icons')\n import _build\n+if BUILD_PYQT5_ICONS_RESOURCE:\n+    _build.pyqt5()\n if BUILD_PYQT4_ICONS_RESOURCE:\n     _build.pyqt4()\n if BUILD_PYSIDE_ICONS_RESOURCE:\n\n```\n", "markup": "markdown", "html": "<p>OK, so here is a diff so far with whitespace ignored for easier review (<code>hg diff -wB -r 113 -r 136</code>). I'll update this comment after any future commits to this pull request.</p>\n<p>Because this diff ignores whitespace changes, I can see at least one line in the diff that looks like it has incorrect indentation - but the actual file is fine and has the correct indentation, just FYI.</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/UiLoader.py</span>\n<span class=\"gd\">--- a/qtutils/UiLoader.py   Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/UiLoader.py   Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -14,6 +14,8 @@</span>\n\n from __future__ import print_function\n import sys\n<span class=\"gi\">+import qtutils.qt</span>\n<span class=\"gi\">+</span>\n\n class UiLoaderPromotionException(Exception):\n     pass\n<span class=\"gu\">@@ -21,7 +23,8 @@</span>\n class UiLoaderUnknownWidgetException(Exception):\n     pass\n\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules.copy():</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+if qtutils.qt.QT_ENV == qtutils.qt.PYSIDE:</span>\n     from PySide.QtUiTools import QUiLoader\n\n     class UiLoader(QUiLoader):\n<span class=\"gu\">@@ -91,7 +94,10 @@</span>\n\n else:\n     from types import ModuleType\n<span class=\"gi\">+    if qtutils.qt.QT_ENV == qtutils.qt.PYQT4:</span>\n     from PyQt4 import uic\n<span class=\"gi\">+    elif qtutils.qt.QT_ENV == qtutils.qt.PYQT5:</span>\n<span class=\"gi\">+        from PyQt5 import uic</span>\n\n     class UiLoader(object):\n         def __init__(self):\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/__init__.py</span>\n<span class=\"gd\">--- a/qtutils/__init__.py   Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/__init__.py   Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -20,22 +20,9 @@</span>\n     # Version file has not been autogenerated from build process:\n     __version__ = None\n\n<span class=\"gd\">-import sys</span>\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules.copy():   </span>\n<span class=\"gd\">-    from PySide.QtCore import qInstallMsgHandler </span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import qInstallMsgHandler </span>\n<span class=\"gi\">+from qtutils.qt.QtCore import qInstallMessageHandler</span>\n<span class=\"gi\">+from qtutils.locking import qtlock</span>\n\n<span class=\"gd\">-def _message_handler(type, message):</span>\n<span class=\"gd\">-    &quot;&quot;&quot;Handle qt warnings etc with an exception, so they don&#39;t pass</span>\n<span class=\"gd\">-    unnoticed&quot;&quot;&quot;</span>\n<span class=\"gd\">-    print(&#39;%s: %s&#39;%(type,message))</span>\n<span class=\"gd\">-    #raise Exception(&#39;%s: %s&#39;%(type,message))</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-qInstallMsgHandler(_message_handler)</span>\n<span class=\"gd\">-del qInstallMsgHandler</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-from qtutils.locking import qtlock</span>\n qtlock.enforce()\n\n from qtutils.invoke_in_main import inmain, inmain_later, inthread, inmain_decorator\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/auto_scroll_to_end.py</span>\n<span class=\"gd\">--- a/qtutils/auto_scroll_to_end.py Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/auto_scroll_to_end.py Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -1,14 +1,10 @@</span>\n from __future__ import print_function\n import sys\n<span class=\"gd\">-import threading</span>\n import weakref\n\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules:</span>\n<span class=\"gd\">-    from PySide.QtCore import *</span>\n<span class=\"gd\">-    from PySide.QtGui import *</span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import *</span>\n<span class=\"gd\">-    from PyQt4.QtGui import *</span>\n<span class=\"gi\">+from qtutils.qt.QtCore import *</span>\n<span class=\"gi\">+from qtutils.qt.QtGui import *</span>\n<span class=\"gi\">+from qtutils.qt.QtWidgets import *</span>\n\n # These are weakref dictionarys so that we do not hold references\n # to the scrollbars after nobody else does:\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/disconnect_contextmanager.py</span>\n<span class=\"gd\">--- a/qtutils/disconnect_contextmanager.py  Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/disconnect_contextmanager.py  Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -14,11 +14,6 @@</span>\n\n from __future__ import print_function\n\n<span class=\"gd\">-import sys</span>\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules:</span>\n<span class=\"gd\">-    from PySide.QtCore import *</span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import *</span>\n\n class DisconnectContextManager(object):\n     def __init__(self, signal, slot):\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/icons/__init__.py</span>\n<span class=\"gd\">--- a/qtutils/icons/__init__.py Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/icons/__init__.py Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -1,5 +1,7 @@</span>\n<span class=\"gd\">-import sys</span>\n<span class=\"gd\">-if &#39;Pyside&#39; in sys.modules:</span>\n<span class=\"gi\">+import qtutils.qt</span>\n<span class=\"gi\">+if qtutils.qt.QT_ENV == qtutils.qt.PYSIDE:</span>\n     import qtutils.icons._icons_pyside\n<span class=\"gd\">-else:</span>\n<span class=\"gi\">+elif qtutils.qt.QT_ENV == qtutils.qt.PYQT4:</span>\n     import qtutils.icons._icons_pyqt4\n<span class=\"gi\">+elif qtutils.qt.QT_ENV == qtutils.qt.PYQT5:</span>\n<span class=\"gi\">+    import qtutils.icons._icons_pyqt5</span>\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/icons/_build.py</span>\n<span class=\"gd\">--- a/qtutils/icons/_build.py   Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/icons/_build.py   Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -3,6 +3,7 @@</span>\n\n this_folder = os.path.dirname(os.path.realpath(__file__))\n qrc_filename = os.path.join(this_folder, &#39;icons.qrc&#39;)\n<span class=\"gi\">+py_filename_pyqt5 = os.path.join(this_folder, &#39;_icons_pyqt5.py&#39;)</span>\n py_filename_pyqt4 = os.path.join(this_folder, &#39;_icons_pyqt4.py&#39;)\n py_filename_pyside = os.path.join(this_folder, &#39;_icons_pyside.py&#39;)\n icon_folders = [&#39;custom&#39;, &#39;fugue&#39;]\n<span class=\"gu\">@@ -19,6 +20,36 @@</span>\n                 outfile.write(line_format_string%relative_path)      \n         outfile.write(footer)\n\n<span class=\"gi\">+</span>\n<span class=\"gi\">+def find_pyrcc5():</span>\n<span class=\"gi\">+    import PyQt5</span>\n<span class=\"gi\">+    # If we&#39;re on Windows, it&#39;s probably in the pyqt4 directory:</span>\n<span class=\"gi\">+    if os.name == &#39;nt&#39;:</span>\n<span class=\"gi\">+        pyqt5_dir = os.path.abspath(os.path.dirname(PyQt5.__file__))</span>\n<span class=\"gi\">+        pyrcc5 = os.path.join(pyqt5_dir, &#39;pyrcc5.exe&#39;)</span>\n<span class=\"gi\">+        if os.path.exists(pyrcc5):</span>\n<span class=\"gi\">+            return pyrcc5</span>\n<span class=\"gi\">+    # Otherwise, or if it was not found there, check if it&#39;s in the PATH:</span>\n<span class=\"gi\">+    pyrcc5 = &#39;pyrcc5&#39;</span>\n<span class=\"gi\">+    try:</span>\n<span class=\"gi\">+        subprocess.call([pyrcc5], stdout=open(os.devnull), stderr=open(os.devnull))</span>\n<span class=\"gi\">+        return pyrcc5</span>\n<span class=\"gi\">+    except OSError:</span>\n<span class=\"gi\">+        # Still no?</span>\n<span class=\"gi\">+        msg = &quot;&quot;&quot;</span>\n<span class=\"gi\">+                Cannot find pyrcc5, the PyQt5 utility for building resource</span>\n<span class=\"gi\">+                files. This module was configured to find it in the PyQt5</span>\n<span class=\"gi\">+                directory on Windows, which is where it is for the Anaconda</span>\n<span class=\"gi\">+                Python distribution. This module should also find pyrcc5 if it</span>\n<span class=\"gi\">+                in in the PATH, on any OS. Please find pyrcc5 and put it in your</span>\n<span class=\"gi\">+                PATH. On Debian based systems it is available in the pyqt5-dev-</span>\n<span class=\"gi\">+                tools package. If you want to install qtutils without PyQt5</span>\n<span class=\"gi\">+                support, simply run:</span>\n<span class=\"gi\">+                python setup.py install NO_PYQT5&quot;&quot;&quot;</span>\n<span class=\"gi\">+        import textwrap</span>\n<span class=\"gi\">+        raise OSError(textwrap.dedent(msg).strip())</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n def find_pyrcc4():\n     import PyQt4\n     # If we&#39;re on Windows, it&#39;s probably in the pyqt4 directory:\n<span class=\"gu\">@@ -75,6 +106,15 @@</span>\n         import textwrap\n         raise OSError(textwrap.dedent(msg).strip())\n\n<span class=\"gi\">+</span>\n<span class=\"gi\">+def make_py_file_pyqt5():</span>\n<span class=\"gi\">+    pyrcc5 = find_pyrcc5()</span>\n<span class=\"gi\">+    child = subprocess.Popen([pyrcc5, &#39;-o&#39;, py_filename_pyqt5, qrc_filename])</span>\n<span class=\"gi\">+    stdoutdata, stderrdata = child.communicate()</span>\n<span class=\"gi\">+    if child.returncode != 0:</span>\n<span class=\"gi\">+        raise OSError(stderrdata)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n def make_py_file_pyqt4():\n     pyrcc4 = find_pyrcc4()\n     child = subprocess.Popen([pyrcc4, &#39;-py3&#39;, &#39;-o&#39;, py_filename_pyqt4, qrc_filename])\n<span class=\"gu\">@@ -89,6 +129,12 @@</span>\n     if child.returncode != 0:\n         raise OSError(stderrdata)\n\n<span class=\"gi\">+</span>\n<span class=\"gi\">+def pyqt5():</span>\n<span class=\"gi\">+    if not os.path.exists(py_filename_pyqt5):</span>\n<span class=\"gi\">+        make_py_file_pyqt5()</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n def pyqt4():\n     if not os.path.exists(py_filename_pyqt4):    \n         make_py_file_pyqt4()\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/invoke_in_main.py</span>\n<span class=\"gd\">--- a/qtutils/invoke_in_main.py Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/invoke_in_main.py Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -24,10 +24,7 @@</span>\n import threading\n import functools\n\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules.copy():</span>\n<span class=\"gd\">-    from PySide.QtCore import *</span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import *</span>\n<span class=\"gi\">+from qtutils.qt.QtCore import *</span>\n\n\n class CallEvent(QEvent):\n<span class=\"gu\">@@ -122,7 +119,7 @@</span>\n\n     def loop(index):\n         if index &lt; 3:\n<span class=\"gd\">-            thread = inthread(loop, index+1)</span>\n<span class=\"gi\">+            inthread(loop, index + 1)</span>\n         while True:\n             # print(&#39;MyThread-%d: %s&#39;%(index,str(QThread.currentThread())))\n             # print(&#39;MyThread-%d: %s&#39;%(index,threading.current_thread().name))\n<span class=\"gu\">@@ -147,7 +144,6 @@</span>\n     signal.signal(signal.SIGINT, sigint_handler)\n\n     thread = inthread(loop, 1)\n<span class=\"gd\">-    x = lambda: inmain(myFunction2)</span>\n<span class=\"gd\">-    timer = QTimer.singleShot(0,x)</span>\n<span class=\"gi\">+    timer = QTimer.singleShot(0, lambda: inmain(myFunction2))</span>\n     qapplication.exec_()\n\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/locking.py</span>\n<span class=\"gd\">--- a/qtutils/locking.py    Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/locking.py    Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -14,12 +14,9 @@</span>\n\n from __future__ import print_function\n import threading\n<span class=\"gd\">-import sys</span>\n\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules.copy():</span>\n<span class=\"gd\">-    from PySide.QtCore import *</span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import *</span>\n<span class=\"gi\">+from qtutils.qt.QtCore import *</span>\n<span class=\"gi\">+</span>\n\n class BlockEvent(QEvent):\n     &quot;&quot;&quot;An event requesting the mainloop to be blocked until further notice.&quot;&quot;&quot;\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/outputbox.py</span>\n<span class=\"gd\">--- a/qtutils/outputbox.py  Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/outputbox.py  Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -14,14 +14,10 @@</span>\n\n from __future__ import print_function\n import threading\n<span class=\"gd\">-import sys</span>\n\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules:</span>\n<span class=\"gd\">-    from PySide.QtCore import *</span>\n<span class=\"gd\">-    from PySide.QtGui import *</span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import *</span>\n<span class=\"gd\">-    from PyQt4.QtGui import *</span>\n<span class=\"gi\">+from qtutils.qt.QtCore import *</span>\n<span class=\"gi\">+from qtutils.qt.QtGui import *</span>\n<span class=\"gi\">+from qtutils.qt.QtWidgets import *</span>\n\n import zmq\n from qtutils.auto_scroll_to_end import set_auto_scroll_to_end\n<span class=\"gu\">@@ -186,7 +182,7 @@</span>\n         output_box.output(&#39;More red.\\n&#39;, True)\n         output_box.output(&#39;The \\&quot;quick white fox\\&quot; jumped over the \\&#39;lazy\\&#39; dog\\n&#39;)\n         output_box.output(&#39;&lt;The quick red fox jumped over the lazy dog&gt;\\n&#39;, True)\n<span class=\"gd\">-        output_box.output(&#39;Der schnelle braune Fuchs hat \\xc3\\xbcber den faulen Hund gesprungen\\n&#39;.decode(&#39;utf8&#39;), True)</span>\n<span class=\"gi\">+        output_box.output(&#39;Der schnelle braune Fuchs ist \\xc3\\xbcber den faulen Hund gesprungen\\n&#39;.decode(&#39;utf8&#39;), True)</span>\n\n     def button_pushed(*args, **kwargs):\n         import random\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/qsettings_wrapper.py</span>\n<span class=\"gd\">--- a/qtutils/qsettings_wrapper.py  Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/qtutils/qsettings_wrapper.py  Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -13,13 +13,8 @@</span>\n #####################################################################\n\n from __future__ import print_function\n<span class=\"gd\">-import sys</span>\n<span class=\"gd\">-if &#39;PySide&#39; in sys.modules:</span>\n<span class=\"gd\">-    from PySide.QtCore import QSettings</span>\n<span class=\"gd\">-    QVariant = None</span>\n<span class=\"gd\">-else:</span>\n<span class=\"gd\">-    from PyQt4.QtCore import QSettings</span>\n<span class=\"gd\">-    from PyQt4.QtCore import QVariant</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+from qtutils.qt.QtCore import QSettings</span>\n\n import ast\n\n<span class=\"gu\">@@ -52,8 +47,6 @@</span>\n     @inmain_decorator()\n     def _get(self, name):\n         valrepr = self._qsettings.value(name)\n<span class=\"gd\">-        if QVariant is not None and isinstance(valrepr, QVariant):</span>\n<span class=\"gd\">-            valrepr = str(valrepr.toString())</span>\n         return ast.literal_eval(valrepr)\n\n     @inmain_decorator()\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d qtutils/qt.py</span>\n<span class=\"gd\">--- /dev/null   Thu Jan 01 00:00:00 1970 +0000</span>\n<span class=\"gi\">+++ b/qtutils/qt.py Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -0,0 +1,114 @@</span>\n<span class=\"gi\">+#####################################################################</span>\n<span class=\"gi\">+#                                                                   #</span>\n<span class=\"gi\">+# qt.py                                                             #</span>\n<span class=\"gi\">+#                                                                   #</span>\n<span class=\"gi\">+# Copyright 2017, Jan Werkmann                                      #</span>\n<span class=\"gi\">+#                                                                   #</span>\n<span class=\"gi\">+# This file is part of the qtutils project                          #</span>\n<span class=\"gi\">+# (see #!/philipstarkey/qtutils )                #</span>\n<span class=\"gi\">+# and is licensed under the 2-clause, or 3-clause, BSD License.     #</span>\n<span class=\"gi\">+# See the license.txt file in the root of the project               #</span>\n<span class=\"gi\">+# for the full license.                                             #</span>\n<span class=\"gi\">+#                                                                   #</span>\n<span class=\"gi\">+# The purpose of this wrapper is to provide a abstraction layer     #</span>\n<span class=\"gi\">+# around the different versions of QtGui, QtCore and QtWidgets.     #</span>\n<span class=\"gi\">+# The warpper is supposed to act like PyQt5, but might need         #</span>\n<span class=\"gi\">+# addition in some cases.                                           #</span>\n<span class=\"gi\">+#####################################################################</span>\n<span class=\"gi\">+import sys</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+PYSIDE = &#39;PySide&#39;</span>\n<span class=\"gi\">+PYQT4 = &#39;PyQt4&#39;</span>\n<span class=\"gi\">+PYQT5 = &#39;PyQt5&#39;</span>\n<span class=\"gi\">+QT_ENV = None</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+def set_pyqt4_api():</span>\n<span class=\"gi\">+    import sip</span>\n<span class=\"gi\">+    # This must be done before importing PyQt4:</span>\n<span class=\"gi\">+    API_NAMES = [&quot;QDate&quot;, &quot;QDateTime&quot;, &quot;QString&quot;, &quot;QTextStream&quot;, &quot;QTime&quot;, &quot;QUrl&quot;, &quot;QVariant&quot;]</span>\n<span class=\"gi\">+    API_VERSION = 2</span>\n<span class=\"gi\">+    for name in API_NAMES:</span>\n<span class=\"gi\">+        try:</span>\n<span class=\"gi\">+            sip.setapi(name, API_VERSION)</span>\n<span class=\"gi\">+        except ValueError:</span>\n<span class=\"gi\">+            pass</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+def check_pyqt4_api():</span>\n<span class=\"gi\">+    &quot;&quot;&quot;If PyQt4 was already imported before we got a chance to set API version</span>\n<span class=\"gi\">+    2, ensure the API versions are either not set, or set to version 2.</span>\n<span class=\"gi\">+    Otherwise confusing errors may occur later - better to catch this now&quot;&quot;&quot;</span>\n<span class=\"gi\">+    import sip</span>\n<span class=\"gi\">+    API_NAMES = [&quot;QDate&quot;, &quot;QDateTime&quot;, &quot;QString&quot;, &quot;QTextStream&quot;, &quot;QTime&quot;, &quot;QUrl&quot;, &quot;QVariant&quot;]</span>\n<span class=\"gi\">+    API_VERSION = 2</span>\n<span class=\"gi\">+    for name in API_NAMES:</span>\n<span class=\"gi\">+        try:</span>\n<span class=\"gi\">+            if sip.getapi(name) != API_VERSION:</span>\n<span class=\"gi\">+                msg = (&quot;qtutils is only compatible with version 2 of the  PyQt4 API.&quot; +</span>\n<span class=\"gi\">+                       &quot;Whilst you can import PyQt4 prior to importing qtutils (in order to tell qtutils &quot; +</span>\n<span class=\"gi\">+                       &quot;to use PyQt4), either set the API version to 2 yourself, or import qtutils &quot; +</span>\n<span class=\"gi\">+                       &quot;(which will set it for you) prior to importing QtGui or QtCore.&quot;)</span>\n<span class=\"gi\">+                raise RuntimeError(msg)</span>\n<span class=\"gi\">+        except ValueError:</span>\n<span class=\"gi\">+            # API version not set yet.</span>\n<span class=\"gi\">+            pass</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+libs = [PYQT5, PYQT4, PYSIDE]</span>\n<span class=\"gi\">+for lib in libs:</span>\n<span class=\"gi\">+    if lib in sys.modules:</span>\n<span class=\"gi\">+        QT_ENV = lib</span>\n<span class=\"gi\">+        if lib == PYQT4:</span>\n<span class=\"gi\">+            check_pyqt4_api()</span>\n<span class=\"gi\">+            set_pyqt4_api()</span>\n<span class=\"gi\">+        break</span>\n<span class=\"gi\">+else:</span>\n<span class=\"gi\">+    for lib in libs:</span>\n<span class=\"gi\">+        if lib == PYQT4:</span>\n<span class=\"gi\">+            # Have to set pyqt API v2 before importing PyQt4:</span>\n<span class=\"gi\">+            set_pyqt4_api()</span>\n<span class=\"gi\">+        try:</span>\n<span class=\"gi\">+            __import__(lib)</span>\n<span class=\"gi\">+            QT_ENV = lib</span>\n<span class=\"gi\">+            break</span>\n<span class=\"gi\">+        except ImportError:</span>\n<span class=\"gi\">+            pass</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+if QT_ENV is None:</span>\n<span class=\"gi\">+    raise Exception(&quot;No Qt Enviroment was detected!&quot;)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+if QT_ENV == PYQT5:</span>\n<span class=\"gi\">+    from PyQt5 import QtGui, QtCore, QtWidgets</span>\n<span class=\"gi\">+else:</span>\n<span class=\"gi\">+    if QT_ENV == PYQT4:</span>\n<span class=\"gi\">+        from PyQt4 import QtGui, QtCore</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    elif QT_ENV == PYSIDE:</span>\n<span class=\"gi\">+        from PySide import QtGui, QtCore</span>\n<span class=\"gi\">+        import PySide</span>\n<span class=\"gi\">+        QtCore.QT_VERSION_STR = PySide.QtCore.__version__</span>\n<span class=\"gi\">+        QtCore.PYQT_VERSION_STR = PySide.__version__</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    # Allow the methods that have been renamed in Qt5 to be accessed by their</span>\n<span class=\"gi\">+    # Qt5 names:</span>\n<span class=\"gi\">+    QtGui.QHeaderView.setSectionsMovable = QtGui.QHeaderView.setMovable</span>\n<span class=\"gi\">+    QtGui.QHeaderView.setSectionsClickable = QtGui.QHeaderView.setClickable</span>\n<span class=\"gi\">+    QtGui.QHeaderView.setSectionResizeMode = QtGui.QHeaderView.setResizeMode</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    if QT_ENV == PYQT4:</span>\n<span class=\"gi\">+        # Pyside does not have the methods ending in &quot;-AndFilter&quot;:</span>\n<span class=\"gi\">+        QtGui.QFileDialog.getOpenFileName = QtGui.QFileDialog.getOpenFileNameAndFilter</span>\n<span class=\"gi\">+        QtGui.QFileDialog.getOpenFileNames = QtGui.QFileDialog.getOpenFileNamesAndFilter</span>\n<span class=\"gi\">+        QtGui.QFileDialog.getSaveFileName = QtGui.QFileDialog.getSaveFileNameAndFilter</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+    QtWidgets = QtGui</span>\n<span class=\"gi\">+    QtCore.QSortFilterProxyModel = QtGui.QSortFilterProxyModel</span>\n<span class=\"gi\">+    QtWidgets.QStyleOptionProgressBar = QtGui.QStyleOptionProgressBarV2</span>\n<span class=\"gi\">+    QtWidgets.QStyleOptionTab = QtGui.QStyleOptionTabV3</span>\n<span class=\"gi\">+    QtWidgets.QStyleOptionViewItem = QtGui.QStyleOptionViewItemV4</span>\n<span class=\"gi\">+    QtCore.qInstallMessageHandler = QtCore.qInstallMsgHandler</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+sys.modules[&#39;qtutils.qt.QtGui&#39;] = QtGui</span>\n<span class=\"gi\">+sys.modules[&#39;qtutils.qt.QtWidgets&#39;] = QtWidgets</span>\n<span class=\"gi\">+sys.modules[&#39;qtutils.qt.QtCore&#39;] = QtCore</span>\n<span class=\"gh\">diff -r 478e547522b4 -r a43b82aebe8d setup.py</span>\n<span class=\"gd\">--- a/setup.py  Mon Sep 07 14:37:22 2015 +1000</span>\n<span class=\"gi\">+++ b/setup.py  Thu Aug 10 21:27:19 2017 +0200</span>\n<span class=\"gu\">@@ -13,6 +13,7 @@</span>\n import sys\n import os\n\n<span class=\"gi\">+BUILD_PYQT5_ICONS_RESOURCE = True</span>\n BUILD_PYQT4_ICONS_RESOURCE = True\n BUILD_PYSIDE_ICONS_RESOURCE = True\n\n<span class=\"gu\">@@ -22,8 +23,11 @@</span>\n if &#39;NO_PYQT4&#39; in sys.argv:\n     BUILD_PYQT4_ICONS_RESOURCE = False\n     sys.argv.remove(&#39;NO_PYQT4&#39;)\n<span class=\"gi\">+if &#39;NO_PYQT5&#39; in sys.argv:</span>\n<span class=\"gi\">+    BUILD_PYQT5_ICONS_RESOURCE = False</span>\n<span class=\"gi\">+    sys.argv.remove(&#39;NO_PYQT5&#39;)</span>\n\n<span class=\"gd\">-VERSION = &#39;1.6.1&#39;</span>\n<span class=\"gi\">+VERSION = &#39;2.0.0&#39;</span>\n\n # Do the build process for icon resource files, this will only do anything\n # if the files are not already present.  The idea is that someone like me\n<span class=\"gu\">@@ -37,6 +41,8 @@</span>\n print(&#39;building qt icon resource files ...&#39;)\n sys.path.insert(0,&#39;qtutils/icons&#39;)\n import _build\n<span class=\"gi\">+if BUILD_PYQT5_ICONS_RESOURCE:</span>\n<span class=\"gi\">+    _build.pyqt5()</span>\n if BUILD_PYQT4_ICONS_RESOURCE:\n     _build.pyqt4()\n if BUILD_PYSIDE_ICONS_RESOURCE:\n</pre></div>", "type": "rendered"}, "created_on": "2017-07-23T01:55:33.570347+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-10T20:52:26.823653+00:00", "type": "pullrequest_comment", "id": 41297860}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42607647.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42607647"}}, "parent": {"id": 42607530, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42607530.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42607530"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "I'll upload the package shortly", "markup": "markdown", "html": "<p>I'll upload the package shortly</p>", "type": "rendered"}, "created_on": "2017-08-10T19:29:48.152026+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-10T19:29:48.154305+00:00", "type": "pullrequest_comment", "id": 42607647}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42607530.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42607530"}}, "parent": {"id": 42605597, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42605597.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42605597"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "I applied the changes.", "markup": "markdown", "html": "<p>I applied the changes.</p>", "type": "rendered"}, "created_on": "2017-08-10T19:28:07.918404+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-10T19:28:07.958024+00:00", "type": "pullrequest_comment", "id": 42607530}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"update": {"description": "* PEP8 formating\r\n\r\n* PyQt5 imports\r\n\r\n* german grammer fix :P\r\n\r\n* Qt abstraction wrapper\r\n\r\n* PyQt4 API v2\r\n\r\nMost of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\r\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.", "title": "PyQt5", "destination": {"commit": {"hash": "478e547522b4", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/478e547522b4.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/478e547522b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a43b82aebe8d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/a43b82aebe8d"}, "html": {"href": "#!/PhyNerd/qtutils/commits/a43b82aebe8d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-08-10T19:27:24.936947+00:00"}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42605442.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42605442"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "I am inclined to suggest some changes before merging. \n\nDespite it being my suggestion, the deprecation errors on the patched attributes should probably be removed. This is because we use other libraries that use Qt, and our patches could interfere with them. Patching *on* an extra attribute is relatively harmless, but *removing* one is less so. We rely on both matplotlib and PyQtGraph, and I had forgotten that we imported other qt-using code that we do not necessarily have control over. [qtpy has come to the same conclusion](https://github.com/spyder-ide/qtpy/pull/120).\n\nIn fact, so far PyQtGraph takes the opposite approach - their shim applies monkeypatches that make PyQt5 look like PyQt4 instead of the other way around. So PyQtGraph is definitely making method calls that rely on PyQt4 names that have been removed in Qt5, and we could easily tread on its toes if we remove them.\n\nSo we should delete the _patch function, and just add the methods the simple way.\n\nAlso, we should ditch the message handler as mentioned. So the patch for these changes is:\n\n\n```\n#!diff\n\ndiff -r 573a45834c56 qtutils/__init__.py\n--- a/qtutils/__init__.py\tThu Aug 10 08:42:27 2017 +0200\n+++ b/qtutils/__init__.py\tThu Aug 10 14:53:44 2017 -0400\n@@ -23,17 +23,6 @@\n from qtutils.qt.QtCore import qInstallMessageHandler\n from qtutils.locking import qtlock\n \n-\n-def _message_handler(type, message):\n-    \"\"\"Handle qt warnings etc with an exception, so they don't pass\n-    unnoticed\"\"\"\n-    print('%s: %s' % (type, message))\n-    # raise Exception('%s: %s'%(type,message))\n-\n-\n-qInstallMessageHandler(_message_handler)\n-del qInstallMessageHandler\n-\n qtlock.enforce()\n \n from qtutils.invoke_in_main import inmain, inmain_later, inthread, inmain_decorator\ndiff -r 573a45834c56 qtutils/qt.py\n--- a/qtutils/qt.py\tThu Aug 10 08:42:27 2017 +0200\n+++ b/qtutils/qt.py\tThu Aug 10 14:53:44 2017 -0400\n@@ -90,35 +90,17 @@\n         QtCore.QT_VERSION_STR = PySide.QtCore.__version__\n         QtCore.PYQT_VERSION_STR = PySide.__version__\n \n-\n-    def _patch(cls, qt5_method_name, qt4_method_name):\n-        \"\"\"In Qt 4, alias the qt5 method names to point to the qt4\n-        equivalents. Replace the qt4 method with one that raises an exception\n-        pointing the user to use the qt5 method name\"\"\"\n-\n-        # Alias the new method name to point to the existing method\n-        setattr(cls, qt5_method_name, cls.__dict__[qt4_method_name])\n-\n-        def deprecation_error(self, *args, **kwargs):\n-            msg = (\"{}.{} has been renamed to \".format(cls.__name__, qt4_method_name) +\n-                   \"{}.{} in qt5.\".format(cls.__name__, qt5_method_name) +\n-                   \"qtutils requires you use the new method names even in qt4 \" +\n-                   \" (they are aliased to point to the existing methods) so that code works \" +\n-                   \"with both qt4 and qt5\")\n-            raise NameError(msg)\n-\n-        # Accesing the existing method by name will raise an error:\n-        setattr(cls, qt4_method_name, deprecation_error)\n-\n-    _patch(QtGui.QHeaderView, \"setSectionsMovable\", \"setMovable\")\n-    _patch(QtGui.QHeaderView, \"setSectionsClickable\", \"setClickable\")\n-    _patch(QtGui.QHeaderView, \"setSectionResizeMode\", \"setResizeMode\")\n+    # Allow the methods that have been renamed in Qt5 to be accessed by their\n+    # Qt5 names:\n+    QtGui.QHeaderView.setSectionsMovable = QtGui.QHeaderView.setMovable\n+    QtGui.QHeaderView.setSectionsClickable = QtGui.QHeaderView.setClickable\n+    QtGui.QHeaderView.setSectionResizeMode = QtGui.QHeaderView.setResizeMode\n \n     if QT_ENV == PYQT4:\n         # Pyside does not have the methods ending in \"-AndFilter\":\n-        _patch(QtGui.QFileDialog, \"getOpenFileName\", \"getOpenFileNameAndFilter\")\n-        _patch(QtGui.QFileDialog, \"getOpenFileNames\", \"getOpenFileNamesAndFilter\")\n-        _patch(QtGui.QFileDialog, \"getSaveFileName\", \"getSaveFileNameAndFilter\")\n+        QtGui.QFileDialog.getOpenFileName = QtGui.QFileDialog.getOpenFileNameAndFilter\n+        QtGui.QFileDialog.getOpenFileNames = QtGui.QFileDialog.getOpenFileNamesAndFilter\n+        QtGui.QFileDialog.getSaveFileName = QtGui.QFileDialog.getSaveFileNameAndFilter\n \n     QtWidgets = QtGui\n     QtCore.QSortFilterProxyModel = QtGui.QSortFilterProxyModel\n```\n", "markup": "markdown", "html": "<p>I am inclined to suggest some changes before merging. </p>\n<p>Despite it being my suggestion, the deprecation errors on the patched attributes should probably be removed. This is because we use other libraries that use Qt, and our patches could interfere with them. Patching <em>on</em> an extra attribute is relatively harmless, but <em>removing</em> one is less so. We rely on both matplotlib and PyQtGraph, and I had forgotten that we imported other qt-using code that we do not necessarily have control over. <a data-is-external-link=\"true\" href=\"https://github.com/spyder-ide/qtpy/pull/120\" rel=\"nofollow\">qtpy has come to the same conclusion</a>.</p>\n<p>In fact, so far PyQtGraph takes the opposite approach - their shim applies monkeypatches that make PyQt5 look like PyQt4 instead of the other way around. So PyQtGraph is definitely making method calls that rely on PyQt4 names that have been removed in Qt5, and we could easily tread on its toes if we remove them.</p>\n<p>So we should delete the _patch function, and just add the methods the simple way.</p>\n<p>Also, we should ditch the message handler as mentioned. So the patch for these changes is:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r 573a45834c56 qtutils/__init__.py</span>\n<span class=\"gd\">--- a/qtutils/__init__.py   Thu Aug 10 08:42:27 2017 +0200</span>\n<span class=\"gi\">+++ b/qtutils/__init__.py   Thu Aug 10 14:53:44 2017 -0400</span>\n<span class=\"gu\">@@ -23,17 +23,6 @@</span>\n from qtutils.qt.QtCore import qInstallMessageHandler\n from qtutils.locking import qtlock\n\n<span class=\"gd\">-</span>\n<span class=\"gd\">-def _message_handler(type, message):</span>\n<span class=\"gd\">-    &quot;&quot;&quot;Handle qt warnings etc with an exception, so they don&#39;t pass</span>\n<span class=\"gd\">-    unnoticed&quot;&quot;&quot;</span>\n<span class=\"gd\">-    print(&#39;%s: %s&#39; % (type, message))</span>\n<span class=\"gd\">-    # raise Exception(&#39;%s: %s&#39;%(type,message))</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-qInstallMessageHandler(_message_handler)</span>\n<span class=\"gd\">-del qInstallMessageHandler</span>\n<span class=\"gd\">-</span>\n qtlock.enforce()\n\n from qtutils.invoke_in_main import inmain, inmain_later, inthread, inmain_decorator\n<span class=\"gh\">diff -r 573a45834c56 qtutils/qt.py</span>\n<span class=\"gd\">--- a/qtutils/qt.py Thu Aug 10 08:42:27 2017 +0200</span>\n<span class=\"gi\">+++ b/qtutils/qt.py Thu Aug 10 14:53:44 2017 -0400</span>\n<span class=\"gu\">@@ -90,35 +90,17 @@</span>\n         QtCore.QT_VERSION_STR = PySide.QtCore.__version__\n         QtCore.PYQT_VERSION_STR = PySide.__version__\n\n<span class=\"gd\">-</span>\n<span class=\"gd\">-    def _patch(cls, qt5_method_name, qt4_method_name):</span>\n<span class=\"gd\">-        &quot;&quot;&quot;In Qt 4, alias the qt5 method names to point to the qt4</span>\n<span class=\"gd\">-        equivalents. Replace the qt4 method with one that raises an exception</span>\n<span class=\"gd\">-        pointing the user to use the qt5 method name&quot;&quot;&quot;</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-        # Alias the new method name to point to the existing method</span>\n<span class=\"gd\">-        setattr(cls, qt5_method_name, cls.__dict__[qt4_method_name])</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-        def deprecation_error(self, *args, **kwargs):</span>\n<span class=\"gd\">-            msg = (&quot;{}.{} has been renamed to &quot;.format(cls.__name__, qt4_method_name) +</span>\n<span class=\"gd\">-                   &quot;{}.{} in qt5.&quot;.format(cls.__name__, qt5_method_name) +</span>\n<span class=\"gd\">-                   &quot;qtutils requires you use the new method names even in qt4 &quot; +</span>\n<span class=\"gd\">-                   &quot; (they are aliased to point to the existing methods) so that code works &quot; +</span>\n<span class=\"gd\">-                   &quot;with both qt4 and qt5&quot;)</span>\n<span class=\"gd\">-            raise NameError(msg)</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-        # Accesing the existing method by name will raise an error:</span>\n<span class=\"gd\">-        setattr(cls, qt4_method_name, deprecation_error)</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-    _patch(QtGui.QHeaderView, &quot;setSectionsMovable&quot;, &quot;setMovable&quot;)</span>\n<span class=\"gd\">-    _patch(QtGui.QHeaderView, &quot;setSectionsClickable&quot;, &quot;setClickable&quot;)</span>\n<span class=\"gd\">-    _patch(QtGui.QHeaderView, &quot;setSectionResizeMode&quot;, &quot;setResizeMode&quot;)</span>\n<span class=\"gi\">+    # Allow the methods that have been renamed in Qt5 to be accessed by their</span>\n<span class=\"gi\">+    # Qt5 names:</span>\n<span class=\"gi\">+    QtGui.QHeaderView.setSectionsMovable = QtGui.QHeaderView.setMovable</span>\n<span class=\"gi\">+    QtGui.QHeaderView.setSectionsClickable = QtGui.QHeaderView.setClickable</span>\n<span class=\"gi\">+    QtGui.QHeaderView.setSectionResizeMode = QtGui.QHeaderView.setResizeMode</span>\n\n     if QT_ENV == PYQT4:\n         # Pyside does not have the methods ending in &quot;-AndFilter&quot;:\n<span class=\"gd\">-        _patch(QtGui.QFileDialog, &quot;getOpenFileName&quot;, &quot;getOpenFileNameAndFilter&quot;)</span>\n<span class=\"gd\">-        _patch(QtGui.QFileDialog, &quot;getOpenFileNames&quot;, &quot;getOpenFileNamesAndFilter&quot;)</span>\n<span class=\"gd\">-        _patch(QtGui.QFileDialog, &quot;getSaveFileName&quot;, &quot;getSaveFileNameAndFilter&quot;)</span>\n<span class=\"gi\">+        QtGui.QFileDialog.getOpenFileName = QtGui.QFileDialog.getOpenFileNameAndFilter</span>\n<span class=\"gi\">+        QtGui.QFileDialog.getOpenFileNames = QtGui.QFileDialog.getOpenFileNamesAndFilter</span>\n<span class=\"gi\">+        QtGui.QFileDialog.getSaveFileName = QtGui.QFileDialog.getSaveFileNameAndFilter</span>\n\n     QtWidgets = QtGui\n     QtCore.QSortFilterProxyModel = QtGui.QSortFilterProxyModel\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-10T18:54:33.336015+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-10T18:59:34.655519+00:00", "type": "pullrequest_comment", "id": 42605442}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42605597.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42605597"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "After these changes I'll upload another built package and update the whitespace-ignoring diff. Phil has indicated they likely will be in a position to deploy in their lab for testing soon.", "markup": "markdown", "html": "<p>After these changes I'll upload another built package and update the whitespace-ignoring diff. Phil has indicated they likely will be in a position to deploy in their lab for testing soon.</p>", "type": "rendered"}, "created_on": "2017-08-10T18:57:18.688709+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-10T18:57:18.691331+00:00", "type": "pullrequest_comment", "id": 42605597}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42589556.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42589556"}}, "parent": {"id": 42541264, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42541264.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42541264"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "it's not too late to add in some mechanism for setting qtutils to use API v1, but it's hard to do in a backward compatible way if we want \"import qtutils.qt\" in a fresh interpreter to be API v2. People using API v1 are mostly doing so by not explicitly setting the API, and we want the default to be API v2, so those two aims are inconsistent.\n\nBackwards compatibility here is hard. Even supporting PyQt4 method calls with patching [may not be reliable](https://github.com/spyder-ide/qtpy/issues/70).\n\nSince qt5 is mostly backward compatible with qt4, I'm starting to wish there was just one PyQt package that went through normal deprecation and feature removal cycles - then we would just get warnings  that code was using deprecated functions, change them one by one and decide on a case by case basis whether to make the patch do a try: except: to keep supporting the old one or not. But, because users upgrading their libraries would be smoother, we'd have little need to support older versions. Just like nobody ever suggested we should support anything but the latest pyqt4 prior to pyqt5 coming out, and just like nobody is suggesting now that we support any pyqt5 other than the latest, or any Python 3 other than the latest. If there's a bug in Qt 5.6, \"upgrade to Qt 5.9\" is considered a reasonable solution. \n\nNow we're left with three or possibly four qt Python wrappers that can't be in the interpreter at the same time, and library code that wants anyone to be able to use it regardless of which wrapper they're using, but which [trips up other code in the interpreter that doesn't know about it](https://github.com/spyder-ide/qtpy/issues/119).\n\nI suppose the break from API 1 to API 2 and the move from QtGui to QtWidgets was sufficiently disruptive to require a major version bump - I hope future changes are less disruptive so that our \"wrapper\" code can revert back to a simple \"if thing in sys.modules import thing, else import preferred thing\".\n\nAnd I've decided against `import *` because not everything starts with `Q`. importing `*` from `QtCore` shadows the builtin `hex()` function (with different behaviour to the builtin)! So importing `*` is not a great way to get around the `QtWidgets`/`QtGui` reshuffle.\n\nSo I don't particularly mind what we do here - I see it as a stop gap, and unlike the Python 2 to 3 transition, very soon nobody is going to be using PyQt4 in extant projects, so our compatibility code helps us ease the transition but afterwards will mostly sit there unused.\n\nHopefully when Qt6 comes around the transition can be done without shim packages. Just like `six` acted as a shim between Python 2 and Python 3, but was mostly made redundant by both Python 2 and Python 3 themselves changing to support the same code running in both using `__future__` imports and the like, hopefully PyQt6 (which is probably not far off, maybe a year or two) will be similar.", "markup": "markdown", "html": "<p>it's not too late to add in some mechanism for setting qtutils to use API v1, but it's hard to do in a backward compatible way if we want \"import qtutils.qt\" in a fresh interpreter to be API v2. People using API v1 are mostly doing so by not explicitly setting the API, and we want the default to be API v2, so those two aims are inconsistent.</p>\n<p>Backwards compatibility here is hard. Even supporting PyQt4 method calls with patching <a data-is-external-link=\"true\" href=\"https://github.com/spyder-ide/qtpy/issues/70\" rel=\"nofollow\">may not be reliable</a>.</p>\n<p>Since qt5 is mostly backward compatible with qt4, I'm starting to wish there was just one PyQt package that went through normal deprecation and feature removal cycles - then we would just get warnings  that code was using deprecated functions, change them one by one and decide on a case by case basis whether to make the patch do a try: except: to keep supporting the old one or not. But, because users upgrading their libraries would be smoother, we'd have little need to support older versions. Just like nobody ever suggested we should support anything but the latest pyqt4 prior to pyqt5 coming out, and just like nobody is suggesting now that we support any pyqt5 other than the latest, or any Python 3 other than the latest. If there's a bug in Qt 5.6, \"upgrade to Qt 5.9\" is considered a reasonable solution. </p>\n<p>Now we're left with three or possibly four qt Python wrappers that can't be in the interpreter at the same time, and library code that wants anyone to be able to use it regardless of which wrapper they're using, but which <a data-is-external-link=\"true\" href=\"https://github.com/spyder-ide/qtpy/issues/119\" rel=\"nofollow\">trips up other code in the interpreter that doesn't know about it</a>.</p>\n<p>I suppose the break from API 1 to API 2 and the move from QtGui to QtWidgets was sufficiently disruptive to require a major version bump - I hope future changes are less disruptive so that our \"wrapper\" code can revert back to a simple \"if thing in sys.modules import thing, else import preferred thing\".</p>\n<p>And I've decided against <code>import *</code> because not everything starts with <code>Q</code>. importing <code>*</code> from <code>QtCore</code> shadows the builtin <code>hex()</code> function (with different behaviour to the builtin)! So importing <code>*</code> is not a great way to get around the <code>QtWidgets</code>/<code>QtGui</code> reshuffle.</p>\n<p>So I don't particularly mind what we do here - I see it as a stop gap, and unlike the Python 2 to 3 transition, very soon nobody is going to be using PyQt4 in extant projects, so our compatibility code helps us ease the transition but afterwards will mostly sit there unused.</p>\n<p>Hopefully when Qt6 comes around the transition can be done without shim packages. Just like <code>six</code> acted as a shim between Python 2 and Python 3, but was mostly made redundant by both Python 2 and Python 3 themselves changing to support the same code running in both using <code>__future__</code> imports and the like, hopefully PyQt6 (which is probably not far off, maybe a year or two) will be similar.</p>", "type": "rendered"}, "created_on": "2017-08-10T15:26:40.549186+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-10T15:26:40.552841+00:00", "type": "pullrequest_comment", "id": 42589556}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42541264.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42541264"}}, "parent": {"id": 42539271, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42539271.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42539271"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Well actually I think I had asked for it to specifically not break backwards compatibility like that, but I think that was before we had decided to do the major version bump anyway. So I guess this is fine.\n\nThere may be people using qtutils outside of labscript people. I've spruiked `invoke_in_main` to quite a few people of stackoverflow (lots of people have software that crashes because they are no thread safe with the GUI!). No idea if anyone decided to use it or not though!", "markup": "markdown", "html": "<p>Well actually I think I had asked for it to specifically not break backwards compatibility like that, but I think that was before we had decided to do the major version bump anyway. So I guess this is fine.</p>\n<p>There may be people using qtutils outside of labscript people. I've spruiked <code>invoke_in_main</code> to quite a few people of stackoverflow (lots of people have software that crashes because they are no thread safe with the GUI!). No idea if anyone decided to use it or not though!</p>", "type": "rendered"}, "created_on": "2017-08-10T07:04:18.165789+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "updated_on": "2017-08-10T07:04:18.227175+00:00", "type": "pullrequest_comment", "id": 42541264}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"update": {"description": "* PEP8 formating\r\n\r\n* PyQt5 imports\r\n\r\n* german grammer fix :P\r\n\r\n* Qt abstraction wrapper\r\n\r\n* PyQt4 API v2\r\n\r\nMost of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\r\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.", "title": "PyQt5", "destination": {"commit": {"hash": "478e547522b4", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/478e547522b4.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/478e547522b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "573a45834c56", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/573a45834c56"}, "html": {"href": "#!/PhyNerd/qtutils/commits/573a45834c56"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-08-10T06:42:43.825791+00:00"}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42539414.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42539414"}}, "parent": {"id": 42539271, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42539271.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42539271"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "OK I'll change it!", "markup": "markdown", "html": "<p>OK I'll change it!</p>", "type": "rendered"}, "created_on": "2017-08-10T06:36:18.895900+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-10T06:36:18.955754+00:00", "type": "pullrequest_comment", "id": 42539414}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42539271.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42539271"}}, "parent": {"id": 42538676, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42538676.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42538676"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "No, I think we're abandoning API V1 support completely, which is a backward incompatible change, but that's why it's a major version bump. It had to happen eventually! It's not worth trying to maintain both.\n\nI don't think qtutils has much of a userbase outside of labscript people, but I'd love to be surprised!", "markup": "markdown", "html": "<p>No, I think we're abandoning API V1 support completely, which is a backward incompatible change, but that's why it's a major version bump. It had to happen eventually! It's not worth trying to maintain both.</p>\n<p>I don't think qtutils has much of a userbase outside of labscript people, but I'd love to be surprised!</p>", "type": "rendered"}, "created_on": "2017-08-10T06:33:40.527401+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-10T06:33:40.529461+00:00", "type": "pullrequest_comment", "id": 42539271}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42538676.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42538676"}}, "parent": {"id": 42534622, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42534622.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42534622"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Sure I can change this but I thought that this behavior was desired, as to not cause problems with APIs for existing code other than labscript?", "markup": "markdown", "html": "<p>Sure I can change this but I thought that this behavior was desired, as to not cause problems with APIs for existing code other than labscript?</p>", "type": "rendered"}, "created_on": "2017-08-10T06:22:48.303794+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-10T06:22:48.380589+00:00", "type": "pullrequest_comment", "id": 42538676}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42534622.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42534622"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "this pull request currently has the following undesired behaviour:\n\n\n```\n#!python\n\n>>> import PyQt4\n>>> import qtutils.qt\n>>> import sip\n>>> print(sip.getapi('QString'))\n1\n```\n\nWhich leaves the PyQt APIs on version 1.\n\nYou can force qtutils to use PyQt4 by importing PyQt4 first (*just* PyQt4 and none of its submodules so as to avoid setting the API version). That's great, otherwise there would be no way to compel qtutils to use PyQt4. \n\nBut unfortunately the API check sees that the API version has not been set to anything, and does not count that as an error. It shouldn't be an error, but it also shouldn't stop qtutils.qt from setting the API still. Also, the error message could be a bit more informative so as to say that it's not PyQt4 you can't import, it's the submodules. \n\nHere's a patch to fix these:\n\n\n```\n#!diff\n\ndiff -r 922abce46329 qtutils/qt.py\n--- a/qtutils/qt.py\tWed Aug 09 23:54:58 2017 +0200\n+++ b/qtutils/qt.py\tThu Aug 10 00:18:28 2017 -0400\n@@ -18,54 +18,61 @@\n import sys\n \n PYSIDE = 'PySide'\n PYQT4 = 'PyQt4'\n PYQT5 = 'PyQt5'\n QT_ENV = None\n \n \n-def set_pyqt4_API2():\n+def set_pyqt4_api():\n     import sip\n     # This must be done before importing PyQt4:\n     API_NAMES = [\"QDate\", \"QDateTime\", \"QString\", \"QTextStream\", \"QTime\", \"QUrl\", \"QVariant\"]\n     API_VERSION = 2\n     for name in API_NAMES:\n         try:\n             sip.setapi(name, API_VERSION)\n         except ValueError:\n             pass\n \n \n def check_pyqt4_api():\n-    \"\"\"If PyQt4 was already imported before we got a chance to set API version 2, ensure the API\n-    versions were already set to version 2. Otherwise confusing errors may occur later - better to catch this now\"\"\"\n+    \"\"\"If PyQt4 was already imported before we got a chance to set API version\n+    2, ensure the API versions are either not set, or set to version 2.\n+    Otherwise confusing errors may occur later - better to catch this now\"\"\"\n     import sip\n     API_NAMES = [\"QDate\", \"QDateTime\", \"QString\", \"QTextStream\", \"QTime\", \"QUrl\", \"QVariant\"]\n     API_VERSION = 2\n     for name in API_NAMES:\n         try:\n             if sip.getapi(name) != API_VERSION:\n-                raise RuntimeError(\"qtutils only compatible with version 2 of the  PYQt4 API. Either set the API to version 2 before importing PyQt4, or import qtutils first, which will set it for you\")\n+                msg = (\"qtutils is only compatible with version 2 of the  PyQt4 API.\" +\n+                       \"Whilst you can import PyQt4 prior to importing qtutils (in order to tell qtutils \" +\n+                       \"to use PyQt4), either set the API version to 2 yourself, or import qtutils \" +\n+                       \"(which will set it for you) prior to importing QtGui or QtCore.\")\n+                raise RuntimeError(msg)\n         except ValueError:\n+            # API version not set yet.\n             pass\n \n \n libs = [PYQT5, PYQT4, PYSIDE]\n for lib in libs:\n     if lib in sys.modules:\n         QT_ENV = lib\n         if lib == PYQT4:\n             check_pyqt4_api()\n+            set_pyqt4_api()\n         break\n else:\n     for lib in libs:\n         if lib == PYQT4:\n             # Have to set pyqt API v2 before importing PyQt4:\n-            set_pyqt4_API2()\n+            set_pyqt4_api()\n         try:\n             __import__(lib)\n             QT_ENV = lib\n             break\n         except ImportError:\n             pass\n \n if QT_ENV is None:\n\n```\nResulting in:\n\n```\n#!python\n\n>>> import PyQt4\n>>> import qtutils.qt\n>>> import sip\n>>> print(sip.getapi('QString'))\n2\n```", "markup": "markdown", "html": "<p>this pull request currently has the following undesired behaviour:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">PyQt4</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">qtutils.qt</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">sip</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sip</span><span class=\"o\">.</span><span class=\"n\">getapi</span><span class=\"p\">(</span><span class=\"s1\">&#39;QString&#39;</span><span class=\"p\">))</span>\n<span class=\"mi\">1</span>\n</pre></div>\n\n\n<p>Which leaves the PyQt APIs on version 1.</p>\n<p>You can force qtutils to use PyQt4 by importing PyQt4 first (<em>just</em> PyQt4 and none of its submodules so as to avoid setting the API version). That's great, otherwise there would be no way to compel qtutils to use PyQt4. </p>\n<p>But unfortunately the API check sees that the API version has not been set to anything, and does not count that as an error. It shouldn't be an error, but it also shouldn't stop qtutils.qt from setting the API still. Also, the error message could be a bit more informative so as to say that it's not PyQt4 you can't import, it's the submodules. </p>\n<p>Here's a patch to fix these:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r 922abce46329 qtutils/qt.py</span>\n<span class=\"gd\">--- a/qtutils/qt.py Wed Aug 09 23:54:58 2017 +0200</span>\n<span class=\"gi\">+++ b/qtutils/qt.py Thu Aug 10 00:18:28 2017 -0400</span>\n<span class=\"gu\">@@ -18,54 +18,61 @@</span>\n import sys\n\n PYSIDE = &#39;PySide&#39;\n PYQT4 = &#39;PyQt4&#39;\n PYQT5 = &#39;PyQt5&#39;\n QT_ENV = None\n\n\n<span class=\"gd\">-def set_pyqt4_API2():</span>\n<span class=\"gi\">+def set_pyqt4_api():</span>\n     import sip\n     # This must be done before importing PyQt4:\n     API_NAMES = [&quot;QDate&quot;, &quot;QDateTime&quot;, &quot;QString&quot;, &quot;QTextStream&quot;, &quot;QTime&quot;, &quot;QUrl&quot;, &quot;QVariant&quot;]\n     API_VERSION = 2\n     for name in API_NAMES:\n         try:\n             sip.setapi(name, API_VERSION)\n         except ValueError:\n             pass\n\n\n def check_pyqt4_api():\n<span class=\"gd\">-    &quot;&quot;&quot;If PyQt4 was already imported before we got a chance to set API version 2, ensure the API</span>\n<span class=\"gd\">-    versions were already set to version 2. Otherwise confusing errors may occur later - better to catch this now&quot;&quot;&quot;</span>\n<span class=\"gi\">+    &quot;&quot;&quot;If PyQt4 was already imported before we got a chance to set API version</span>\n<span class=\"gi\">+    2, ensure the API versions are either not set, or set to version 2.</span>\n<span class=\"gi\">+    Otherwise confusing errors may occur later - better to catch this now&quot;&quot;&quot;</span>\n     import sip\n     API_NAMES = [&quot;QDate&quot;, &quot;QDateTime&quot;, &quot;QString&quot;, &quot;QTextStream&quot;, &quot;QTime&quot;, &quot;QUrl&quot;, &quot;QVariant&quot;]\n     API_VERSION = 2\n     for name in API_NAMES:\n         try:\n             if sip.getapi(name) != API_VERSION:\n<span class=\"gd\">-                raise RuntimeError(&quot;qtutils only compatible with version 2 of the  PYQt4 API. Either set the API to version 2 before importing PyQt4, or import qtutils first, which will set it for you&quot;)</span>\n<span class=\"gi\">+                msg = (&quot;qtutils is only compatible with version 2 of the  PyQt4 API.&quot; +</span>\n<span class=\"gi\">+                       &quot;Whilst you can import PyQt4 prior to importing qtutils (in order to tell qtutils &quot; +</span>\n<span class=\"gi\">+                       &quot;to use PyQt4), either set the API version to 2 yourself, or import qtutils &quot; +</span>\n<span class=\"gi\">+                       &quot;(which will set it for you) prior to importing QtGui or QtCore.&quot;)</span>\n<span class=\"gi\">+                raise RuntimeError(msg)</span>\n         except ValueError:\n<span class=\"gi\">+            # API version not set yet.</span>\n             pass\n\n\n libs = [PYQT5, PYQT4, PYSIDE]\n for lib in libs:\n     if lib in sys.modules:\n         QT_ENV = lib\n         if lib == PYQT4:\n             check_pyqt4_api()\n<span class=\"gi\">+            set_pyqt4_api()</span>\n         break\n else:\n     for lib in libs:\n         if lib == PYQT4:\n             # Have to set pyqt API v2 before importing PyQt4:\n<span class=\"gd\">-            set_pyqt4_API2()</span>\n<span class=\"gi\">+            set_pyqt4_api()</span>\n         try:\n             __import__(lib)\n             QT_ENV = lib\n             break\n         except ImportError:\n             pass\n\n if QT_ENV is None:\n</pre></div>\n\n\n<p>Resulting in:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">PyQt4</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">qtutils.qt</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">sip</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sip</span><span class=\"o\">.</span><span class=\"n\">getapi</span><span class=\"p\">(</span><span class=\"s1\">&#39;QString&#39;</span><span class=\"p\">))</span>\n<span class=\"mi\">2</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-10T04:21:14.665189+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-10T04:21:14.668106+00:00", "type": "pullrequest_comment", "id": 42534622}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42526988.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42526988"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "The message handler defined in `__init__.py` has the wrong arguments for PyQt5. This explains why I keep just getting \"core dumped\" when I do something as simple as a Python NameError - PyQt5 is failing to call the message handler but can't give me an error about it because it would need the message handler to do that.\n\nPyQt, both 4 and 5, by default print the messages to stdout or stderr anyway, and they call any object overriding sys.excepthook as well. So this message handler is not doing anything. Let's just get rid of it.", "markup": "markdown", "html": "<p>The message handler defined in <code>__init__.py</code> has the wrong arguments for PyQt5. This explains why I keep just getting \"core dumped\" when I do something as simple as a Python NameError - PyQt5 is failing to call the message handler but can't give me an error about it because it would need the message handler to do that.</p>\n<p>PyQt, both 4 and 5, by default print the messages to stdout or stderr anyway, and they call any object overriding sys.excepthook as well. So this message handler is not doing anything. Let's just get rid of it.</p>", "type": "rendered"}, "created_on": "2017-08-09T23:41:49.188994+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-09T23:41:49.191137+00:00", "type": "pullrequest_comment", "id": 42526988}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42525939.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42525939"}}, "parent": {"id": 42523045, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42523045.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42523045"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "There is not much point trying to be comprehensive. We're not using QStyleOptionViewItem but it was the only one in qtpy so I thought there was a small chance it was the only remaining rename required. But this is very much not true. I just wrote a little script to output the list of object names and methods in PyQt4 and PyQt5 and compare them to see which ones are present in PyQt4 and absent in PyQt5 (indicating deletion or renaming). I had the script only list methods if the object itself was present in both versions under the same name. The resulting list of deletions/renames is [1200 items long](https://pastebin.com/b4ZPGh4y) and I have never heard of most of them.\n\nEven if we tried to wrap more things, it likely gets to a point where you have to acknowledge that the two libraries are actually different, and that if automated backward compatible wrapping were possible, there would not have been a need for a major version bump in qt. So the whack-a-mole approach is I think the only realistic one.", "markup": "markdown", "html": "<p>There is not much point trying to be comprehensive. We're not using QStyleOptionViewItem but it was the only one in qtpy so I thought there was a small chance it was the only remaining rename required. But this is very much not true. I just wrote a little script to output the list of object names and methods in PyQt4 and PyQt5 and compare them to see which ones are present in PyQt4 and absent in PyQt5 (indicating deletion or renaming). I had the script only list methods if the object itself was present in both versions under the same name. The resulting list of deletions/renames is <a data-is-external-link=\"true\" href=\"https://pastebin.com/b4ZPGh4y\" rel=\"nofollow\">1200 items long</a> and I have never heard of most of them.</p>\n<p>Even if we tried to wrap more things, it likely gets to a point where you have to acknowledge that the two libraries are actually different, and that if automated backward compatible wrapping were possible, there would not have been a need for a major version bump in qt. So the whack-a-mole approach is I think the only realistic one.</p>", "type": "rendered"}, "created_on": "2017-08-09T23:10:13.540115+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-09T23:10:13.542780+00:00", "type": "pullrequest_comment", "id": 42525939}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"update": {"description": "* PEP8 formating\r\n\r\n* PyQt5 imports\r\n\r\n* german grammer fix :P\r\n\r\n* Qt abstraction wrapper\r\n\r\n* PyQt4 API v2\r\n\r\nMost of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\r\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.", "title": "PyQt5", "destination": {"commit": {"hash": "478e547522b4", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/478e547522b4.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/478e547522b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "922abce46329", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/922abce46329"}, "html": {"href": "#!/PhyNerd/qtutils/commits/922abce46329"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-08-09T21:55:03.848258+00:00"}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42523045.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42523045"}}, "parent": {"id": 42522773, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42522773.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42522773"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Sure I'll add that in as well are we using it?\n\nWell we are kind of doing the same with labscript. But as I can't find a list anywhere and [PyQt5](http://pyqt.sourceforge.net/Docs/PyQt5/pyqt4_differences.html)'s  differences page isn't much help that seems to be the only approach that works.", "markup": "markdown", "html": "<p>Sure I'll add that in as well are we using it?</p>\n<p>Well we are kind of doing the same with labscript. But as I can't find a list anywhere and <a data-is-external-link=\"true\" href=\"http://pyqt.sourceforge.net/Docs/PyQt5/pyqt4_differences.html\" rel=\"nofollow\">PyQt5</a>'s  differences page isn't much help that seems to be the only approach that works.</p>", "type": "rendered"}, "created_on": "2017-08-09T21:53:18.090680+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-09T21:53:18.166443+00:00", "type": "pullrequest_comment", "id": 42523045}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42522773.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42522773"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "If you want to make qtutils comprehensive about the renames, then you should also alias \n\nQStyleOptionViewItem = QStyleOptionViewItemV4\n\nWhich is the only other rename that qtpy knows about in qtwidgets. However qtpy doesn't appear to know about renaming QStyleOptionTab, so perhaps there are others. Qtpy may just be playing whack a mole with the things that affect spyder.", "markup": "markdown", "html": "<p>If you want to make qtutils comprehensive about the renames, then you should also alias </p>\n<p>QStyleOptionViewItem = QStyleOptionViewItemV4</p>\n<p>Which is the only other rename that qtpy knows about in qtwidgets. However qtpy doesn't appear to know about renaming QStyleOptionTab, so perhaps there are others. Qtpy may just be playing whack a mole with the things that affect spyder.</p>", "type": "rendered"}, "created_on": "2017-08-09T21:48:00.832776+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-09T21:48:23.654323+00:00", "type": "pullrequest_comment", "id": 42522773}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"update": {"description": "* PEP8 formating\r\n\r\n* PyQt5 imports\r\n\r\n* german grammer fix :P\r\n\r\n* Qt abstraction wrapper\r\n\r\n* PyQt4 API v2\r\n\r\nMost of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\r\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.", "title": "PyQt5", "destination": {"commit": {"hash": "478e547522b4", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/478e547522b4.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/478e547522b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3a50cc74941c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/3a50cc74941c"}, "html": {"href": "#!/PhyNerd/qtutils/commits/3a50cc74941c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-08-09T21:32:11.139970+00:00"}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42332239.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42332239"}}, "parent": {"id": 42332071, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42332071.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42332071"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Hopefully Philip comes around to testing soon so that the \"real\" testing can happen after.", "markup": "markdown", "html": "<p>Hopefully Philip comes around to testing soon so that the \"real\" testing can happen after.</p>", "type": "rendered"}, "created_on": "2017-08-07T22:16:56.901113+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-07T22:19:41.051923+00:00", "type": "pullrequest_comment", "id": 42332239}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42332071.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42332071"}}, "parent": {"id": 42331969, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42331969.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42331969"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Definitely - and, since half of the GUI programs were not written with PySide in mind, it's not a regression if they don't work with it.", "markup": "markdown", "html": "<p>Definitely - and, since half of the GUI programs were not written with PySide in mind, it's not a regression if they don't work with it.</p>", "type": "rendered"}, "created_on": "2017-08-07T22:12:51.635843+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-07T22:12:51.638855+00:00", "type": "pullrequest_comment", "id": 42332071}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42331969.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42331969"}}, "parent": {"id": 42322876, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42322876.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42322876"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "I'm guessing if we find more of these this will most probably only happen after merging. A test-userbase of 3 seems to be too small for the amount GUI and environments to test.", "markup": "markdown", "html": "<p>I'm guessing if we find more of these this will most probably only happen after merging. A test-userbase of 3 seems to be too small for the amount GUI and environments to test.</p>", "type": "rendered"}, "created_on": "2017-08-07T22:10:05.556062+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-07T22:10:21.545471+00:00", "type": "pullrequest_comment", "id": 42331969}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42322876.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42322876"}}, "parent": {"id": 42322731, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42322731.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42322731"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "No probs - I only came across it by chance - was using an incompatible set of versions of things such that BLACS ended up importing PySide and then qtutils (and then crashing). But, since it led me to the above link about the differences between the API, reading through that gave me some confidence that qtutils.qt ought to decently wrap PySide as it is (after fixing this issue).", "markup": "markdown", "html": "<p>No probs - I only came across it by chance - was using an incompatible set of versions of things such that BLACS ended up importing PySide and then qtutils (and then crashing). But, since it led me to the above link about the differences between the API, reading through that gave me some confidence that qtutils.qt ought to decently wrap PySide as it is (after fixing this issue).</p>", "type": "rendered"}, "created_on": "2017-08-07T19:28:18.060338+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-07T19:28:45.569143+00:00", "type": "pullrequest_comment", "id": 42322876}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42322731.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42322731"}}, "parent": {"id": 42321587, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42321587.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42321587"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Thanks! I don't have PySide so I wouldn't have spotted this.", "markup": "markdown", "html": "<p>Thanks! I don't have PySide so I wouldn't have spotted this.</p>", "type": "rendered"}, "created_on": "2017-08-07T19:25:50.173997+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-07T19:25:50.272301+00:00", "type": "pullrequest_comment", "id": 42322731}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"update": {"description": "* PEP8 formating\r\n\r\n* PyQt5 imports\r\n\r\n* german grammer fix :P\r\n\r\n* Qt abstraction wrapper\r\n\r\n* PyQt4 API v2\r\n\r\nMost of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\r\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.", "title": "PyQt5", "destination": {"commit": {"hash": "478e547522b4", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/478e547522b4.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/478e547522b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "3a4bec7b57df", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/3a4bec7b57df"}, "html": {"href": "#!/PhyNerd/qtutils/commits/3a4bec7b57df"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-08-07T19:25:35.656237+00:00"}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/42321587.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-42321587"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Some of the patches break with PySide because PySide [effectively already does the patch](https://pyside.github.io/docs/pyside/pysideapi2.html). So importing qtutils after PySide fails. The fix is:\n\n\n```\n#!diff\n\n--- a/qtutils/qt.py\tTue Aug 01 20:28:24 2017 +0200\n+++ b/qtutils/qt.py\tMon Aug 07 15:00:16 2017 -0400\n@@ -107,9 +107,11 @@\n     _patch(QtGui.QHeaderView, \"setSectionsClickable\", \"setClickable\")\n     _patch(QtGui.QHeaderView, \"setSectionResizeMode\", \"setResizeMode\")\n \n-    _patch(QtGui.QFileDialog, \"getOpenFileName\", \"getOpenFileNameAndFilter\")\n-    _patch(QtGui.QFileDialog, \"getOpenFileNames\", \"getOpenFileNamesAndFilter\")\n-    _patch(QtGui.QFileDialog, \"getSaveFileName\", \"getSaveFileNameAndFilter\")\n+    if QT_ENV == PYQT4:\n+        # Pyside does not have the methods ending in \"-AndFilter\":\n+        _patch(QtGui.QFileDialog, \"getOpenFileName\", \"getOpenFileNameAndFilter\")\n+        _patch(QtGui.QFileDialog, \"getOpenFileNames\", \"getOpenFileNamesAndFilter\")\n+        _patch(QtGui.QFileDialog, \"getSaveFileName\", \"getSaveFileNameAndFilter\")\n \n     QtWidgets = QtGui\n     QtCore.QSortFilterProxyModel = QtGui.QSortFilterProxyModel\n\n```\n", "markup": "markdown", "html": "<p>Some of the patches break with PySide because PySide <a data-is-external-link=\"true\" href=\"https://pyside.github.io/docs/pyside/pysideapi2.html\" rel=\"nofollow\">effectively already does the patch</a>. So importing qtutils after PySide fails. The fix is:</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gd\">--- a/qtutils/qt.py Tue Aug 01 20:28:24 2017 +0200</span>\n<span class=\"gi\">+++ b/qtutils/qt.py Mon Aug 07 15:00:16 2017 -0400</span>\n<span class=\"gu\">@@ -107,9 +107,11 @@</span>\n     _patch(QtGui.QHeaderView, &quot;setSectionsClickable&quot;, &quot;setClickable&quot;)\n     _patch(QtGui.QHeaderView, &quot;setSectionResizeMode&quot;, &quot;setResizeMode&quot;)\n\n<span class=\"gd\">-    _patch(QtGui.QFileDialog, &quot;getOpenFileName&quot;, &quot;getOpenFileNameAndFilter&quot;)</span>\n<span class=\"gd\">-    _patch(QtGui.QFileDialog, &quot;getOpenFileNames&quot;, &quot;getOpenFileNamesAndFilter&quot;)</span>\n<span class=\"gd\">-    _patch(QtGui.QFileDialog, &quot;getSaveFileName&quot;, &quot;getSaveFileNameAndFilter&quot;)</span>\n<span class=\"gi\">+    if QT_ENV == PYQT4:</span>\n<span class=\"gi\">+        # Pyside does not have the methods ending in &quot;-AndFilter&quot;:</span>\n<span class=\"gi\">+        _patch(QtGui.QFileDialog, &quot;getOpenFileName&quot;, &quot;getOpenFileNameAndFilter&quot;)</span>\n<span class=\"gi\">+        _patch(QtGui.QFileDialog, &quot;getOpenFileNames&quot;, &quot;getOpenFileNamesAndFilter&quot;)</span>\n<span class=\"gi\">+        _patch(QtGui.QFileDialog, &quot;getSaveFileName&quot;, &quot;getSaveFileNameAndFilter&quot;)</span>\n\n     QtWidgets = QtGui\n     QtCore.QSortFilterProxyModel = QtGui.QSortFilterProxyModel\n</pre></div>", "type": "rendered"}, "created_on": "2017-08-07T19:04:43.512997+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-07T19:04:53.913645+00:00", "type": "pullrequest_comment", "id": 42321587}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"approval": {"date": "2017-08-04T08:07:17.230863+00:00", "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41957466.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41957466"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "For testers who don't have the build tools installed, I've uploaded a [build of the package](#!/philipstarkey/qtutils/downloads/qtutils-2.0.0.tar.gz) as of commit [7438e0b97ee6](#!/PhyNerd/qtutils/commits/7438e0b97ee627836195dcc6f1cd80891dc92461?at=default) in this pull request.", "markup": "markdown", "html": "<p>For testers who don't have the build tools installed, I've uploaded a <a data-is-external-link=\"true\" href=\"#!/philipstarkey/qtutils/downloads/qtutils-2.0.0.tar.gz\" rel=\"nofollow\">build of the package</a> as of commit <a data-is-external-link=\"true\" href=\"#!/PhyNerd/qtutils/commits/7438e0b97ee627836195dcc6f1cd80891dc92461?at=default\" rel=\"nofollow\">7438e0b97ee6</a> in this pull request.</p>", "type": "rendered"}, "created_on": "2017-08-01T23:07:38.312546+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-08-01T23:08:19.730552+00:00", "type": "pullrequest_comment", "id": 41957466}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41942245.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41942245"}}, "parent": {"id": 41775691, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41775691.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41775691"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Did the version bump to setup.py will do the checks in all the labscript files later and also create the pull requests. (if I should not get to them today they will definitely be there tomorrow)\n\nUpdate: Pull requests are out gave them all the same short summary of what they are for the actual changes can also be found in the commits", "markup": "markdown", "html": "<p>Did the version bump to setup.py will do the checks in all the labscript files later and also create the pull requests. (if I should not get to them today they will definitely be there tomorrow)</p>\n<p>Update: Pull requests are out gave them all the same short summary of what they are for the actual changes can also be found in the commits</p>", "type": "rendered"}, "created_on": "2017-08-01T18:30:23.438549+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-01T19:48:38.254310+00:00", "type": "pullrequest_comment", "id": 41942245}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"update": {"description": "* PEP8 formating\r\n\r\n* PyQt5 imports\r\n\r\n* german grammer fix :P\r\n\r\n* Qt abstraction wrapper\r\n\r\n* PyQt4 API v2\r\n\r\nMost of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\r\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.", "title": "PyQt5", "destination": {"commit": {"hash": "478e547522b4", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/478e547522b4.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/478e547522b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "7438e0b97ee6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/7438e0b97ee6"}, "html": {"href": "#!/PhyNerd/qtutils/commits/7438e0b97ee6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-08-01T18:28:27.077459+00:00"}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"update": {"description": "* PEP8 formating\r\n\r\n* PyQt5 imports\r\n\r\n* german grammer fix :P\r\n\r\n* Qt abstraction wrapper\r\n\r\n* PyQt4 API v2\r\n\r\nMost of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\r\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.", "title": "PyQt5", "destination": {"commit": {"hash": "478e547522b4", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/478e547522b4.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/478e547522b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "852fcb60ecd1", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/852fcb60ecd1"}, "html": {"href": "#!/PhyNerd/qtutils/commits/852fcb60ecd1"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "date": "2017-08-01T18:22:43.383917+00:00"}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41941709.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41941709"}}, "parent": {"id": 41775187, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41775187.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41775187"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Did that", "markup": "markdown", "html": "<p>Did that</p>", "type": "rendered"}, "created_on": "2017-08-01T18:22:35.521916+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-08-01T18:22:35.563988+00:00", "type": "pullrequest_comment", "id": 41941709}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41827085.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41827085"}}, "parent": {"id": 41785982, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41785982.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41785982"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Basically yes, we'll have 'experimental' pyqt5 support if you want to put it that way. In terms of merging, it's important to merge before the 'feature' of pyqt5 support is complete, because of the backwards incompatibility of this pull request. So our priority is merely getting out of the backwards incompatibility trap without regressions. Then we can do pyqt5 testing, and fix anything we find the usual way with bug reports and pull requests.", "markup": "markdown", "html": "<p>Basically yes, we'll have 'experimental' pyqt5 support if you want to put it that way. In terms of merging, it's important to merge before the 'feature' of pyqt5 support is complete, because of the backwards incompatibility of this pull request. So our priority is merely getting out of the backwards incompatibility trap without regressions. Then we can do pyqt5 testing, and fix anything we find the usual way with bug reports and pull requests.</p>", "type": "rendered"}, "created_on": "2017-07-31T14:37:21.998755+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-31T14:37:22.003803+00:00", "type": "pullrequest_comment", "id": 41827085}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41785982.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41785982"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "So I like Option 1 as well and will do the changes needed tomorrow. But where does PyQt5 testing happen? Do we just say that we have pyqt5 compatibility but don\u2018t recommend it yet and disscuss problems in Isssue threads?\n(I\u2018m typing this on my phone so there might be autocorrections that made things worse)", "markup": "markdown", "html": "<p>So I like Option 1 as well and will do the changes needed tomorrow. But where does PyQt5 testing happen? Do we just say that we have pyqt5 compatibility but don\u2018t recommend it yet and disscuss problems in Isssue threads?\n(I\u2018m typing this on my phone so there might be autocorrections that made things worse)</p>", "type": "rendered"}, "created_on": "2017-07-31T06:37:07.727787+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-31T06:37:07.802196+00:00", "type": "pullrequest_comment", "id": 41785982}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41775971.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41775971"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Yeah, probably option 1 is the way to go", "markup": "markdown", "html": "<p>Yeah, probably option 1 is the way to go</p>", "type": "rendered"}, "created_on": "2017-07-30T23:37:14.250445+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2017-07-30T23:37:14.252236+00:00", "type": "pullrequest_comment", "id": 41775971}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41775691.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41775691"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "Onto the matter of trying to maintain semi-continuous integration of new code in the face of this backward incompatible change.\n\nThings are a bit tricky: since this is a backward incompatible change, we can't update the other programs one-by-one whilst having them actually be usable together.\n\nI see two options for dealing with this.\n\nThe first option is to have tested forks of all the GUI programs on standby, and to merge them, as well as this change, all on the same day, releasing qtutils 2.0.0 on PyPI at the same time.\n\nThe second option is to have this module have a different name after this release, say, `qtutils2`. That way, we can release it on PyPI and it can be installed simultaneously with the existing `qtutils`.\n\nThe only problem with the second option is that `labscript_utils.qtwidgets` is used by multiple programs, and so it would be tricky to ensure it kept working through the transition.\n\nSo I think we should go with option 1. What do you think @philipstarkey ?\n\nIf we go for option 1, then @PhyNerd should change the version in `setup.py` in this pull request to `'2.0.0'`, and change the qtutils version checks in other programs in their Qt5 forks to require `'2.0.0'`. Also in a version check should be added `labscript_utils/qtwidgets/__init__.py` requiring qtutils 2.0.0, as there isn't a check there at all presently.\n\nThen @PhyNerd should make pull requests for all the other repositories. Testers can then install qtutils 2.0.0 from source (I can provide prebuilt icon resource files so you can skip the building step), pull from the branches named in the pull requests of each repository, and then test that things work. By \"work\", I mean we should test that there aren't any regressions when running with PyQt4. Whether things actually work on Qt5 or not I am happy to defer for later pull requests. Just making sure programs are compatible with qtutils 2.0 whilst still running with PyQt4 is what I would like to go for.\n\nThe changes are pretty formulaic or minor, so once the pull requests are there, we can read over them in the pull request threads, and testing should not be so bad. If other pull requests are pending and not yet tested, we can merge the qtutils 2.0 compatibility ones first - other pull requests can adapt to them if necessary rather than the other way around. Though so far from what I can see all the pending pull requests are not in conflict. Nonetheless the qtutils 2.0 compatibility ones should take priority.\n\nThe other pull requests are building up, and so I've been working on test suites to help with testing the Qt applications. So we may have some degree of automated testing soon which may help.", "markup": "markdown", "html": "<p>Onto the matter of trying to maintain semi-continuous integration of new code in the face of this backward incompatible change.</p>\n<p>Things are a bit tricky: since this is a backward incompatible change, we can't update the other programs one-by-one whilst having them actually be usable together.</p>\n<p>I see two options for dealing with this.</p>\n<p>The first option is to have tested forks of all the GUI programs on standby, and to merge them, as well as this change, all on the same day, releasing qtutils 2.0.0 on PyPI at the same time.</p>\n<p>The second option is to have this module have a different name after this release, say, <code>qtutils2</code>. That way, we can release it on PyPI and it can be installed simultaneously with the existing <code>qtutils</code>.</p>\n<p>The only problem with the second option is that <code>labscript_utils.qtwidgets</code> is used by multiple programs, and so it would be tricky to ensure it kept working through the transition.</p>\n<p>So I think we should go with option 1. What do you think @philipstarkey ?</p>\n<p>If we go for option 1, then @PhyNerd should change the version in <code>setup.py</code> in this pull request to <code>'2.0.0'</code>, and change the qtutils version checks in other programs in their Qt5 forks to require <code>'2.0.0'</code>. Also in a version check should be added <code>labscript_utils/qtwidgets/__init__.py</code> requiring qtutils 2.0.0, as there isn't a check there at all presently.</p>\n<p>Then @PhyNerd should make pull requests for all the other repositories. Testers can then install qtutils 2.0.0 from source (I can provide prebuilt icon resource files so you can skip the building step), pull from the branches named in the pull requests of each repository, and then test that things work. By \"work\", I mean we should test that there aren't any regressions when running with PyQt4. Whether things actually work on Qt5 or not I am happy to defer for later pull requests. Just making sure programs are compatible with qtutils 2.0 whilst still running with PyQt4 is what I would like to go for.</p>\n<p>The changes are pretty formulaic or minor, so once the pull requests are there, we can read over them in the pull request threads, and testing should not be so bad. If other pull requests are pending and not yet tested, we can merge the qtutils 2.0 compatibility ones first - other pull requests can adapt to them if necessary rather than the other way around. Though so far from what I can see all the pending pull requests are not in conflict. Nonetheless the qtutils 2.0 compatibility ones should take priority.</p>\n<p>The other pull requests are building up, and so I've been working on test suites to help with testing the Qt applications. So we may have some degree of automated testing soon which may help.</p>", "type": "rendered"}, "created_on": "2017-07-30T23:08:57.022459+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-30T23:08:57.050883+00:00", "type": "pullrequest_comment", "id": 41775691}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41775187.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41775187"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "I noticed a typo in `icons/__init__.py`, the string `PySide` has the wrong capitalisation and so icons aren't imported under PySide.\n\nTo ensure typos like this cause loud failure rather than silent failure, you should change the following lines:\n\n```\n#!python\n\n$ grep -rin $'QT_ENV == \\'' *\nicons/__init__.py:2:if qtutils.qt.QT_ENV == 'Pyside':\nicons/__init__.py:4:elif qtutils.qt.QT_ENV == 'PyQt4':\nicons/__init__.py:6:elif qtutils.qt.QT_ENV == 'PyQt5':\nUiLoader.py:28:if qtutils.qt.QT_ENV == 'PySide':\nUiLoader.py:99:    if qtutils.qt.QT_ENV == 'PyQt4':\nUiLoader.py:101:    elif qtutils.qt.QT_ENV == 'PyQt5':\n```\n\nTo compare with the `qtutils.qt.PYSIDE` etc constants rather than hardcoded strings (there's one similar check in your fork of labscript_utils, but it is correct). ", "markup": "markdown", "html": "<p>I noticed a typo in <code>icons/__init__.py</code>, the string <code>PySide</code> has the wrong capitalisation and so icons aren't imported under PySide.</p>\n<p>To ensure typos like this cause loud failure rather than silent failure, you should change the following lines:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"err\">$</span> <span class=\"n\">grep</span> <span class=\"o\">-</span><span class=\"n\">rin</span> <span class=\"err\">$</span><span class=\"s1\">&#39;QT_ENV == </span><span class=\"se\">\\&#39;</span><span class=\"s1\">&#39;</span> <span class=\"o\">*</span>\n<span class=\"n\">icons</span><span class=\"o\">/</span><span class=\"fm\">__init__</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"k\">if</span> <span class=\"n\">qtutils</span><span class=\"o\">.</span><span class=\"n\">qt</span><span class=\"o\">.</span><span class=\"n\">QT_ENV</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;Pyside&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">icons</span><span class=\"o\">/</span><span class=\"fm\">__init__</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"k\">elif</span> <span class=\"n\">qtutils</span><span class=\"o\">.</span><span class=\"n\">qt</span><span class=\"o\">.</span><span class=\"n\">QT_ENV</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;PyQt4&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">icons</span><span class=\"o\">/</span><span class=\"fm\">__init__</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">:</span><span class=\"k\">elif</span> <span class=\"n\">qtutils</span><span class=\"o\">.</span><span class=\"n\">qt</span><span class=\"o\">.</span><span class=\"n\">QT_ENV</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;PyQt5&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">UiLoader</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">28</span><span class=\"p\">:</span><span class=\"k\">if</span> <span class=\"n\">qtutils</span><span class=\"o\">.</span><span class=\"n\">qt</span><span class=\"o\">.</span><span class=\"n\">QT_ENV</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;PySide&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">UiLoader</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">99</span><span class=\"p\">:</span>    <span class=\"k\">if</span> <span class=\"n\">qtutils</span><span class=\"o\">.</span><span class=\"n\">qt</span><span class=\"o\">.</span><span class=\"n\">QT_ENV</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;PyQt4&#39;</span><span class=\"p\">:</span>\n<span class=\"n\">UiLoader</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"p\">:</span><span class=\"mi\">101</span><span class=\"p\">:</span>    <span class=\"k\">elif</span> <span class=\"n\">qtutils</span><span class=\"o\">.</span><span class=\"n\">qt</span><span class=\"o\">.</span><span class=\"n\">QT_ENV</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;PyQt5&#39;</span><span class=\"p\">:</span>\n</pre></div>\n\n\n<p>To compare with the <code>qtutils.qt.PYSIDE</code> etc constants rather than hardcoded strings (there's one similar check in your fork of labscript_utils, but it is correct). </p>", "type": "rendered"}, "created_on": "2017-07-30T22:15:44.029202+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2017-07-30T22:15:44.031622+00:00", "type": "pullrequest_comment", "id": 41775187}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41503694.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41503694"}}, "parent": {"id": 41500700, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments/41500700.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1/_/diff#comment-41500700"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}, "content": {"raw": "done.", "markup": "markdown", "html": "<p>done.</p>", "type": "rendered"}, "created_on": "2017-07-26T06:40:31.195932+00:00", "user": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "updated_on": "2017-07-26T06:40:31.248338+00:00", "type": "pullrequest_comment", "id": 41503694}, "pull_request": {"type": "pullrequest", "id": 1, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}}, "title": "PyQt5"}}], "next": "data/repositories/philipstarkey/qtutils/pullrequests/1/activity_ctx=EBCnzUb.json"}