{"rendered": {"description": {"raw": "Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.\r\n\r\nBasically, the primary change to qtutils is just a list of aliases of log levels -> colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called [`RichStreamHandler`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-551). When used in place of a `logging.StreamHandler` for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.\r\n\r\n`RichStreamHandler` supports any file-like object whose `write()` method accepts a 'charformat' keyword argument. `OutputBox.write()` now supports this keyword argument, so the logger can be directly attached to the `OutputBox` in the process that contains it, such as runmanager/lyse/etc. Also, `zprocess.process_tree.StreamProxy`, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its `write()` method as of zprocess 2.5.1, meaning a `RichStreamHandler` used in a subprocess will work to forward correctly to an `OutputBox` in the parent process.\r\n\r\nSince you might want more colours, I also added a function to zprocess, [`rich_print()`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-571), which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.\r\n\r\nBoth the `RichStreamHandler` and `rich_print` fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. \r\n\r\nI imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.\r\n\r\nExample:\r\n\r\n```python\r\nimport logging\r\nfrom zprocess import RichStreamHandler # Requires zprocess 2.5.1\r\nlogger = logging.Logger('test')\r\nlogger.setLevel(logging.DEBUG)\r\nlogger.addHandler(RichStreamHandler()) # or RichStreamHandler(output_box) if in same process as output box\r\nlogger.debug('DEBUG log message')\r\nlogger.info('INFO log message')\r\nlogger.warning('WARNING log message')\r\nlogger.error('ERROR log message')\r\nlogger.critical('CRITICAL log message')\r\n```\r\n![outputbox_ss.png](https://bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png)\r\n\r\n\r\n* Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.\r\n\r\n* Added file-like stub methods to OutputBox so that it can be used in place of a\r\nfile-like object.\r\n\r\n* Add aliases for formatting based on log levels.\r\n\r\n* Fix failure to memoise text formatting.\r\n\r\n* Add font name as a varaible instead of using a string literal where it's used\r\n\r\n* Remove use of 'red' string favouring the RED variable instead.\r\n\r\n* Fixed bug which caused obscure error message due to font loading being attempted\r\nafter an exception in the main thread (`__file__` doesn't exist as seen from the\r\nthread apparantly - now we save the fonts location in a global varaible earlier)", "markup": "markdown", "html": "<p>Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.</p>\n<p>Basically, the primary change to qtutils is just a list of aliases of log levels -&gt; colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called <a data-is-external-link=\"true\" href=\"https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&amp;fileviewer=file-view-default#process_tree.py-551\" rel=\"nofollow\"><code>RichStreamHandler</code></a>. When used in place of a <code>logging.StreamHandler</code> for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.</p>\n<p><code>RichStreamHandler</code> supports any file-like object whose <code>write()</code> method accepts a 'charformat' keyword argument. <code>OutputBox.write()</code> now supports this keyword argument, so the logger can be directly attached to the <code>OutputBox</code> in the process that contains it, such as runmanager/lyse/etc. Also, <code>zprocess.process_tree.StreamProxy</code>, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its <code>write()</code> method as of zprocess 2.5.1, meaning a <code>RichStreamHandler</code> used in a subprocess will work to forward correctly to an <code>OutputBox</code> in the parent process.</p>\n<p>Since you might want more colours, I also added a function to zprocess, <a data-is-external-link=\"true\" href=\"https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&amp;fileviewer=file-view-default#process_tree.py-571\" rel=\"nofollow\"><code>rich_print()</code></a>, which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.</p>\n<p>Both the <code>RichStreamHandler</code> and <code>rich_print</code> fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. </p>\n<p>I imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.</p>\n<p>Example:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zprocess</span> <span class=\"kn\">import</span> <span class=\"n\">RichStreamHandler</span> <span class=\"c1\"># Requires zprocess 2.5.1</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span><span class=\"p\">(</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">RichStreamHandler</span><span class=\"p\">())</span> <span class=\"c1\"># or RichStreamHandler(output_box) if in same process as output box</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">&#39;DEBUG log message&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;INFO log message&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING log message&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">&#39;ERROR log message&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s1\">&#39;CRITICAL log message&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p><img alt=\"outputbox_ss.png\" src=\"data/bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png\" /></p>\n<ul>\n<li>\n<p>Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.</p>\n</li>\n<li>\n<p>Added file-like stub methods to OutputBox so that it can be used in place of a\nfile-like object.</p>\n</li>\n<li>\n<p>Add aliases for formatting based on log levels.</p>\n</li>\n<li>\n<p>Fix failure to memoise text formatting.</p>\n</li>\n<li>\n<p>Add font name as a varaible instead of using a string literal where it's used</p>\n</li>\n<li>\n<p>Remove use of 'red' string favouring the RED variable instead.</p>\n</li>\n<li>\n<p>Fixed bug which caused obscure error message due to font loading being attempted\nafter an exception in the main thread (<code>__file__</code> doesn't exist as seen from the\nthread apparantly - now we save the fonts location in a global varaible earlier)</p>\n</li>\n</ul>", "type": "rendered"}, "title": {"raw": "Compatibility with coloured output from subprocesses", "markup": "markdown", "html": "<p>Compatibility with coloured output from subprocesses</p>", "type": "rendered"}}, "type": "pullrequest", "description": "Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.\r\n\r\nBasically, the primary change to qtutils is just a list of aliases of log levels -> colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called [`RichStreamHandler`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-551). When used in place of a `logging.StreamHandler` for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.\r\n\r\n`RichStreamHandler` supports any file-like object whose `write()` method accepts a 'charformat' keyword argument. `OutputBox.write()` now supports this keyword argument, so the logger can be directly attached to the `OutputBox` in the process that contains it, such as runmanager/lyse/etc. Also, `zprocess.process_tree.StreamProxy`, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its `write()` method as of zprocess 2.5.1, meaning a `RichStreamHandler` used in a subprocess will work to forward correctly to an `OutputBox` in the parent process.\r\n\r\nSince you might want more colours, I also added a function to zprocess, [`rich_print()`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-571), which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.\r\n\r\nBoth the `RichStreamHandler` and `rich_print` fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. \r\n\r\nI imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.\r\n\r\nExample:\r\n\r\n```python\r\nimport logging\r\nfrom zprocess import RichStreamHandler # Requires zprocess 2.5.1\r\nlogger = logging.Logger('test')\r\nlogger.setLevel(logging.DEBUG)\r\nlogger.addHandler(RichStreamHandler()) # or RichStreamHandler(output_box) if in same process as output box\r\nlogger.debug('DEBUG log message')\r\nlogger.info('INFO log message')\r\nlogger.warning('WARNING log message')\r\nlogger.error('ERROR log message')\r\nlogger.critical('CRITICAL log message')\r\n```\r\n![outputbox_ss.png](https://bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png)\r\n\r\n\r\n* Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.\r\n\r\n* Added file-like stub methods to OutputBox so that it can be used in place of a\r\nfile-like object.\r\n\r\n* Add aliases for formatting based on log levels.\r\n\r\n* Fix failure to memoise text formatting.\r\n\r\n* Add font name as a varaible instead of using a string literal where it's used\r\n\r\n* Remove use of 'red' string favouring the RED variable instead.\r\n\r\n* Fixed bug which caused obscure error message due to font loading being attempted\r\nafter an exception in the main thread (`__file__` doesn't exist as seen from the\r\nthread apparantly - now we save the fonts location in a global varaible earlier)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/14/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:7629e11fe880%0Deb14bdc0ce46?from_pullrequest_id=14"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/14/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:7629e11fe880%0Deb14bdc0ce46?from_pullrequest_id=14"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/14/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/statuses_page=1.json"}}, "title": "Compatibility with coloured output from subprocesses", "close_source_branch": false, "reviewers": [{"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, {"display_name": "Lincoln Turner", "uuid": "{7e35ca32-09d7-4a25-a548-32edef727dda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D"}, "html": {"href": "https://bitbucket.org/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2ac774c664cd58fc011cc65e0980b4c1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLT-3.png"}}, "nickname": "lincolndturner", "type": "user", "account_id": "5b46a53d845e7e2cdff75ad3"}], "id": 14, "destination": {"commit": {"hash": "eb14bdc0ce46", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/eb14bdc0ce46.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/eb14bdc0ce46"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-07-23T20:23:10.914912+00:00", "summary": {"raw": "Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.\r\n\r\nBasically, the primary change to qtutils is just a list of aliases of log levels -> colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called [`RichStreamHandler`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-551). When used in place of a `logging.StreamHandler` for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.\r\n\r\n`RichStreamHandler` supports any file-like object whose `write()` method accepts a 'charformat' keyword argument. `OutputBox.write()` now supports this keyword argument, so the logger can be directly attached to the `OutputBox` in the process that contains it, such as runmanager/lyse/etc. Also, `zprocess.process_tree.StreamProxy`, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its `write()` method as of zprocess 2.5.1, meaning a `RichStreamHandler` used in a subprocess will work to forward correctly to an `OutputBox` in the parent process.\r\n\r\nSince you might want more colours, I also added a function to zprocess, [`rich_print()`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-571), which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.\r\n\r\nBoth the `RichStreamHandler` and `rich_print` fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. \r\n\r\nI imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.\r\n\r\nExample:\r\n\r\n```python\r\nimport logging\r\nfrom zprocess import RichStreamHandler # Requires zprocess 2.5.1\r\nlogger = logging.Logger('test')\r\nlogger.setLevel(logging.DEBUG)\r\nlogger.addHandler(RichStreamHandler()) # or RichStreamHandler(output_box) if in same process as output box\r\nlogger.debug('DEBUG log message')\r\nlogger.info('INFO log message')\r\nlogger.warning('WARNING log message')\r\nlogger.error('ERROR log message')\r\nlogger.critical('CRITICAL log message')\r\n```\r\n![outputbox_ss.png](https://bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png)\r\n\r\n\r\n* Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.\r\n\r\n* Added file-like stub methods to OutputBox so that it can be used in place of a\r\nfile-like object.\r\n\r\n* Add aliases for formatting based on log levels.\r\n\r\n* Fix failure to memoise text formatting.\r\n\r\n* Add font name as a varaible instead of using a string literal where it's used\r\n\r\n* Remove use of 'red' string favouring the RED variable instead.\r\n\r\n* Fixed bug which caused obscure error message due to font loading being attempted\r\nafter an exception in the main thread (`__file__` doesn't exist as seen from the\r\nthread apparantly - now we save the fonts location in a global varaible earlier)", "markup": "markdown", "html": "<p>Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.</p>\n<p>Basically, the primary change to qtutils is just a list of aliases of log levels -&gt; colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called <a data-is-external-link=\"true\" href=\"https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&amp;fileviewer=file-view-default#process_tree.py-551\" rel=\"nofollow\"><code>RichStreamHandler</code></a>. When used in place of a <code>logging.StreamHandler</code> for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.</p>\n<p><code>RichStreamHandler</code> supports any file-like object whose <code>write()</code> method accepts a 'charformat' keyword argument. <code>OutputBox.write()</code> now supports this keyword argument, so the logger can be directly attached to the <code>OutputBox</code> in the process that contains it, such as runmanager/lyse/etc. Also, <code>zprocess.process_tree.StreamProxy</code>, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its <code>write()</code> method as of zprocess 2.5.1, meaning a <code>RichStreamHandler</code> used in a subprocess will work to forward correctly to an <code>OutputBox</code> in the parent process.</p>\n<p>Since you might want more colours, I also added a function to zprocess, <a data-is-external-link=\"true\" href=\"https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&amp;fileviewer=file-view-default#process_tree.py-571\" rel=\"nofollow\"><code>rich_print()</code></a>, which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.</p>\n<p>Both the <code>RichStreamHandler</code> and <code>rich_print</code> fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. </p>\n<p>I imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.</p>\n<p>Example:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zprocess</span> <span class=\"kn\">import</span> <span class=\"n\">RichStreamHandler</span> <span class=\"c1\"># Requires zprocess 2.5.1</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span><span class=\"p\">(</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">RichStreamHandler</span><span class=\"p\">())</span> <span class=\"c1\"># or RichStreamHandler(output_box) if in same process as output box</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">&#39;DEBUG log message&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;INFO log message&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING log message&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">&#39;ERROR log message&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s1\">&#39;CRITICAL log message&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p><img alt=\"outputbox_ss.png\" src=\"data/bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png\" /></p>\n<ul>\n<li>\n<p>Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.</p>\n</li>\n<li>\n<p>Added file-like stub methods to OutputBox so that it can be used in place of a\nfile-like object.</p>\n</li>\n<li>\n<p>Add aliases for formatting based on log levels.</p>\n</li>\n<li>\n<p>Fix failure to memoise text formatting.</p>\n</li>\n<li>\n<p>Add font name as a varaible instead of using a string literal where it's used</p>\n</li>\n<li>\n<p>Remove use of 'red' string favouring the RED variable instead.</p>\n</li>\n<li>\n<p>Fixed bug which caused obscure error message due to font loading being attempted\nafter an exception in the main thread (<code>__file__</code> doesn't exist as seen from the\nthread apparantly - now we save the fonts location in a global varaible earlier)</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "a0c68c613524", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/a0c68c613524"}, "html": {"href": "#!/cbillington/qtutils/commits/a0c68c613524"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "participants": [{"role": "REVIEWER", "participated_on": "2018-07-23T23:47:34.750462+00:00", "type": "participant", "approved": false, "user": {"display_name": "Lincoln Turner", "uuid": "{7e35ca32-09d7-4a25-a548-32edef727dda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D"}, "html": {"href": "https://bitbucket.org/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2ac774c664cd58fc011cc65e0980b4c1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLT-3.png"}}, "nickname": "lincolndturner", "type": "user", "account_id": "5b46a53d845e7e2cdff75ad3"}}, {"role": "PARTICIPANT", "participated_on": "2018-07-24T16:34:16.448865+00:00", "type": "participant", "approved": false, "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"role": "REVIEWER", "participated_on": "2018-07-24T20:59:42.933621+00:00", "type": "participant", "approved": true, "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}}], "reason": "", "updated_on": "2018-07-24T21:03:34.982328+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "7629e11fe880", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/7629e11fe880.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/7629e11fe880"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}