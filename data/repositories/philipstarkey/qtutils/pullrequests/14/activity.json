{"pagelen": 50, "values": [{"update": {"description": "Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.\r\n\r\nBasically, the primary change to qtutils is just a list of aliases of log levels -> colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called [`RichStreamHandler`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-551). When used in place of a `logging.StreamHandler` for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.\r\n\r\n`RichStreamHandler` supports any file-like object whose `write()` method accepts a 'charformat' keyword argument. `OutputBox.write()` now supports this keyword argument, so the logger can be directly attached to the `OutputBox` in the process that contains it, such as runmanager/lyse/etc. Also, `zprocess.process_tree.StreamProxy`, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its `write()` method as of zprocess 2.5.1, meaning a `RichStreamHandler` used in a subprocess will work to forward correctly to an `OutputBox` in the parent process.\r\n\r\nSince you might want more colours, I also added a function to zprocess, [`rich_print()`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-571), which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.\r\n\r\nBoth the `RichStreamHandler` and `rich_print` fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. \r\n\r\nI imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.\r\n\r\nExample:\r\n\r\n```python\r\nimport logging\r\nfrom zprocess import RichStreamHandler # Requires zprocess 2.5.1\r\nlogger = logging.Logger('test')\r\nlogger.setLevel(logging.DEBUG)\r\nlogger.addHandler(RichStreamHandler()) # or RichStreamHandler(output_box) if in same process as output box\r\nlogger.debug('DEBUG log message')\r\nlogger.info('INFO log message')\r\nlogger.warning('WARNING log message')\r\nlogger.error('ERROR log message')\r\nlogger.critical('CRITICAL log message')\r\n```\r\n![outputbox_ss.png](https://bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png)\r\n\r\n\r\n* Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.\r\n\r\n* Added file-like stub methods to OutputBox so that it can be used in place of a\r\nfile-like object.\r\n\r\n* Add aliases for formatting based on log levels.\r\n\r\n* Fix failure to memoise text formatting.\r\n\r\n* Add font name as a varaible instead of using a string literal where it's used\r\n\r\n* Remove use of 'red' string favouring the RED variable instead.\r\n\r\n* Fixed bug which caused obscure error message due to font loading being attempted\r\nafter an exception in the main thread (`__file__` doesn't exist as seen from the\r\nthread apparantly - now we save the fonts location in a global varaible earlier)", "title": "Compatibility with coloured output from subprocesses", "destination": {"commit": {"hash": "eb14bdc0ce46", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/eb14bdc0ce46.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/eb14bdc0ce46"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a0c68c613524", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/a0c68c613524"}, "html": {"href": "#!/cbillington/qtutils/commits/a0c68c613524"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "state": "MERGED", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-07-24T21:03:34.994650+00:00"}, "pull_request": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}}, {"update": {"description": "Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.\r\n\r\nBasically, the primary change to qtutils is just a list of aliases of log levels -> colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called [`RichStreamHandler`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-551). When used in place of a `logging.StreamHandler` for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.\r\n\r\n`RichStreamHandler` supports any file-like object whose `write()` method accepts a 'charformat' keyword argument. `OutputBox.write()` now supports this keyword argument, so the logger can be directly attached to the `OutputBox` in the process that contains it, such as runmanager/lyse/etc. Also, `zprocess.process_tree.StreamProxy`, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its `write()` method as of zprocess 2.5.1, meaning a `RichStreamHandler` used in a subprocess will work to forward correctly to an `OutputBox` in the parent process.\r\n\r\nSince you might want more colours, I also added a function to zprocess, [`rich_print()`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-571), which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.\r\n\r\nBoth the `RichStreamHandler` and `rich_print` fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. \r\n\r\nI imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.\r\n\r\nExample:\r\n\r\n```python\r\nimport logging\r\nfrom zprocess import RichStreamHandler # Requires zprocess 2.5.1\r\nlogger = logging.Logger('test')\r\nlogger.setLevel(logging.DEBUG)\r\nlogger.addHandler(RichStreamHandler()) # or RichStreamHandler(output_box) if in same process as output box\r\nlogger.debug('DEBUG log message')\r\nlogger.info('INFO log message')\r\nlogger.warning('WARNING log message')\r\nlogger.error('ERROR log message')\r\nlogger.critical('CRITICAL log message')\r\n```\r\n![outputbox_ss.png](https://bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png)\r\n\r\n\r\n* Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.\r\n\r\n* Added file-like stub methods to OutputBox so that it can be used in place of a\r\nfile-like object.\r\n\r\n* Add aliases for formatting based on log levels.\r\n\r\n* Fix failure to memoise text formatting.\r\n\r\n* Add font name as a varaible instead of using a string literal where it's used\r\n\r\n* Remove use of 'red' string favouring the RED variable instead.\r\n\r\n* Fixed bug which caused obscure error message due to font loading being attempted\r\nafter an exception in the main thread (`__file__` doesn't exist as seen from the\r\nthread apparantly - now we save the fonts location in a global varaible earlier)", "title": "Compatibility with coloured output from subprocesses", "destination": {"commit": {"hash": "eb14bdc0ce46", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/eb14bdc0ce46.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/eb14bdc0ce46"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a0c68c613524", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/a0c68c613524"}, "html": {"href": "#!/cbillington/qtutils/commits/a0c68c613524"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-07-24T21:02:05.844456+00:00"}, "pull_request": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}}, {"approval": {"date": "2018-07-24T20:59:42.933621+00:00", "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}, "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}}, "pull_request": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}}, {"update": {"description": "Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.\r\n\r\nBasically, the primary change to qtutils is just a list of aliases of log levels -> colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called [`RichStreamHandler`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-551). When used in place of a `logging.StreamHandler` for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.\r\n\r\n`RichStreamHandler` supports any file-like object whose `write()` method accepts a 'charformat' keyword argument. `OutputBox.write()` now supports this keyword argument, so the logger can be directly attached to the `OutputBox` in the process that contains it, such as runmanager/lyse/etc. Also, `zprocess.process_tree.StreamProxy`, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its `write()` method as of zprocess 2.5.1, meaning a `RichStreamHandler` used in a subprocess will work to forward correctly to an `OutputBox` in the parent process.\r\n\r\nSince you might want more colours, I also added a function to zprocess, [`rich_print()`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-571), which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.\r\n\r\nBoth the `RichStreamHandler` and `rich_print` fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. \r\n\r\nI imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.\r\n\r\nExample:\r\n\r\n```python\r\nimport logging\r\nfrom zprocess import RichStreamHandler # Requires zprocess 2.5.1\r\nlogger = logging.Logger('test')\r\nlogger.setLevel(logging.DEBUG)\r\nlogger.addHandler(RichStreamHandler()) # or RichStreamHandler(output_box) if in same process as output box\r\nlogger.debug('DEBUG log message')\r\nlogger.info('INFO log message')\r\nlogger.warning('WARNING log message')\r\nlogger.error('ERROR log message')\r\nlogger.critical('CRITICAL log message')\r\n```\r\n![outputbox_ss.png](https://bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png)\r\n\r\n\r\n* Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.\r\n\r\n* Added file-like stub methods to OutputBox so that it can be used in place of a\r\nfile-like object.\r\n\r\n* Add aliases for formatting based on log levels.\r\n\r\n* Fix failure to memoise text formatting.\r\n\r\n* Add font name as a varaible instead of using a string literal where it's used\r\n\r\n* Remove use of 'red' string favouring the RED variable instead.\r\n\r\n* Fixed bug which caused obscure error message due to font loading being attempted\r\nafter an exception in the main thread (`__file__` doesn't exist as seen from the\r\nthread apparantly - now we save the fonts location in a global varaible earlier)", "title": "Compatibility with coloured output from subprocesses", "destination": {"commit": {"hash": "d087c7e6fc80", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/d087c7e6fc80.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/d087c7e6fc80"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "a0c68c613524", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/a0c68c613524"}, "html": {"href": "#!/cbillington/qtutils/commits/a0c68c613524"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-07-24T16:44:37.447054+00:00"}, "pull_request": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/comments/70894200.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14/_/diff#comment-70894200"}}, "parent": {"id": 70788948, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/comments/70788948.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14/_/diff#comment-70788948"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}, "content": {"raw": "Well, it's just test code, it's not required to use the library. I might just comment it out though so that the test code runs out of the box.", "markup": "markdown", "html": "<p>Well, it's just test code, it's not required to use the library. I might just comment it out though so that the test code runs out of the box.</p>", "type": "rendered"}, "created_on": "2018-07-24T16:34:16.439820+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-07-24T16:34:16.448865+00:00", "type": "pullrequest_comment", "id": 70894200}, "pull_request": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/comments/70893134.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14/_/diff#comment-70893134"}}, "parent": {"id": 70788777, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/comments/70788777.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14/_/diff#comment-70788777"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}, "content": {"raw": "This PR is agnostic about what you should do. *if* you use the logging library with the new handler, then you'll get automatic colours. But, you can also just call zprocess.rich_print() and specify the colours with each call. It should be pretty flexible.", "markup": "markdown", "html": "<p>This PR is agnostic about what you should do. <em>if</em> you use the logging library with the new handler, then you'll get automatic colours. But, you can also just call zprocess.rich_print() and specify the colours with each call. It should be pretty flexible.</p>", "type": "rendered"}, "created_on": "2018-07-24T16:25:28.967493+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-07-24T16:25:28.974106+00:00", "type": "pullrequest_comment", "id": 70893134}, "pull_request": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/comments/70788948.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14/_/diff#comment-70788948"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}, "content": {"raw": "I think this looks good. I don\u2019t have time to do any testing \\(thesis!\\) but I\u2019m happy with the general idea here.\n\nIf the test code is going to use zprocess, we should probably consider adding a requirements.txt file \\(or whatever we have to do to make sure it\u2019s installed as a dependency\\). Alternatively, maybe just not include zprocess in the testing code?", "markup": "markdown", "html": "<p>I think this looks good. I don\u2019t have time to do any testing (thesis!) but I\u2019m happy with the general idea here.</p>\n<p>If the test code is going to use zprocess, we should probably consider adding a requirements.txt file (or whatever we have to do to make sure it\u2019s installed as a dependency). Alternatively, maybe just not include zprocess in the testing code?</p>", "type": "rendered"}, "created_on": "2018-07-24T00:19:55.431065+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2018-07-24T00:19:55.438714+00:00", "type": "pullrequest_comment", "id": 70788948}, "pull_request": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/comments/70788777.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14/_/diff#comment-70788777"}}, "parent": {"id": 70787516, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/comments/70787516.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14/_/diff#comment-70787516"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}, "content": {"raw": "I think maybe the confusion is because you are using `print()` from your worker process rather than the logging library? \\(at least based on the latest version in the pull request\\).\n\nYou might want to look at how the NI card does it \\(for instance [here](https://bitbucket.org/labscript_suite/labscript_devices/src/bfb2b80665bdb15aacc5b8efc79653093bff6edd/NI_PCIe_6363.py#lines-297)\\). I think that\u2019s the way this pull request is supposed to be used and should then format the colours correctly depending on the log level used.", "markup": "markdown", "html": "<p>I think maybe the confusion is because you are using <code>print()</code> from your worker process rather than the logging library? (at least based on the latest version in the pull request).</p>\n<p>You might want to look at how the NI card does it (for instance <a data-is-external-link=\"true\" href=\"https://bitbucket.org/labscript_suite/labscript_devices/src/bfb2b80665bdb15aacc5b8efc79653093bff6edd/NI_PCIe_6363.py#lines-297\" rel=\"nofollow\">here</a>). I think that\u2019s the way this pull request is supposed to be used and should then format the colours correctly depending on the log level used.</p>", "type": "rendered"}, "created_on": "2018-07-24T00:15:10.575310+00:00", "user": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}, "updated_on": "2018-07-24T00:15:10.580897+00:00", "type": "pullrequest_comment", "id": 70788777}, "pull_request": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}}, {"comment": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/comments/70787516.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14/_/diff#comment-70787516"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}, "content": {"raw": "This looks super! \n\nOf course your approach makes more sense than mine as we already have out-of-band formatting going over the zmq packets. I don\u2019t fully understand how this interacts with existing log infrastructure in the main processes, but I\u2019ll have a play around. Provided stdout and stderr still go through as before, I think this works nicely.", "markup": "markdown", "html": "<p>This looks super! </p>\n<p>Of course your approach makes more sense than mine as we already have out-of-band formatting going over the zmq packets. I don\u2019t fully understand how this interacts with existing log infrastructure in the main processes, but I\u2019ll have a play around. Provided stdout and stderr still go through as before, I think this works nicely.</p>", "type": "rendered"}, "created_on": "2018-07-23T23:47:34.705133+00:00", "user": {"display_name": "Lincoln Turner", "uuid": "{7e35ca32-09d7-4a25-a548-32edef727dda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D"}, "html": {"href": "https://bitbucket.org/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2ac774c664cd58fc011cc65e0980b4c1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLT-3.png"}}, "nickname": "lincolndturner", "type": "user", "account_id": "5b46a53d845e7e2cdff75ad3"}, "updated_on": "2018-07-23T23:47:34.750462+00:00", "type": "pullrequest_comment", "id": 70787516}, "pull_request": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}}, {"update": {"description": "Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.\r\n\r\nBasically, the primary change to qtutils is just a list of aliases of log levels -> colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called [`RichStreamHandler`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-551). When used in place of a `logging.StreamHandler` for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.\r\n\r\n`RichStreamHandler` supports any file-like object whose `write()` method accepts a 'charformat' keyword argument. `OutputBox.write()` now supports this keyword argument, so the logger can be directly attached to the `OutputBox` in the process that contains it, such as runmanager/lyse/etc. Also, `zprocess.process_tree.StreamProxy`, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its `write()` method as of zprocess 2.5.1, meaning a `RichStreamHandler` used in a subprocess will work to forward correctly to an `OutputBox` in the parent process.\r\n\r\nSince you might want more colours, I also added a function to zprocess, [`rich_print()`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-571), which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.\r\n\r\nBoth the `RichStreamHandler` and `rich_print` fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. \r\n\r\nI imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.\r\n\r\nExample:\r\n\r\n```python\r\nimport logging\r\nfrom zprocess import RichStreamHandler # Requires zprocess 2.5.1\r\nlogger = logging.Logger('test')\r\nlogger.setLevel(logging.DEBUG)\r\nlogger.addHandler(RichStreamHandler()) # or RichStreamHandler(output_box) if in same process as output box\r\nlogger.debug('DEBUG log message')\r\nlogger.info('INFO log message')\r\nlogger.warning('WARNING log message')\r\nlogger.error('ERROR log message')\r\nlogger.critical('CRITICAL log message')\r\n```\r\n![outputbox_ss.png](https://bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png)\r\n\r\n\r\n* Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.\r\n\r\n* Added file-like stub methods to OutputBox so that it can be used in place of a\r\nfile-like object.\r\n\r\n* Add aliases for formatting based on log levels.\r\n\r\n* Fix failure to memoise text formatting.\r\n\r\n* Add font name as a varaible instead of using a string literal where it's used\r\n\r\n* Remove use of 'red' string favouring the RED variable instead.\r\n\r\n* Fixed bug which caused obscure error message due to font loading being attempted\r\nafter an exception in the main thread (`__file__` doesn't exist as seen from the\r\nthread apparantly - now we save the fonts location in a global varaible earlier)", "title": "Compatibility with coloured output from subprocesses", "destination": {"commit": {"hash": "d087c7e6fc80", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/d087c7e6fc80.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/d087c7e6fc80"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "027c924c4682", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/027c924c4682"}, "html": {"href": "#!/cbillington/qtutils/commits/027c924c4682"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-07-23T20:23:46.189417+00:00"}, "pull_request": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}}, {"update": {"description": "Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.\r\n\r\nBasically, the primary change to qtutils is just a list of aliases of log levels -> colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called [`RichStreamHandler`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-551). When used in place of a `logging.StreamHandler` for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.\r\n\r\n`RichStreamHandler` supports any file-like object whose `write()` method accepts a 'charformat' keyword argument. `OutputBox.write()` now supports this keyword argument, so the logger can be directly attached to the `OutputBox` in the process that contains it, such as runmanager/lyse/etc. Also, `zprocess.process_tree.StreamProxy`, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its `write()` method as of zprocess 2.5.1, meaning a `RichStreamHandler` used in a subprocess will work to forward correctly to an `OutputBox` in the parent process.\r\n\r\nSince you might want more colours, I also added a function to zprocess, `rich_print()`, which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.\r\n\r\nBoth the `RichStreamHandler` and `rich_print` fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. \r\n\r\nI imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.\r\n\r\nExample:\r\n\r\n```python\r\nimport logging\r\nfrom zprocess import RichStreamHandler # Requires zprocess 2.5.1\r\nlogger = logging.Logger('test')\r\nlogger.setLevel(logging.DEBUG)\r\nlogger.addHandler(RichStreamHandler()) # or RichStreamHandler(output_box) if in same process as output box\r\nlogger.debug('DEBUG log message')\r\nlogger.info('INFO log message')\r\nlogger.warning('WARNING log message')\r\nlogger.error('ERROR log message')\r\nlogger.critical('CRITICAL log message')\r\n```\r\n![outputbox_ss.png](https://bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png)\r\n\r\n\r\n* Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.\r\n\r\n* Added file-like stub methods to OutputBox so that it can be used in place of a\r\nfile-like object.\r\n\r\n* Add aliases for formatting based on log levels.\r\n\r\n* Fix failure to memoise text formatting.\r\n\r\n* Add font name as a varaible instead of using a string literal where it's used\r\n\r\n* Remove use of 'red' string favouring the RED variable instead.\r\n\r\n* Fixed bug which caused obscure error message due to font loading being attempted\r\nafter an exception in the main thread (`__file__` doesn't exist as seen from the\r\nthread apparantly - now we save the fonts location in a global varaible earlier)", "title": "Compatibility with coloured output from subprocesses", "destination": {"commit": {"hash": "d087c7e6fc80", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/d087c7e6fc80.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/d087c7e6fc80"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "027c924c4682", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/027c924c4682"}, "html": {"href": "#!/cbillington/qtutils/commits/027c924c4682"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-07-23T20:23:11.012310+00:00"}, "pull_request": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}}, {"update": {"description": "Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.\r\n\r\nBasically, the primary change to qtutils is just a list of aliases of log levels -> colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called [`RichStreamHandler`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-551). When used in place of a `logging.StreamHandler` for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.\r\n\r\n`RichStreamHandler` supports any file-like object whose `write()` method accepts a 'charformat' keyword argument. `OutputBox.write()` now supports this keyword argument, so the logger can be directly attached to the `OutputBox` in the process that contains it, such as runmanager/lyse/etc. Also, `zprocess.process_tree.StreamProxy`, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its `write()` method as of zprocess 2.5.1, meaning a `RichStreamHandler` used in a subprocess will work to forward correctly to an `OutputBox` in the parent process.\r\n\r\nSince you might want more colours, I also added a function to zprocess, `rich_print()`, which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.\r\n\r\nBoth the `RichStreamHandler` and `rich_print` fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. \r\n\r\nI imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.\r\n\r\nExample:\r\n\r\n```python\r\nimport logging\r\nfrom zprocess import RichStreamHandler # Requires zprocess 2.5.1\r\nlogger = logging.Logger('test')\r\nlogger.setLevel(logging.DEBUG)\r\nlogger.addHandler(RichStreamHandler()) # or RichStreamHandler(output_box) if in same process as output box\r\nlogger.debug('DEBUG log message')\r\nlogger.info('INFO log message')\r\nlogger.warning('WARNING log message')\r\nlogger.error('ERROR log message')\r\nlogger.critical('CRITICAL log message')\r\n```\r\n![outputbox_ss.png](https://bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png)\r\n\r\n\r\n* Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.\r\n\r\n* Added file-like stub methods to OutputBox so that it can be used in place of a\r\nfile-like object.\r\n\r\n* Add aliases for formatting based on log levels.\r\n\r\n* Fix failure to memoise text formatting.\r\n\r\n* Add font name as a varaible instead of using a string literal where it's used\r\n\r\n* Remove use of 'red' string favouring the RED variable instead.\r\n\r\n* Fixed bug which caused obscure error message due to font loading being attempted\r\nafter an exception in the main thread (`__file__` doesn't exist as seen from the\r\nthread apparantly - now we save the fonts location in a global varaible earlier)", "title": "Compatibility with coloured output from subprocesses", "destination": {"commit": {"hash": "d087c7e6fc80", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/d087c7e6fc80.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/d087c7e6fc80"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "reason": "", "source": {"commit": {"hash": "027c924c4682", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/027c924c4682"}, "html": {"href": "#!/cbillington/qtutils/commits/027c924c4682"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "state": "OPEN", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "date": "2018-07-23T20:23:10.932281+00:00"}, "pull_request": {"type": "pullrequest", "id": 14, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}}, "title": "Compatibility with coloured output from subprocesses"}}]}