{"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/2/comments/57361464.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/2/_/diff#comment-57361464"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 2, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/2.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/2"}}, "title": "Python 3"}, "content": {"raw": "I have tested that I can run a shot from runmanager through to lyse with this code, and I tested that the reraising of exceptions works.\n\nOf course, we can't test Python 3 with labscript as you mentioned, so any uncovering of Python 3 bugs in the way labscript uses qtutils will have to be uncovered during testing the ports of those programs.\n\nI've applied a small patch (below) to remove the `six` dependency and to avoid using the old name `Queue` for the module (convention when making Python 2/3 compatible code is to use the Python 3 name where possible - but I'm just importing the `Queue` class by itself to avoid the issue).\n\nAlso bumping the version number to 2.1.0-rc1 and will make a release zip file that can be installed for testing and porting other apps\n\n\n```\n#!diff\n\ndiff -r 3909992ac18d -r 021bf53b4635 qtutils/invoke_in_main.py\n--- a/qtutils/invoke_in_main.py\tTue Feb 27 11:16:47 2018 +1100\n+++ b/qtutils/invoke_in_main.py\tTue Feb 27 12:34:38 2018 +1100\n@@ -17,17 +17,25 @@\n PY2 = sys.version_info[0] == 2\n if PY2:\n     str = unicode\n-    import Queue\n+    from Queue import Queue\n else:\n-    import queue as Queue\n+    from queue import Queue\n \n-import six\n import threading\n import functools\n \n from qtutils.qt.QtCore import QEvent, QObject, QCoreApplication, QTimer, QThread\n \n \n+def _reraise(exc_info):\n+    type, value, traceback = exc_info\n+    # handle python2/3 difference in raising exception        \n+    if PY2:\n+        exec('raise type, value, traceback', globals(), locals())\n+    else:\n+        raise value.with_traceback(traceback)\n+\n+\n class CallEvent(QEvent):\n     \"\"\"An event containing a request for a function call.\"\"\"\n     EVENT_TYPE = QEvent.Type(QEvent.registerEventType())\n@@ -129,7 +137,7 @@\n     will return a list of [result,exception] where exception=[type,value,traceback]\n     of the exception.  Functions are guaranteed to be called in the order\n     they were requested.\"\"\"\n-    queue = Queue.Queue()\n+    queue = Queue()\n     QCoreApplication.postEvent(caller, CallEvent(queue, exceptions_in_main, fn, *args, **kwargs))\n     return queue\n \n@@ -153,7 +161,7 @@\n     \"\"\"\n     result, exception = queue.get()\n     if exception is not None:\n-        six.reraise(*exception)\n+        _reraise(exception)\n     return result\n \n \ndiff -r 3909992ac18d -r 021bf53b4635 setup.py\n--- a/setup.py\tTue Feb 27 11:16:47 2018 +1100\n+++ b/setup.py\tTue Feb 27 12:34:38 2018 +1100\n@@ -27,7 +27,7 @@\n     BUILD_PYQT5_ICONS_RESOURCE = False\n     sys.argv.remove('NO_PYQT5')\n \n-VERSION = '2.0.0'\n+VERSION = '2.1.0-rc1'\n \n # conditional for readthedocs environment\n on_rtd = os.environ.get('READTHEDOCS') == 'True'\n\n```", "markup": "markdown", "html": "<p>I have tested that I can run a shot from runmanager through to lyse with this code, and I tested that the reraising of exceptions works.</p>\n<p>Of course, we can't test Python 3 with labscript as you mentioned, so any uncovering of Python 3 bugs in the way labscript uses qtutils will have to be uncovered during testing the ports of those programs.</p>\n<p>I've applied a small patch (below) to remove the <code>six</code> dependency and to avoid using the old name <code>Queue</code> for the module (convention when making Python 2/3 compatible code is to use the Python 3 name where possible - but I'm just importing the <code>Queue</code> class by itself to avoid the issue).</p>\n<p>Also bumping the version number to 2.1.0-rc1 and will make a release zip file that can be installed for testing and porting other apps</p>\n<div class=\"codehilite language-diff\"><pre><span></span><span class=\"gh\">diff -r 3909992ac18d -r 021bf53b4635 qtutils/invoke_in_main.py</span>\n<span class=\"gd\">--- a/qtutils/invoke_in_main.py Tue Feb 27 11:16:47 2018 +1100</span>\n<span class=\"gi\">+++ b/qtutils/invoke_in_main.py Tue Feb 27 12:34:38 2018 +1100</span>\n<span class=\"gu\">@@ -17,17 +17,25 @@</span>\n PY2 = sys.version_info[0] == 2\n if PY2:\n     str = unicode\n<span class=\"gd\">-    import Queue</span>\n<span class=\"gi\">+    from Queue import Queue</span>\n else:\n<span class=\"gd\">-    import queue as Queue</span>\n<span class=\"gi\">+    from queue import Queue</span>\n\n<span class=\"gd\">-import six</span>\n import threading\n import functools\n\n from qtutils.qt.QtCore import QEvent, QObject, QCoreApplication, QTimer, QThread\n\n\n<span class=\"gi\">+def _reraise(exc_info):</span>\n<span class=\"gi\">+    type, value, traceback = exc_info</span>\n<span class=\"gi\">+    # handle python2/3 difference in raising exception        </span>\n<span class=\"gi\">+    if PY2:</span>\n<span class=\"gi\">+        exec(&#39;raise type, value, traceback&#39;, globals(), locals())</span>\n<span class=\"gi\">+    else:</span>\n<span class=\"gi\">+        raise value.with_traceback(traceback)</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+</span>\n class CallEvent(QEvent):\n     &quot;&quot;&quot;An event containing a request for a function call.&quot;&quot;&quot;\n     EVENT_TYPE = QEvent.Type(QEvent.registerEventType())\n<span class=\"gu\">@@ -129,7 +137,7 @@</span>\n     will return a list of [result,exception] where exception=[type,value,traceback]\n     of the exception.  Functions are guaranteed to be called in the order\n     they were requested.&quot;&quot;&quot;\n<span class=\"gd\">-    queue = Queue.Queue()</span>\n<span class=\"gi\">+    queue = Queue()</span>\n     QCoreApplication.postEvent(caller, CallEvent(queue, exceptions_in_main, fn, *args, **kwargs))\n     return queue\n\n<span class=\"gu\">@@ -153,7 +161,7 @@</span>\n     &quot;&quot;&quot;\n     result, exception = queue.get()\n     if exception is not None:\n<span class=\"gd\">-        six.reraise(*exception)</span>\n<span class=\"gi\">+        _reraise(exception)</span>\n     return result\n\n\n<span class=\"gh\">diff -r 3909992ac18d -r 021bf53b4635 setup.py</span>\n<span class=\"gd\">--- a/setup.py  Tue Feb 27 11:16:47 2018 +1100</span>\n<span class=\"gi\">+++ b/setup.py  Tue Feb 27 12:34:38 2018 +1100</span>\n<span class=\"gu\">@@ -27,7 +27,7 @@</span>\n     BUILD_PYQT5_ICONS_RESOURCE = False\n     sys.argv.remove(&#39;NO_PYQT5&#39;)\n\n<span class=\"gd\">-VERSION = &#39;2.0.0&#39;</span>\n<span class=\"gi\">+VERSION = &#39;2.1.0-rc1&#39;</span>\n\n # conditional for readthedocs environment\n on_rtd = os.environ.get(&#39;READTHEDOCS&#39;) == &#39;True&#39;\n</pre></div>", "type": "rendered"}, "created_on": "2018-02-27T01:37:49.062168+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-02-27T01:37:49.065273+00:00", "type": "pullrequest_comment", "id": 57361464}