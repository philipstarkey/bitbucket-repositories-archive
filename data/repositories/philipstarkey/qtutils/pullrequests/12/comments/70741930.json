{"links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/12/comments/70741930.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/12/_/diff#comment-70741930"}}, "parent": {"id": 70680231, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/12/comments/70680231.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/12/_/diff#comment-70680231"}}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 12, "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/12.json"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/12"}}, "title": "Syntax highlighting: basic syntax highlighter based on \"log levels\" regexps"}, "content": {"raw": "The outputbox receives messages from all streams over a single zmq socket with multipart messages - the first message being the colour/bold/italic info (or 'stdout' or 'stderr' which are shorthand for white and red) and the second message being the content. So multiple zmq sockets would be unnecessary.\n\nCould be worth subbclassing the StreamHandler of the logging module, having it check if stdout is a zprocess.OutputInterceptor and calling a to-be-written method of the OutputInterceptor that allows you to specify the colour. Presently the OutputInterceptor just writes 'stdout' or 'stderr' for the formatting message but it could write anything you like. The logging handler could then be used labscript-suite-wide.\n\nThe bugfix is welcome but I would swap it so that the memoisation is by string rather than by tuples. With your fix 'stdout' and 'stderr' are not memoised, and the code catches a KeyError every time they are looked up, which is likely to be not super performant (though it can't be that bad if the memoisation was broken all along, good catch!). \n\nI introduced the colours for the express purpose of colourising log output to make things more readable, so I'm behind this, just a matter of hashing out the implementation.\n\nSo I'm thinking:\n\nI write a zprocess functions called print_debug print_error etc that accept text and output it with formatting. If stdout is just a normal terminal or something else then this gets ignored and the text will be written to stdout unmodified. If stdout is an OutputInterceptor though then the formatting info gets sent along to the receiving OutputBox. Code can call these functions explicitly, or, more likely, a logging handler will plug into it and colourise by severity. setup_logging can then define a logging handler that does this so that it gets used labscript-wide.\n\nI'm not too bothered by implicitly colourising by regex, but it would be nice to be able to colourise output without having to include the magic words as well.", "markup": "markdown", "html": "<p>The outputbox receives messages from all streams over a single zmq socket with multipart messages - the first message being the colour/bold/italic info (or 'stdout' or 'stderr' which are shorthand for white and red) and the second message being the content. So multiple zmq sockets would be unnecessary.</p>\n<p>Could be worth subbclassing the StreamHandler of the logging module, having it check if stdout is a zprocess.OutputInterceptor and calling a to-be-written method of the OutputInterceptor that allows you to specify the colour. Presently the OutputInterceptor just writes 'stdout' or 'stderr' for the formatting message but it could write anything you like. The logging handler could then be used labscript-suite-wide.</p>\n<p>The bugfix is welcome but I would swap it so that the memoisation is by string rather than by tuples. With your fix 'stdout' and 'stderr' are not memoised, and the code catches a KeyError every time they are looked up, which is likely to be not super performant (though it can't be that bad if the memoisation was broken all along, good catch!). </p>\n<p>I introduced the colours for the express purpose of colourising log output to make things more readable, so I'm behind this, just a matter of hashing out the implementation.</p>\n<p>So I'm thinking:</p>\n<p>I write a zprocess functions called print_debug print_error etc that accept text and output it with formatting. If stdout is just a normal terminal or something else then this gets ignored and the text will be written to stdout unmodified. If stdout is an OutputInterceptor though then the formatting info gets sent along to the receiving OutputBox. Code can call these functions explicitly, or, more likely, a logging handler will plug into it and colourise by severity. setup_logging can then define a logging handler that does this so that it gets used labscript-wide.</p>\n<p>I'm not too bothered by implicitly colourising by regex, but it would be nice to be able to colourise output without having to include the magic words as well.</p>", "type": "rendered"}, "created_on": "2018-07-23T15:15:17.900602+00:00", "user": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "updated_on": "2018-07-23T16:16:27.285925+00:00", "type": "pullrequest_comment", "id": 70741930}