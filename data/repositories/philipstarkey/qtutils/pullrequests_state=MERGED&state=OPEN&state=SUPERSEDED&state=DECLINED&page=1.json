{"pagelen": 50, "values": [{"description": "* PEP8 formating\r\n\r\n* PyQt5 imports\r\n\r\n* german grammer fix :P\r\n\r\n* Qt abstraction wrapper\r\n\r\n* PyQt4 API v2\r\n\r\nMost of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\r\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/1/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:73144e1521f1%0D478e547522b4?from_pullrequest_id=1"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/1/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/1"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:73144e1521f1%0D478e547522b4?from_pullrequest_id=1"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/1/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/1/statuses_page=1.json"}}, "title": "PyQt5", "close_source_branch": false, "type": "pullrequest", "id": 1, "destination": {"commit": {"hash": "478e547522b4", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/478e547522b4.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/478e547522b4"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2017-07-22T10:20:31.489274+00:00", "summary": {"raw": "* PEP8 formating\r\n\r\n* PyQt5 imports\r\n\r\n* german grammer fix :P\r\n\r\n* Qt abstraction wrapper\r\n\r\n* PyQt4 API v2\r\n\r\nMost of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\r\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.", "markup": "markdown", "html": "<ul>\n<li>\n<p>PEP8 formating</p>\n</li>\n<li>\n<p>PyQt5 imports</p>\n</li>\n<li>\n<p>german grammer fix :P</p>\n</li>\n<li>\n<p>Qt abstraction wrapper</p>\n</li>\n<li>\n<p>PyQt4 API v2</p>\n</li>\n</ul>\n<p>Most of the PEP8 stuff is whitespaces so it might help to set ignore whitespaces when reviewing.\nAfter this we should also raise the version number to 2 so that the updated labscript_suite will only work with this version of qtutils.</p>", "type": "rendered"}, "source": {"commit": {"hash": "0b1649c413ce", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/0b1649c413ce"}, "html": {"href": "#!/PhyNerd/qtutils/commits/0b1649c413ce"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "default"}}, "comment_count": 77, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2017-08-15T21:20:05.168253+00:00", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "merge_commit": {"hash": "73144e1521f1", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/73144e1521f1.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/73144e1521f1"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This should make qtutils Python 3 compatible.\r\n\r\n* Added __future__ imports and did Python 3 adjustments\r\n\r\nAll the small demo codes now work under python 2 and python 3. I was not able to test with labscript stuff, as that code is not python 3 compatible.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/2/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:dcfd3880d69e%0Def9cb78d5839?from_pullrequest_id=2"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/2/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/2.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/2/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/2/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/2"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/2/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:dcfd3880d69e%0Def9cb78d5839?from_pullrequest_id=2"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/2/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/2/statuses_page=1.json"}}, "title": "Python 3", "close_source_branch": false, "type": "pullrequest", "id": 2, "destination": {"commit": {"hash": "ef9cb78d5839", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/ef9cb78d5839.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/ef9cb78d5839"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2017-08-18T16:28:30.328177+00:00", "summary": {"raw": "This should make qtutils Python 3 compatible.\r\n\r\n* Added __future__ imports and did Python 3 adjustments\r\n\r\nAll the small demo codes now work under python 2 and python 3. I was not able to test with labscript stuff, as that code is not python 3 compatible.", "markup": "markdown", "html": "<p>This should make qtutils Python 3 compatible.</p>\n<ul>\n<li>Added <strong>future</strong> imports and did Python 3 adjustments</li>\n</ul>\n<p>All the small demo codes now work under python 2 and python 3. I was not able to test with labscript stuff, as that code is not python 3 compatible.</p>", "type": "rendered"}, "source": {"commit": {"hash": "e75a132cc0ba", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/e75a132cc0ba"}, "html": {"href": "#!/PhyNerd/qtutils/commits/e75a132cc0ba"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "default"}}, "comment_count": 23, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-02-28T23:41:19.373456+00:00", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "merge_commit": {"hash": "dcfd3880d69e", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/dcfd3880d69e.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/dcfd3880d69e"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "This fixes issue #5 by mapping QtCore.QItemSelectionModel to QtGui.QItemSelectionModel in Qt4.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/3/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:7f8f95d2965b%0D73144e1521f1?from_pullrequest_id=3"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/3/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/3.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/3/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/3/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/3"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/3/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:7f8f95d2965b%0D73144e1521f1?from_pullrequest_id=3"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/3/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/3/statuses_page=1.json"}}, "title": "fix for issue #5", "close_source_branch": false, "type": "pullrequest", "id": 3, "destination": {"commit": {"hash": "73144e1521f1", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/73144e1521f1.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/73144e1521f1"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2017-11-09T19:21:57.694724+00:00", "summary": {"raw": "This fixes issue #5 by mapping QtCore.QItemSelectionModel to QtGui.QItemSelectionModel in Qt4.", "markup": "markdown", "html": "<p>This fixes issue <a href=\"#!/philipstarkey/qtutils/issues/5/qitemselectionmodel-location-has-changed\" rel=\"nofollow\" title=\"QItemSelectionModel location has changed between PyQt4 and PyQt5\" class=\"ap-connect-link\"><s>#5</s></a> by mapping QtCore.QItemSelectionModel to QtGui.QItemSelectionModel in Qt4.</p>", "type": "rendered"}, "source": {"commit": {"hash": "a36e5b63e73e", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils/commit/a36e5b63e73e"}, "html": {"href": "#!/PhyNerd/qtutils/commits/a36e5b63e73e"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/PhyNerd/qtutils"}, "html": {"href": "#!/PhyNerd/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "PhyNerd/qtutils", "uuid": "{aff9a68b-d7af-4fb7-9c29-1dbe13f4bcc7}"}, "branch": {"name": "issue5"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-01-15T01:10:46.647811+00:00", "author": {"display_name": "Jan Werkmann", "uuid": "{44c4905c-2b90-4045-a5f1-652b8e228626}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D"}, "html": {"href": "https://bitbucket.org/%7B44c4905c-2b90-4045-a5f1-652b8e228626%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5/07e5095a-4741-4dc0-a462-9c7d455f961d/128"}}, "nickname": "PhyNerd", "type": "user", "account_id": "557058:a70cc9cf-684e-4849-a61a-9ade4d7218b5"}, "merge_commit": {"hash": "7f8f95d2965b", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/7f8f95d2965b.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/7f8f95d2965b"}}}, "closed_by": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}}, {"description": "I've started on sphinx documentation for qtutils. The documentation side of things works \\(see [here](http://qtutils.readthedocs.io/en/latest/index.html)\\), however I have not tested qtutils on a PC that actually uses it for something yet. We really need to do this as I've had to:\r\n\r\n* Modify setup.py so it doesn't build icons on readthedocs \\(since pyrcc isn't available\\)\r\n* Modify locking.py and invoke\\_in\\_main.py so that they explicitly import Qt classes so I can \"mock\" them in the readthedocs build environment \\(as you can't install Qt on readthedocs\\). This will need to be done to the other Qt imports eventually too when we add documentation for them \\(not to mention all of the labscript suite once we properly document that!\\)\r\n* renamed an internal part of invoke\\_in\\_main so it is obviously for internal use \\(and not part of the API\\)\r\n\r\nAnyway, I appreciate any testing, comments!\r\n\r\n@PhyNerd Didn't know if you wanted to be included in things like this or not. Feel free to ignore it if you have better things to do with your time :slight_smile:", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/4/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:bc1c47fec4a6%0D7f8f95d2965b?from_pullrequest_id=4"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/4/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/4.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/4/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/4/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/4"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/4/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:bc1c47fec4a6%0D7f8f95d2965b?from_pullrequest_id=4"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/4/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/4/statuses_page=1.json"}}, "title": "Added sphinx docs for invoke_in_main", "close_source_branch": false, "type": "pullrequest", "id": 4, "destination": {"commit": {"hash": "7f8f95d2965b", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/7f8f95d2965b.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/7f8f95d2965b"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-01-29T05:24:56.570780+00:00", "summary": {"raw": "I've started on sphinx documentation for qtutils. The documentation side of things works \\(see [here](http://qtutils.readthedocs.io/en/latest/index.html)\\), however I have not tested qtutils on a PC that actually uses it for something yet. We really need to do this as I've had to:\r\n\r\n* Modify setup.py so it doesn't build icons on readthedocs \\(since pyrcc isn't available\\)\r\n* Modify locking.py and invoke\\_in\\_main.py so that they explicitly import Qt classes so I can \"mock\" them in the readthedocs build environment \\(as you can't install Qt on readthedocs\\). This will need to be done to the other Qt imports eventually too when we add documentation for them \\(not to mention all of the labscript suite once we properly document that!\\)\r\n* renamed an internal part of invoke\\_in\\_main so it is obviously for internal use \\(and not part of the API\\)\r\n\r\nAnyway, I appreciate any testing, comments!\r\n\r\n@PhyNerd Didn't know if you wanted to be included in things like this or not. Feel free to ignore it if you have better things to do with your time :slight_smile:", "markup": "markdown", "html": "<p>I've started on sphinx documentation for qtutils. The documentation side of things works (see <a data-is-external-link=\"true\" href=\"http://qtutils.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">here</a>), however I have not tested qtutils on a PC that actually uses it for something yet. We really need to do this as I've had to:</p>\n<ul>\n<li>Modify setup.py so it doesn't build icons on readthedocs (since pyrcc isn't available)</li>\n<li>Modify locking.py and invoke_in_main.py so that they explicitly import Qt classes so I can \"mock\" them in the readthedocs build environment (as you can't install Qt on readthedocs). This will need to be done to the other Qt imports eventually too when we add documentation for them (not to mention all of the labscript suite once we properly document that!)</li>\n<li>renamed an internal part of invoke_in_main so it is obviously for internal use (and not part of the API)</li>\n</ul>\n<p>Anyway, I appreciate any testing, comments!</p>\n<p>@PhyNerd Didn't know if you wanted to be included in things like this or not. Feel free to ignore it if you have better things to do with your time <img class=\"emoji\" src=\"data/pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net/standard/551c9814-1d37-4573-819d-afab3afeaf32/48x48/1f642.png\" alt=\"\ud83d\ude42\" title=\":slight_smile:\" data-emoji-short-name=\":slight_smile:\" /></p>", "type": "rendered"}, "source": {"commit": {"hash": "bc1c47fec4a6", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev/commit/bc1c47fec4a6"}, "html": {"href": "#!/pstarkey/qtutils-dev/commits/bc1c47fec4a6"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils-dev"}, "html": {"href": "#!/pstarkey/qtutils-dev"}, "avatar": {"href": "data/bytebucket.org/ravatar/{916b6aa5-ce08-4c6a-a893-abea22e41679}ts=python"}}, "type": "repository", "name": "qtutils-dev", "full_name": "pstarkey/qtutils-dev", "uuid": "{916b6aa5-ce08-4c6a-a893-abea22e41679}"}, "branch": {"name": "default"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-02-26T00:15:26.038721+00:00", "author": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "merge_commit": {"hash": "bc1c47fec4a6", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/bc1c47fec4a6.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/bc1c47fec4a6"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "separate `print()` and `write()` methods for the output box, one of which obeys the semantics of the python `print()` function (newlines, separators), and the other of which is more like `file.write()`, with no newlines added or anything. \r\n\r\nAdded colour, bold and italics options for text added with these methods\r\n(or text received over the socket).\r\n\r\nThe old `output(text, red=False)` method is retained for backward compatibility,  but is simply a wrapper for `write(text, color='red' if red else WHITE)`\r\n\r\nWe can use the colour to make labscript program output more readable - to distinguish between program output and user code output, to distinguish between messages that are waiting on a result and messages indicating success and failure, etc. \r\n\r\nThis submodule works in Python 2 or 3.\r\n\r\n![outputbox_screenshot.png](https://bitbucket.org/repo/ek5pMo9/images/3453631655-outputbox_screenshot.png)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/5/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:ef9cb78d5839%0Dbc1c47fec4a6?from_pullrequest_id=5"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/5/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/5.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/5/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/5/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/5"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/5/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:ef9cb78d5839%0Dbc1c47fec4a6?from_pullrequest_id=5"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/5/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/5/statuses_page=1.json"}}, "title": "Standardising interface, colour, and bold", "close_source_branch": true, "type": "pullrequest", "id": 5, "destination": {"commit": {"hash": "bc1c47fec4a6", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/bc1c47fec4a6.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/bc1c47fec4a6"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-02-26T07:12:12.983985+00:00", "summary": {"raw": "separate `print()` and `write()` methods for the output box, one of which obeys the semantics of the python `print()` function (newlines, separators), and the other of which is more like `file.write()`, with no newlines added or anything. \r\n\r\nAdded colour, bold and italics options for text added with these methods\r\n(or text received over the socket).\r\n\r\nThe old `output(text, red=False)` method is retained for backward compatibility,  but is simply a wrapper for `write(text, color='red' if red else WHITE)`\r\n\r\nWe can use the colour to make labscript program output more readable - to distinguish between program output and user code output, to distinguish between messages that are waiting on a result and messages indicating success and failure, etc. \r\n\r\nThis submodule works in Python 2 or 3.\r\n\r\n![outputbox_screenshot.png](https://bitbucket.org/repo/ek5pMo9/images/3453631655-outputbox_screenshot.png)", "markup": "markdown", "html": "<p>separate <code>print()</code> and <code>write()</code> methods for the output box, one of which obeys the semantics of the python <code>print()</code> function (newlines, separators), and the other of which is more like <code>file.write()</code>, with no newlines added or anything. </p>\n<p>Added colour, bold and italics options for text added with these methods\n(or text received over the socket).</p>\n<p>The old <code>output(text, red=False)</code> method is retained for backward compatibility,  but is simply a wrapper for <code>write(text, color='red' if red else WHITE)</code></p>\n<p>We can use the colour to make labscript program output more readable - to distinguish between program output and user code output, to distinguish between messages that are waiting on a result and messages indicating success and failure, etc. </p>\n<p>This submodule works in Python 2 or 3.</p>\n<p><img alt=\"outputbox_screenshot.png\" src=\"data/bitbucket.org/repo/ek5pMo9/images/3453631655-outputbox_screenshot.png\" /></p>", "type": "rendered"}, "source": {"commit": {"hash": "59c8c39b1004", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/59c8c39b1004"}, "html": {"href": "#!/cbillington/qtutils/commits/59c8c39b1004"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "feature"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-02-27T00:11:03.254004+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "ef9cb78d5839", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/ef9cb78d5839.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/ef9cb78d5839"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Allow a zmq Context to be passed into OutputBox.\r\n\r\nThis is so that a [zprocess.security.SecureContext](https://bitbucket.org/cbillington/zprocess/src/default/zprocess/security.py) can be used for encrypted\r\nmessages.\r\n\r\nAllow listening on external interfaces so that messages can come from other computers.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/6/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:e7a332d0ed16%0Da735f9c913d0?from_pullrequest_id=6"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/6/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/6.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/6/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/6/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/6"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/6/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:e7a332d0ed16%0Da735f9c913d0?from_pullrequest_id=6"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/6/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/6/statuses_page=1.json"}}, "title": "Allow a zmq Context to be passed into OutputBox.", "close_source_branch": false, "type": "pullrequest", "id": 6, "destination": {"commit": {"hash": "a735f9c913d0", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/a735f9c913d0.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/a735f9c913d0"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-03-05T05:31:21.039440+00:00", "summary": {"raw": "Allow a zmq Context to be passed into OutputBox.\r\n\r\nThis is so that a [zprocess.security.SecureContext](https://bitbucket.org/cbillington/zprocess/src/default/zprocess/security.py) can be used for encrypted\r\nmessages.\r\n\r\nAllow listening on external interfaces so that messages can come from other computers.", "markup": "markdown", "html": "<p>Allow a zmq Context to be passed into OutputBox.</p>\n<p>This is so that a <a data-is-external-link=\"true\" href=\"https://bitbucket.org/cbillington/zprocess/src/default/zprocess/security.py\" rel=\"nofollow\">zprocess.security.SecureContext</a> can be used for encrypted\nmessages.</p>\n<p>Allow listening on external interfaces so that messages can come from other computers.</p>", "type": "rendered"}, "source": {"commit": {"hash": "cebc21e40b60", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/cebc21e40b60"}, "html": {"href": "#!/cbillington/qtutils/commits/cebc21e40b60"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-03-13T07:00:43.528472+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "e7a332d0ed16", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/e7a332d0ed16.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/e7a332d0ed16"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Updated information regarding \"invoke in main\" using the Qt API from a Python thread.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/7/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:3fd91e96e3ab%0De7a332d0ed16?from_pullrequest_id=7"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/7/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/7.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/7/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/7/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/7"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/7/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:3fd91e96e3ab%0De7a332d0ed16?from_pullrequest_id=7"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/7/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/7/statuses_page=1.json"}}, "title": "Updated information regarding \"invoke in main\" using the Qt API from a Python thread.", "close_source_branch": true, "type": "pullrequest", "id": 7, "destination": {"commit": {"hash": "e7a332d0ed16", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/e7a332d0ed16.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/e7a332d0ed16"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-04-15T23:34:38.904515+00:00", "summary": {"raw": "Updated information regarding \"invoke in main\" using the Qt API from a Python thread.", "markup": "markdown", "html": "<p>Updated information regarding \"invoke in main\" using the Qt API from a Python thread.</p>", "type": "rendered"}, "source": {"commit": {"hash": "3c0cd8b8b338", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils/commit/3c0cd8b8b338"}, "html": {"href": "#!/pstarkey/qtutils/commits/3c0cd8b8b338"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/pstarkey/qtutils"}, "html": {"href": "#!/pstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{bd30e131-3aa7-4e4e-9961-d8e2b6a1e118}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "pstarkey/qtutils", "uuid": "{bd30e131-3aa7-4e4e-9961-d8e2b6a1e118}"}, "branch": {"name": "pstarkey/updated-information-regarding-invoke-in--1523835236743"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-04-16T04:53:11.839778+00:00", "author": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}, "merge_commit": {"hash": "3fd91e96e3ab", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/3fd91e96e3ab.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/3fd91e96e3ab"}}}, "closed_by": {"display_name": "Philip Starkey", "uuid": "{0147401a-13ed-4e39-a0d0-63108c18738b}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D"}, "html": {"href": "https://bitbucket.org/%7B0147401a-13ed-4e39-a0d0-63108c18738b%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/fa0698c306b3470c00717c146b5296e9d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "philipstarkey", "type": "user", "account_id": "557058:2f99420c-1dbd-4837-952c-82c421b8fbdd"}}, {"description": "Shaun had some ugly mono fonts out of the box on Windows 10, and I fiddled with choosing a better mono font out of those included with Windows 10. Our previous approach was to have a list of fonts in decreasing order of priority, since you can't know what fonts a system has. But this is fiddly, different versions of different OSs have different monospace fonts, and they don't all look sensible at the same size (and some of them are downright ugly or rendered way too narrow to be readable).\r\n\r\nSo we should just bundle a monospaced font. This pull request bundles the Ubuntu Mono font, the license of which [allows bundling and redistribution](https://www.ubuntu.com/legal/terms-and-policies/font-licence)\r\n\r\n* Bundle an open source mono font for consistency of OutputBox across platforms,\r\nsince included mono fonts are often bad/inconsistently sized.\r\n\r\n* Platform specific font size since macOS seems to render fonts smaller for some reason.\r\n\r\n* Include font license", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/8/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:87aa6e6a944a%0D3fd91e96e3ab?from_pullrequest_id=8"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/8/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/8.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/8/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/8/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/8"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/8/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:87aa6e6a944a%0D3fd91e96e3ab?from_pullrequest_id=8"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/8/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/8/statuses_page=1.json"}}, "title": "Bundle mono font", "close_source_branch": false, "type": "pullrequest", "id": 8, "destination": {"commit": {"hash": "3fd91e96e3ab", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/3fd91e96e3ab.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/3fd91e96e3ab"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-05-04T00:13:51.244428+00:00", "summary": {"raw": "Shaun had some ugly mono fonts out of the box on Windows 10, and I fiddled with choosing a better mono font out of those included with Windows 10. Our previous approach was to have a list of fonts in decreasing order of priority, since you can't know what fonts a system has. But this is fiddly, different versions of different OSs have different monospace fonts, and they don't all look sensible at the same size (and some of them are downright ugly or rendered way too narrow to be readable).\r\n\r\nSo we should just bundle a monospaced font. This pull request bundles the Ubuntu Mono font, the license of which [allows bundling and redistribution](https://www.ubuntu.com/legal/terms-and-policies/font-licence)\r\n\r\n* Bundle an open source mono font for consistency of OutputBox across platforms,\r\nsince included mono fonts are often bad/inconsistently sized.\r\n\r\n* Platform specific font size since macOS seems to render fonts smaller for some reason.\r\n\r\n* Include font license", "markup": "markdown", "html": "<p>Shaun had some ugly mono fonts out of the box on Windows 10, and I fiddled with choosing a better mono font out of those included with Windows 10. Our previous approach was to have a list of fonts in decreasing order of priority, since you can't know what fonts a system has. But this is fiddly, different versions of different OSs have different monospace fonts, and they don't all look sensible at the same size (and some of them are downright ugly or rendered way too narrow to be readable).</p>\n<p>So we should just bundle a monospaced font. This pull request bundles the Ubuntu Mono font, the license of which <a data-is-external-link=\"true\" href=\"https://www.ubuntu.com/legal/terms-and-policies/font-licence\" rel=\"nofollow\">allows bundling and redistribution</a></p>\n<ul>\n<li>\n<p>Bundle an open source mono font for consistency of OutputBox across platforms,\nsince included mono fonts are often bad/inconsistently sized.</p>\n</li>\n<li>\n<p>Platform specific font size since macOS seems to render fonts smaller for some reason.</p>\n</li>\n<li>\n<p>Include font license</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "455fb0a14938", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/455fb0a14938"}, "html": {"href": "#!/cbillington/qtutils/commits/455fb0a14938"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-05-28T05:01:01.348072+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "87aa6e6a944a", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/87aa6e6a944a.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/87aa6e6a944a"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "PySide2 (officially rebranded as  \"[Qt for Python](https://blog.qt.io/blog/2018/06/13/qt-python-5-11-released/)\") looks likely to be the future of Qt in Python.  so I figured we should add support, it was not too hard.\r\n\r\nThe version of PySide2 in conda-forge at the moment is an alpha and has some\r\nmissing widgets and raises NotImplementedErrors on a few things, so labscript programs\r\nare not working perfectly. But these are issues with PySide2, not qtutils. I haven't gotten my hands on their first official release, though it's out I figure I'll wait for it to be in conda repos.\r\n\r\nThe only issue I've seen that might be the a problem with qtutils so far is that the outputbox\r\ntext isn't white. Not sure why.\r\n\r\nThere are other rough edges - some PySide2 methods appear to not accept say, integers,\r\nrequiring the right Qt datatype such as a Qt.Checkstate. So where integers have\r\nbeen saved to config files, when restored they need to be wrapped in Qt.CheckState(int) before being\r\nused in Qt methods. And they will need to converted to integers before being saved to the config file\r\nso that they are compatible betwen Qt wrappers. This means labscript programs are all erroring on\r\nloading their config files.\r\n\r\nEither PySide2 will sort issues like this out (it seems to be in very active development at the moment)\r\nor fixes can be applied to the applications. There is plenty of time, but basic\r\nqtutils support seems to be step 1 for us so here it is.\r\n\r\nFor now PySide2 is listed as the lowest priority Qt lib in qtutils.qt, so it\r\nis unlikely anyone will have issues for the moment, but I expect it will be more\r\nwidely used in the future and it may become the default Qt in\r\nAnaconda.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/9/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:77d56c2e9dab%0Df23893444565?from_pullrequest_id=9"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/9/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/9.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/9/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/9/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/9"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/9/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:77d56c2e9dab%0Df23893444565?from_pullrequest_id=9"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/9/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/9/statuses_page=1.json"}}, "title": "PySide2 support", "close_source_branch": false, "type": "pullrequest", "id": 9, "destination": {"commit": {"hash": "f23893444565", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/f23893444565.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/f23893444565"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-06-15T05:56:49.054215+00:00", "summary": {"raw": "PySide2 (officially rebranded as  \"[Qt for Python](https://blog.qt.io/blog/2018/06/13/qt-python-5-11-released/)\") looks likely to be the future of Qt in Python.  so I figured we should add support, it was not too hard.\r\n\r\nThe version of PySide2 in conda-forge at the moment is an alpha and has some\r\nmissing widgets and raises NotImplementedErrors on a few things, so labscript programs\r\nare not working perfectly. But these are issues with PySide2, not qtutils. I haven't gotten my hands on their first official release, though it's out I figure I'll wait for it to be in conda repos.\r\n\r\nThe only issue I've seen that might be the a problem with qtutils so far is that the outputbox\r\ntext isn't white. Not sure why.\r\n\r\nThere are other rough edges - some PySide2 methods appear to not accept say, integers,\r\nrequiring the right Qt datatype such as a Qt.Checkstate. So where integers have\r\nbeen saved to config files, when restored they need to be wrapped in Qt.CheckState(int) before being\r\nused in Qt methods. And they will need to converted to integers before being saved to the config file\r\nso that they are compatible betwen Qt wrappers. This means labscript programs are all erroring on\r\nloading their config files.\r\n\r\nEither PySide2 will sort issues like this out (it seems to be in very active development at the moment)\r\nor fixes can be applied to the applications. There is plenty of time, but basic\r\nqtutils support seems to be step 1 for us so here it is.\r\n\r\nFor now PySide2 is listed as the lowest priority Qt lib in qtutils.qt, so it\r\nis unlikely anyone will have issues for the moment, but I expect it will be more\r\nwidely used in the future and it may become the default Qt in\r\nAnaconda.", "markup": "markdown", "html": "<p>PySide2 (officially rebranded as  \"<a data-is-external-link=\"true\" href=\"https://blog.qt.io/blog/2018/06/13/qt-python-5-11-released/\" rel=\"nofollow\">Qt for Python</a>\") looks likely to be the future of Qt in Python.  so I figured we should add support, it was not too hard.</p>\n<p>The version of PySide2 in conda-forge at the moment is an alpha and has some\nmissing widgets and raises NotImplementedErrors on a few things, so labscript programs\nare not working perfectly. But these are issues with PySide2, not qtutils. I haven't gotten my hands on their first official release, though it's out I figure I'll wait for it to be in conda repos.</p>\n<p>The only issue I've seen that might be the a problem with qtutils so far is that the outputbox\ntext isn't white. Not sure why.</p>\n<p>There are other rough edges - some PySide2 methods appear to not accept say, integers,\nrequiring the right Qt datatype such as a Qt.Checkstate. So where integers have\nbeen saved to config files, when restored they need to be wrapped in Qt.CheckState(int) before being\nused in Qt methods. And they will need to converted to integers before being saved to the config file\nso that they are compatible betwen Qt wrappers. This means labscript programs are all erroring on\nloading their config files.</p>\n<p>Either PySide2 will sort issues like this out (it seems to be in very active development at the moment)\nor fixes can be applied to the applications. There is plenty of time, but basic\nqtutils support seems to be step 1 for us so here it is.</p>\n<p>For now PySide2 is listed as the lowest priority Qt lib in qtutils.qt, so it\nis unlikely anyone will have issues for the moment, but I expect it will be more\nwidely used in the future and it may become the default Qt in\nAnaconda.</p>", "type": "rendered"}, "source": {"commit": {"hash": "6b566d11dd83", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/6b566d11dd83"}, "html": {"href": "#!/cbillington/qtutils/commits/6b566d11dd83"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-07-19T18:36:51.111451+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "77d56c2e9dab", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/77d56c2e9dab.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/77d56c2e9dab"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "* Feature branch to add carriage returns to output box.\r\n* Added carriage return support to outputbox Somewhat simplified the outputbox add\\_text method in the process\r\n* Cleaned up formatting code to apply char format to entire current block Avoids counting characters and moving cursor around characterwise\r\n* Tests OK with tqdm", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/10/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:19eae524c7ac%0D87aa6e6a944a?from_pullrequest_id=10"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/10/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/10.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/10/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/10/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/10"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/10/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:19eae524c7ac%0D87aa6e6a944a?from_pullrequest_id=10"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/10/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/10/statuses_page=1.json"}}, "title": "Add carriage return support to outputbox", "close_source_branch": true, "type": "pullrequest", "id": 10, "destination": {"commit": {"hash": "87aa6e6a944a", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/87aa6e6a944a.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/87aa6e6a944a"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-07-17T03:15:10.768193+00:00", "summary": {"raw": "* Feature branch to add carriage returns to output box.\r\n* Added carriage return support to outputbox Somewhat simplified the outputbox add\\_text method in the process\r\n* Cleaned up formatting code to apply char format to entire current block Avoids counting characters and moving cursor around characterwise\r\n* Tests OK with tqdm", "markup": "markdown", "html": "<ul>\n<li>Feature branch to add carriage returns to output box.</li>\n<li>Added carriage return support to outputbox Somewhat simplified the outputbox add_text method in the process</li>\n<li>Cleaned up formatting code to apply char format to entire current block Avoids counting characters and moving cursor around characterwise</li>\n<li>Tests OK with tqdm</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "3712d1868eca", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/qtutils/commit/3712d1868eca"}, "html": {"href": "#!/monashspinor/qtutils/commits/3712d1868eca"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/qtutils"}, "html": {"href": "#!/monashspinor/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e3d4252c-51ef-4919-9613-aeb0bc86978a}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "monashspinor/qtutils", "uuid": "{e3d4252c-51ef-4919-9613-aeb0bc86978a}"}, "branch": {"name": "carriage_returns"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-07-21T03:51:30.953715+00:00", "author": {"display_name": "Lincoln Turner", "uuid": "{7e35ca32-09d7-4a25-a548-32edef727dda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D"}, "html": {"href": "https://bitbucket.org/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2ac774c664cd58fc011cc65e0980b4c1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLT-3.png"}}, "nickname": "lincolndturner", "type": "user", "account_id": "5b46a53d845e7e2cdff75ad3"}, "merge_commit": {"hash": "19eae524c7ac", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/19eae524c7ac.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/19eae524c7ac"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Hi Phil,\r\n\r\nHappy for me to do a PyPI release as version 2.2.0?\r\n\r\nThis pull request includes the version bump, a tag for 2.2.0, and a changelog file with the changes since 2.1.0. Once merged I'll run the PyPI upload command.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/11/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:f32051c36c41%0D77d56c2e9dab?from_pullrequest_id=11"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/11/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/11.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/11/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/11/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/11"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/11/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:f32051c36c41%0D77d56c2e9dab?from_pullrequest_id=11"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/11/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/11/statuses_page=1.json"}}, "title": "Release", "close_source_branch": false, "type": "pullrequest", "id": 11, "destination": {"commit": {"hash": "77d56c2e9dab", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/77d56c2e9dab.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/77d56c2e9dab"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-07-19T18:43:38.889015+00:00", "summary": {"raw": "Hi Phil,\r\n\r\nHappy for me to do a PyPI release as version 2.2.0?\r\n\r\nThis pull request includes the version bump, a tag for 2.2.0, and a changelog file with the changes since 2.1.0. Once merged I'll run the PyPI upload command.", "markup": "markdown", "html": "<p>Hi Phil,</p>\n<p>Happy for me to do a PyPI release as version 2.2.0?</p>\n<p>This pull request includes the version bump, a tag for 2.2.0, and a changelog file with the changes since 2.1.0. Once merged I'll run the PyPI upload command.</p>", "type": "rendered"}, "source": {"commit": {"hash": "f32051c36c41", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/f32051c36c41"}, "html": {"href": "#!/cbillington/qtutils/commits/f32051c36c41"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "comment_count": 2, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-07-20T13:19:08.135358+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "f32051c36c41", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/f32051c36c41.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/f32051c36c41"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "**Basic syntax highlighter for \u201clog levels\u201d**\r\n\r\nHighlights text from \u201c\\[level\\] \u201c to end of line, where level is trace, debug, info, warn, error, fatal. \r\n\r\nIncludes simple tests\r\n\r\nSeparate fix:\r\n\r\n* Suspect func charformats\\(charformat\\_repr\\) was never actually memoizing QTextFormat objects as they were stored indexed by a tuple but were looked up by a tuple repr \\(ie string\\). Fixed and tested.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/12/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/monashspinor/qtutils:d1bd4ce77488%0D7629e11fe880?from_pullrequest_id=12"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/12/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/12.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/12/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/12/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/12"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/12/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/monashspinor/qtutils:d1bd4ce77488%0D7629e11fe880?from_pullrequest_id=12"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/12/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/12/statuses_page=1.json"}}, "title": "Syntax highlighting: basic syntax highlighter based on \"log levels\" regexps", "close_source_branch": false, "type": "pullrequest", "id": 12, "destination": {"commit": {"hash": "7629e11fe880", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/7629e11fe880.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/7629e11fe880"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-07-22T00:40:26.872697+00:00", "summary": {"raw": "**Basic syntax highlighter for \u201clog levels\u201d**\r\n\r\nHighlights text from \u201c\\[level\\] \u201c to end of line, where level is trace, debug, info, warn, error, fatal. \r\n\r\nIncludes simple tests\r\n\r\nSeparate fix:\r\n\r\n* Suspect func charformats\\(charformat\\_repr\\) was never actually memoizing QTextFormat objects as they were stored indexed by a tuple but were looked up by a tuple repr \\(ie string\\). Fixed and tested.", "markup": "markdown", "html": "<p><strong>Basic syntax highlighter for \u201clog levels\u201d</strong></p>\n<p>Highlights text from \u201c[level] \u201c to end of line, where level is trace, debug, info, warn, error, fatal. </p>\n<p>Includes simple tests</p>\n<p>Separate fix:</p>\n<ul>\n<li>Suspect func charformats(charformat_repr) was never actually memoizing QTextFormat objects as they were stored indexed by a tuple but were looked up by a tuple repr (ie string). Fixed and tested.</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "d1bd4ce77488", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/qtutils/commit/d1bd4ce77488"}, "html": {"href": "#!/monashspinor/qtutils/commits/d1bd4ce77488"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/monashspinor/qtutils"}, "html": {"href": "#!/monashspinor/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{e3d4252c-51ef-4919-9613-aeb0bc86978a}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "monashspinor/qtutils", "uuid": "{e3d4252c-51ef-4919-9613-aeb0bc86978a}"}, "branch": {"name": "syntax_highlighting"}}, "comment_count": 7, "state": "DECLINED", "task_count": 0, "reason": "Given pull request #14 has now been merged, I don't think this one is needed anymore", "updated_on": "2018-07-25T00:15:19.569497+00:00", "author": {"display_name": "Lincoln Turner", "uuid": "{7e35ca32-09d7-4a25-a548-32edef727dda}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D"}, "html": {"href": "https://bitbucket.org/%7B7e35ca32-09d7-4a25-a548-32edef727dda%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/2ac774c664cd58fc011cc65e0980b4c1d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsLT-3.png"}}, "nickname": "lincolndturner", "type": "user", "account_id": "5b46a53d845e7e2cdff75ad3"}, "merge_commit": null, "closed_by": {"display_name": "Philip Starkey", "uuid": "{48af65db-e5fc-459c-a7eb-52eb1f9a5690}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D"}, "html": {"href": "https://bitbucket.org/%7B48af65db-e5fc-459c-a7eb-52eb1f9a5690%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dc318537facc47ebe1ae98a7aabacecfd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsPS-0.png"}}, "nickname": "pstarkey", "type": "user", "account_id": "557058:52a111e4-40da-4441-9143-417f95f2db97"}}, {"description": "Fix failure to memoise text formatting.\r\n\r\nRemove use of 'red' string favouring the RED variable instead.\r\n\r\nDefine a varaible for the font name rather than using a string literal where it is used.\r\n\r\nSimplify charformats by pre-loading stderr and stdout formats into the cache.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/13/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/None?from_pullrequest_id=13"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/13/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/13.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/13/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/13/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/13"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/13/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/None?from_pullrequest_id=13"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/13/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/13/statuses_page=1.json"}}, "title": "Fix failure to memoise text formatting.", "close_source_branch": false, "type": "pullrequest", "id": 13, "destination": {"commit": {"hash": "d087c7e6fc80", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/d087c7e6fc80.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/d087c7e6fc80"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-07-23T15:57:42.326195+00:00", "summary": {"raw": "Fix failure to memoise text formatting.\r\n\r\nRemove use of 'red' string favouring the RED variable instead.\r\n\r\nDefine a varaible for the font name rather than using a string literal where it is used.\r\n\r\nSimplify charformats by pre-loading stderr and stdout formats into the cache.", "markup": "markdown", "html": "<p>Fix failure to memoise text formatting.</p>\n<p>Remove use of 'red' string favouring the RED variable instead.</p>\n<p>Define a varaible for the font name rather than using a string literal where it is used.</p>\n<p>Simplify charformats by pre-loading stderr and stdout formats into the cache.</p>", "type": "rendered"}, "source": {"commit": {"hash": "332e71cd324d", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/332e71cd324d"}, "html": {"href": "#!/cbillington/qtutils/commits/332e71cd324d"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "bugfix"}}, "comment_count": 1, "state": "DECLINED", "task_count": 0, "reason": "", "updated_on": "2018-07-23T19:33:57.865417+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": null, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.\r\n\r\nBasically, the primary change to qtutils is just a list of aliases of log levels -> colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called [`RichStreamHandler`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-551). When used in place of a `logging.StreamHandler` for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.\r\n\r\n`RichStreamHandler` supports any file-like object whose `write()` method accepts a 'charformat' keyword argument. `OutputBox.write()` now supports this keyword argument, so the logger can be directly attached to the `OutputBox` in the process that contains it, such as runmanager/lyse/etc. Also, `zprocess.process_tree.StreamProxy`, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its `write()` method as of zprocess 2.5.1, meaning a `RichStreamHandler` used in a subprocess will work to forward correctly to an `OutputBox` in the parent process.\r\n\r\nSince you might want more colours, I also added a function to zprocess, [`rich_print()`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-571), which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.\r\n\r\nBoth the `RichStreamHandler` and `rich_print` fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. \r\n\r\nI imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.\r\n\r\nExample:\r\n\r\n```python\r\nimport logging\r\nfrom zprocess import RichStreamHandler # Requires zprocess 2.5.1\r\nlogger = logging.Logger('test')\r\nlogger.setLevel(logging.DEBUG)\r\nlogger.addHandler(RichStreamHandler()) # or RichStreamHandler(output_box) if in same process as output box\r\nlogger.debug('DEBUG log message')\r\nlogger.info('INFO log message')\r\nlogger.warning('WARNING log message')\r\nlogger.error('ERROR log message')\r\nlogger.critical('CRITICAL log message')\r\n```\r\n![outputbox_ss.png](https://bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png)\r\n\r\n\r\n* Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.\r\n\r\n* Added file-like stub methods to OutputBox so that it can be used in place of a\r\nfile-like object.\r\n\r\n* Add aliases for formatting based on log levels.\r\n\r\n* Fix failure to memoise text formatting.\r\n\r\n* Add font name as a varaible instead of using a string literal where it's used\r\n\r\n* Remove use of 'red' string favouring the RED variable instead.\r\n\r\n* Fixed bug which caused obscure error message due to font loading being attempted\r\nafter an exception in the main thread (`__file__` doesn't exist as seen from the\r\nthread apparantly - now we save the fonts location in a global varaible earlier)", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/14/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:7629e11fe880%0Deb14bdc0ce46?from_pullrequest_id=14"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/14/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/14"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:7629e11fe880%0Deb14bdc0ce46?from_pullrequest_id=14"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/14/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/14/statuses_page=1.json"}}, "title": "Compatibility with coloured output from subprocesses", "close_source_branch": false, "type": "pullrequest", "id": 14, "destination": {"commit": {"hash": "eb14bdc0ce46", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/eb14bdc0ce46.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/eb14bdc0ce46"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-07-23T20:23:10.914912+00:00", "summary": {"raw": "Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.\r\n\r\nBasically, the primary change to qtutils is just a list of aliases of log levels -> colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called [`RichStreamHandler`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-551). When used in place of a `logging.StreamHandler` for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.\r\n\r\n`RichStreamHandler` supports any file-like object whose `write()` method accepts a 'charformat' keyword argument. `OutputBox.write()` now supports this keyword argument, so the logger can be directly attached to the `OutputBox` in the process that contains it, such as runmanager/lyse/etc. Also, `zprocess.process_tree.StreamProxy`, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its `write()` method as of zprocess 2.5.1, meaning a `RichStreamHandler` used in a subprocess will work to forward correctly to an `OutputBox` in the parent process.\r\n\r\nSince you might want more colours, I also added a function to zprocess, [`rich_print()`](https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&fileviewer=file-view-default#process_tree.py-571), which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.\r\n\r\nBoth the `RichStreamHandler` and `rich_print` fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. \r\n\r\nI imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.\r\n\r\nExample:\r\n\r\n```python\r\nimport logging\r\nfrom zprocess import RichStreamHandler # Requires zprocess 2.5.1\r\nlogger = logging.Logger('test')\r\nlogger.setLevel(logging.DEBUG)\r\nlogger.addHandler(RichStreamHandler()) # or RichStreamHandler(output_box) if in same process as output box\r\nlogger.debug('DEBUG log message')\r\nlogger.info('INFO log message')\r\nlogger.warning('WARNING log message')\r\nlogger.error('ERROR log message')\r\nlogger.critical('CRITICAL log message')\r\n```\r\n![outputbox_ss.png](https://bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png)\r\n\r\n\r\n* Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.\r\n\r\n* Added file-like stub methods to OutputBox so that it can be used in place of a\r\nfile-like object.\r\n\r\n* Add aliases for formatting based on log levels.\r\n\r\n* Fix failure to memoise text formatting.\r\n\r\n* Add font name as a varaible instead of using a string literal where it's used\r\n\r\n* Remove use of 'red' string favouring the RED variable instead.\r\n\r\n* Fixed bug which caused obscure error message due to font loading being attempted\r\nafter an exception in the main thread (`__file__` doesn't exist as seen from the\r\nthread apparantly - now we save the fonts location in a global varaible earlier)", "markup": "markdown", "html": "<p>Here's my shot at an implementation of coloured/bolded/italic output coming from subprocesses.</p>\n<p>Basically, the primary change to qtutils is just a list of aliases of log levels -&gt; colour/bold/italic formats. This is designed to work in tandem with a logging handler I added to zprocess, called <a data-is-external-link=\"true\" href=\"https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&amp;fileviewer=file-view-default#process_tree.py-551\" rel=\"nofollow\"><code>RichStreamHandler</code></a>. When used in place of a <code>logging.StreamHandler</code> for a logger, this handler forwards the log level as the first message of the zmq multipart message that is used to forward output. Usually this first message is 'stdout' or 'stderr', but these are just aliases for 'white, not bold, not italic' and 'red, not bold, not italic', so I see no reason why we can't put 'INFO' there as an alias for 'blue, not bold, not italic', etc.</p>\n<p><code>RichStreamHandler</code> supports any file-like object whose <code>write()</code> method accepts a 'charformat' keyword argument. <code>OutputBox.write()</code> now supports this keyword argument, so the logger can be directly attached to the <code>OutputBox</code> in the process that contains it, such as runmanager/lyse/etc. Also, <code>zprocess.process_tree.StreamProxy</code>, which is what zprocess replaces sys.stdout and sys.stderr with, supports this argument in its <code>write()</code> method as of zprocess 2.5.1, meaning a <code>RichStreamHandler</code> used in a subprocess will work to forward correctly to an <code>OutputBox</code> in the parent process.</p>\n<p>Since you might want more colours, I also added a function to zprocess, <a data-is-external-link=\"true\" href=\"https://bitbucket.org/cbillington/zprocess/src/44c173fe527ac19b3d3521db478f891c2aa5fcb2/zprocess/process_tree.py?at=default&amp;fileviewer=file-view-default#process_tree.py-571\" rel=\"nofollow\"><code>rich_print()</code></a>, which is like print() except it supports color, bold and italic kwargs. This is a way to output text with more formats than available via the log levels, or if you don't want to make a logger for whatever reason.</p>\n<p>Both the <code>RichStreamHandler</code> and <code>rich_print</code> fall back to plain output if the stream does not accept the 'charformat' keyword argument, for example if it is just a plain stdout and not an OutputBox or StreamProxy. </p>\n<p>I imagine we can use RichStreamHandler in setup_logging to get coloured logging output in the places it makes sense.</p>\n<p>Example:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zprocess</span> <span class=\"kn\">import</span> <span class=\"n\">RichStreamHandler</span> <span class=\"c1\"># Requires zprocess 2.5.1</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span><span class=\"p\">(</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">RichStreamHandler</span><span class=\"p\">())</span> <span class=\"c1\"># or RichStreamHandler(output_box) if in same process as output box</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">&#39;DEBUG log message&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;INFO log message&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">&#39;WARNING log message&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">&#39;ERROR log message&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s1\">&#39;CRITICAL log message&#39;</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p><img alt=\"outputbox_ss.png\" src=\"data/bitbucket.org/repo/ek5pMo9/images/137381390-outputbox_ss.png\" /></p>\n<ul>\n<li>\n<p>Added charformat keyword argument to OutputBox.write(). This makes it compatible with being the stream assigned to a zprocess.RichStreamHandler logging handler, allowing colourised logging to an outputbox.</p>\n</li>\n<li>\n<p>Added file-like stub methods to OutputBox so that it can be used in place of a\nfile-like object.</p>\n</li>\n<li>\n<p>Add aliases for formatting based on log levels.</p>\n</li>\n<li>\n<p>Fix failure to memoise text formatting.</p>\n</li>\n<li>\n<p>Add font name as a varaible instead of using a string literal where it's used</p>\n</li>\n<li>\n<p>Remove use of 'red' string favouring the RED variable instead.</p>\n</li>\n<li>\n<p>Fixed bug which caused obscure error message due to font loading being attempted\nafter an exception in the main thread (<code>__file__</code> doesn't exist as seen from the\nthread apparantly - now we save the fonts location in a global varaible earlier)</p>\n</li>\n</ul>", "type": "rendered"}, "source": {"commit": {"hash": "a0c68c613524", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/a0c68c613524"}, "html": {"href": "#!/cbillington/qtutils/commits/a0c68c613524"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "comment_count": 5, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-07-24T21:03:34.982328+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "7629e11fe880", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/7629e11fe880.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/7629e11fe880"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Fix issue #6 by providing informative error messages about build failure when Qt libraries are not available at build time.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/15/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:eb14bdc0ce46%0Dd087c7e6fc80?from_pullrequest_id=15"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/15/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/15.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/15/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/15/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/15"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/15/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:eb14bdc0ce46%0Dd087c7e6fc80?from_pullrequest_id=15"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/15/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/15/statuses_page=1.json"}}, "title": "Fix issue #6", "close_source_branch": true, "type": "pullrequest", "id": 15, "destination": {"commit": {"hash": "d087c7e6fc80", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/d087c7e6fc80.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/d087c7e6fc80"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-07-24T16:19:11.130203+00:00", "summary": {"raw": "Fix issue #6 by providing informative error messages about build failure when Qt libraries are not available at build time.", "markup": "markdown", "html": "<p>Fix issue <a href=\"#!/philipstarkey/qtutils/issues/6/installed-wants-qt4-and-pyside\" rel=\"nofollow\" title=\"Installed wants qt4 and pyside\" class=\"ap-connect-link\"><s>#6</s></a> by providing informative error messages about build failure when Qt libraries are not available at build time.</p>", "type": "rendered"}, "source": {"commit": {"hash": "e5be8acbe055", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/e5be8acbe055"}, "html": {"href": "#!/cbillington/qtutils/commits/e5be8acbe055"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "bugfix"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-07-24T21:02:05.597952+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "eb14bdc0ce46", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/eb14bdc0ce46.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/eb14bdc0ce46"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "* Add an icon for an atom. It looks like this: ![atom.png](https://bitbucket.org/repo/ek5pMo9/images/263754393-atom.png)\r\n\r\n* Added 'REBUILD' command line arg to force resource files to be rebuilt even if they exist already.\r\n\r\n* Bumped patch version so that I can ensure the icon is present with  a version check.\r\n\r\nWill do a PYPI release once merged.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/16/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:70f45de4874a%0D7629e11fe880?from_pullrequest_id=16"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/16/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/16.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/16/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/16/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/16"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/16/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:70f45de4874a%0D7629e11fe880?from_pullrequest_id=16"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/16/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/16/statuses_page=1.json"}}, "title": "Add an icon", "close_source_branch": false, "type": "pullrequest", "id": 16, "destination": {"commit": {"hash": "7629e11fe880", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/7629e11fe880.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/7629e11fe880"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2018-11-29T21:49:13.561642+00:00", "summary": {"raw": "* Add an icon for an atom. It looks like this: ![atom.png](https://bitbucket.org/repo/ek5pMo9/images/263754393-atom.png)\r\n\r\n* Added 'REBUILD' command line arg to force resource files to be rebuilt even if they exist already.\r\n\r\n* Bumped patch version so that I can ensure the icon is present with  a version check.\r\n\r\nWill do a PYPI release once merged.", "markup": "markdown", "html": "<ul>\n<li>\n<p>Add an icon for an atom. It looks like this: <img alt=\"atom.png\" src=\"data/bitbucket.org/repo/ek5pMo9/images/263754393-atom.png\" /></p>\n</li>\n<li>\n<p>Added 'REBUILD' command line arg to force resource files to be rebuilt even if they exist already.</p>\n</li>\n<li>\n<p>Bumped patch version so that I can ensure the icon is present with  a version check.</p>\n</li>\n</ul>\n<p>Will do a PYPI release once merged.</p>", "type": "rendered"}, "source": {"commit": {"hash": "70f45de4874a", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/70f45de4874a"}, "html": {"href": "#!/cbillington/qtutils/commits/70f45de4874a"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2018-12-03T15:21:29.232143+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "70f45de4874a", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/70f45de4874a.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/70f45de4874a"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "The previous ability to pass in a zmq context of your choice to the `OutputBox` was not \r\nquite adequate for making a smooth transition to secure communication. The `allow_insecure` keyword arg is also required, which is used by zprocess to only raise an exception if listening insecurely on an *external* interface (listening unsecured on localhost is fine). This suppressible exception raising when you're doing something insecure is necessary to allow people to transition components to the point where they can enable security without having to update every app at once if they want them to keep talking to each other.\r\n\r\nSince the `allow_insecure` arg is processed on a per-socket basis rather than applying to a whole context (this was so that we could re-use contexts as much as possible without having a global context with `allow_insecure` necessarily make everything insecure pass unnoticed), we can't just pass in a ready-made context. So, like all the classes in zprocess, this PR makes the `OutputBox` take  `shared_secret` and `allow_insecure` kwargs, and it makes a SecureContext itself if necessary.\r\n\r\nThe only difference is that if listening on localhost with no security, it goes ahead and uses a normal zmq context, and doesn't import zprocess, so as to not make it a dependency.\r\n\r\nThis change is required by [labscript_utils pull request #66](https://bitbucket.org/labscript_suite/blacs/pull-requests/66/use-labconfig-configured-zprocess-wrappers/) so once it's merged I'll release to PyPI so labscript_utils can depend on it.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/17/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/None?from_pullrequest_id=17"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/17/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/17.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/17/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/17/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/17"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/17/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/None?from_pullrequest_id=17"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/17/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/17/statuses_page=1.json"}}, "title": "OutputBox optional security", "close_source_branch": false, "type": "pullrequest", "id": 17, "destination": {"commit": {"hash": "70f45de4874a", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/70f45de4874a.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/70f45de4874a"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2019-02-07T01:27:09.071092+00:00", "summary": {"raw": "The previous ability to pass in a zmq context of your choice to the `OutputBox` was not \r\nquite adequate for making a smooth transition to secure communication. The `allow_insecure` keyword arg is also required, which is used by zprocess to only raise an exception if listening insecurely on an *external* interface (listening unsecured on localhost is fine). This suppressible exception raising when you're doing something insecure is necessary to allow people to transition components to the point where they can enable security without having to update every app at once if they want them to keep talking to each other.\r\n\r\nSince the `allow_insecure` arg is processed on a per-socket basis rather than applying to a whole context (this was so that we could re-use contexts as much as possible without having a global context with `allow_insecure` necessarily make everything insecure pass unnoticed), we can't just pass in a ready-made context. So, like all the classes in zprocess, this PR makes the `OutputBox` take  `shared_secret` and `allow_insecure` kwargs, and it makes a SecureContext itself if necessary.\r\n\r\nThe only difference is that if listening on localhost with no security, it goes ahead and uses a normal zmq context, and doesn't import zprocess, so as to not make it a dependency.\r\n\r\nThis change is required by [labscript_utils pull request #66](https://bitbucket.org/labscript_suite/blacs/pull-requests/66/use-labconfig-configured-zprocess-wrappers/) so once it's merged I'll release to PyPI so labscript_utils can depend on it.", "markup": "markdown", "html": "<p>The previous ability to pass in a zmq context of your choice to the <code>OutputBox</code> was not \nquite adequate for making a smooth transition to secure communication. The <code>allow_insecure</code> keyword arg is also required, which is used by zprocess to only raise an exception if listening insecurely on an <em>external</em> interface (listening unsecured on localhost is fine). This suppressible exception raising when you're doing something insecure is necessary to allow people to transition components to the point where they can enable security without having to update every app at once if they want them to keep talking to each other.</p>\n<p>Since the <code>allow_insecure</code> arg is processed on a per-socket basis rather than applying to a whole context (this was so that we could re-use contexts as much as possible without having a global context with <code>allow_insecure</code> necessarily make everything insecure pass unnoticed), we can't just pass in a ready-made context. So, like all the classes in zprocess, this PR makes the <code>OutputBox</code> take  <code>shared_secret</code> and <code>allow_insecure</code> kwargs, and it makes a SecureContext itself if necessary.</p>\n<p>The only difference is that if listening on localhost with no security, it goes ahead and uses a normal zmq context, and doesn't import zprocess, so as to not make it a dependency.</p>\n<p>This change is required by <a data-is-external-link=\"true\" href=\"https://bitbucket.org/labscript_suite/blacs/pull-requests/66/use-labconfig-configured-zprocess-wrappers/\" rel=\"nofollow\">labscript_utils pull request #66</a> so once it's merged I'll release to PyPI so labscript_utils can depend on it.</p>", "type": "rendered"}, "source": {"commit": {"hash": "4ca23e80bf4c", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/4ca23e80bf4c"}, "html": {"href": "#!/cbillington/qtutils/commits/4ca23e80bf4c"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "comment_count": 1, "state": "DECLINED", "task_count": 0, "reason": "", "updated_on": "2019-02-07T03:38:05.814587+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": null, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "If sent binary data that cannot be decoded with utf8, replace invalid chars with\r\nbackslash replace sequences for printing, rather than crashing.\r\nIgnore invalid charformat strings, print unformatted if they are invalid.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/18/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:ce633e06d4e2%0D70f45de4874a?from_pullrequest_id=18"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/18/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/18.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/18/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/18/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/18"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/18/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:ce633e06d4e2%0D70f45de4874a?from_pullrequest_id=18"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/18/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/18/statuses_page=1.json"}}, "title": "Outputbox: do not crash if sent non-utf8 data", "close_source_branch": false, "type": "pullrequest", "id": 18, "destination": {"commit": {"hash": "70f45de4874a", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/70f45de4874a.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/70f45de4874a"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2019-02-07T17:40:02.105924+00:00", "summary": {"raw": "If sent binary data that cannot be decoded with utf8, replace invalid chars with\r\nbackslash replace sequences for printing, rather than crashing.\r\nIgnore invalid charformat strings, print unformatted if they are invalid.", "markup": "markdown", "html": "<p>If sent binary data that cannot be decoded with utf8, replace invalid chars with\nbackslash replace sequences for printing, rather than crashing.\nIgnore invalid charformat strings, print unformatted if they are invalid.</p>", "type": "rendered"}, "source": {"commit": {"hash": "ce633e06d4e2", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/ce633e06d4e2"}, "html": {"href": "#!/cbillington/qtutils/commits/ce633e06d4e2"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "comment_count": 0, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-02-11T16:17:22.633128+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "ce633e06d4e2", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/ce633e06d4e2.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/ce633e06d4e2"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Upscale all icons to at least 32x32.\r\n\r\nThis means that on high DPI displays, labscript suite apps can have icons that are not tiny.\r\n\r\nCustom icons were upscaled by re-exporting source svgs at higher resolution.\r\n\r\nFugue icons upscaled to 32x32 by simple pixel doubling. This way we are not\r\nrelying on Qt to scale the icons (which was another option), which uses\r\ninterpolation that looks even worse considering icons are pixel-art.\r\n\r\nThe script to perform the upscaling is included in the repository, and\r\nthe original 16x16 icons kept.\r\n\r\nThis is a decent stop-gap to look OK on high DPI screens until an icon set as\r\ncomprehensive as fugue exists at higher resolution (I cannot find anything\r\ncomparable at the moment).\r\n\r\nIncluding icons in multiple sizes was an option I explored, but it does not work\r\nwell with Qt designer - it does not choose the correct icon size from .ico\r\nfiles, and there isn't any other way to include multiple sizes without having to specify which one to use. It seems that including an excessively large icon and letting Qt downscale is the\r\ncurrent best practice (unfortunately). I would have liked to upscale the icons\r\nusing clever pixel-art scaling filters, but then they look terrible when\r\nQt *downscales* them for a standard DPI screen. So scaling by pixel doubling\r\nis the lesser evil for the moment.\r\n\r\nIt's not the prettiest, but I think this should do us icon-wise until 8k screens start catching on.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/19/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/cbillington/qtutils:98a06a758898%0Dce633e06d4e2?from_pullrequest_id=19"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/19/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/19.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/19/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/19/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/19"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/19/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/cbillington/qtutils:98a06a758898%0Dce633e06d4e2?from_pullrequest_id=19"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/19/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/19/statuses_page=1.json"}}, "title": "Upscale icons for better HiDPI support.", "close_source_branch": false, "type": "pullrequest", "id": 19, "destination": {"commit": {"hash": "ce633e06d4e2", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/ce633e06d4e2.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/ce633e06d4e2"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2019-03-28T23:09:01.155441+00:00", "summary": {"raw": "Upscale all icons to at least 32x32.\r\n\r\nThis means that on high DPI displays, labscript suite apps can have icons that are not tiny.\r\n\r\nCustom icons were upscaled by re-exporting source svgs at higher resolution.\r\n\r\nFugue icons upscaled to 32x32 by simple pixel doubling. This way we are not\r\nrelying on Qt to scale the icons (which was another option), which uses\r\ninterpolation that looks even worse considering icons are pixel-art.\r\n\r\nThe script to perform the upscaling is included in the repository, and\r\nthe original 16x16 icons kept.\r\n\r\nThis is a decent stop-gap to look OK on high DPI screens until an icon set as\r\ncomprehensive as fugue exists at higher resolution (I cannot find anything\r\ncomparable at the moment).\r\n\r\nIncluding icons in multiple sizes was an option I explored, but it does not work\r\nwell with Qt designer - it does not choose the correct icon size from .ico\r\nfiles, and there isn't any other way to include multiple sizes without having to specify which one to use. It seems that including an excessively large icon and letting Qt downscale is the\r\ncurrent best practice (unfortunately). I would have liked to upscale the icons\r\nusing clever pixel-art scaling filters, but then they look terrible when\r\nQt *downscales* them for a standard DPI screen. So scaling by pixel doubling\r\nis the lesser evil for the moment.\r\n\r\nIt's not the prettiest, but I think this should do us icon-wise until 8k screens start catching on.", "markup": "markdown", "html": "<p>Upscale all icons to at least 32x32.</p>\n<p>This means that on high DPI displays, labscript suite apps can have icons that are not tiny.</p>\n<p>Custom icons were upscaled by re-exporting source svgs at higher resolution.</p>\n<p>Fugue icons upscaled to 32x32 by simple pixel doubling. This way we are not\nrelying on Qt to scale the icons (which was another option), which uses\ninterpolation that looks even worse considering icons are pixel-art.</p>\n<p>The script to perform the upscaling is included in the repository, and\nthe original 16x16 icons kept.</p>\n<p>This is a decent stop-gap to look OK on high DPI screens until an icon set as\ncomprehensive as fugue exists at higher resolution (I cannot find anything\ncomparable at the moment).</p>\n<p>Including icons in multiple sizes was an option I explored, but it does not work\nwell with Qt designer - it does not choose the correct icon size from .ico\nfiles, and there isn't any other way to include multiple sizes without having to specify which one to use. It seems that including an excessively large icon and letting Qt downscale is the\ncurrent best practice (unfortunately). I would have liked to upscale the icons\nusing clever pixel-art scaling filters, but then they look terrible when\nQt <em>downscales</em> them for a standard DPI screen. So scaling by pixel doubling\nis the lesser evil for the moment.</p>\n<p>It's not the prettiest, but I think this should do us icon-wise until 8k screens start catching on.</p>", "type": "rendered"}, "source": {"commit": {"hash": "98a06a758898", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/98a06a758898"}, "html": {"href": "#!/cbillington/qtutils/commits/98a06a758898"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "hidpi"}}, "comment_count": 1, "state": "DECLINED", "task_count": 0, "reason": "Need a better idea for this.", "updated_on": "2019-04-06T03:05:44.541696+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": null, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Add shutdown method to OutputBox.\r\nThis is important as the fact that the OutputBox is running its own thread\r\nprevents it from being garbage collected. Therefore callers need\r\nto manually call shutdown() to prevent memory leaks.\r\n\r\nThis is the cause of a memory leak in BLACS presently - output boxes aren't being garbage collected each time a tab is restarted.", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/20/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:854cb338c6c8%0Dce633e06d4e2?from_pullrequest_id=20"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/20/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/20.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/20/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/20/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/20"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/20/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:854cb338c6c8%0Dce633e06d4e2?from_pullrequest_id=20"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/20/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/20/statuses_page=1.json"}}, "title": "Add shutdown method to OutputBox.", "close_source_branch": false, "type": "pullrequest", "id": 20, "destination": {"commit": {"hash": "ce633e06d4e2", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/ce633e06d4e2.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/ce633e06d4e2"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2019-04-27T00:31:11.834043+00:00", "summary": {"raw": "Add shutdown method to OutputBox.\r\nThis is important as the fact that the OutputBox is running its own thread\r\nprevents it from being garbage collected. Therefore callers need\r\nto manually call shutdown() to prevent memory leaks.\r\n\r\nThis is the cause of a memory leak in BLACS presently - output boxes aren't being garbage collected each time a tab is restarted.", "markup": "markdown", "html": "<p>Add shutdown method to OutputBox.\nThis is important as the fact that the OutputBox is running its own thread\nprevents it from being garbage collected. Therefore callers need\nto manually call shutdown() to prevent memory leaks.</p>\n<p>This is the cause of a memory leak in BLACS presently - output boxes aren't being garbage collected each time a tab is restarted.</p>", "type": "rendered"}, "source": {"commit": {"hash": "854cb338c6c8", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/854cb338c6c8"}, "html": {"href": "#!/cbillington/qtutils/commits/854cb338c6c8"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-06T15:40:46.864083+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "854cb338c6c8", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/854cb338c6c8.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/854cb338c6c8"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}, {"description": "Make outputbox more responsive for large numbers of lines.\r\nThe time to print lines to the GUI scales with the number of lines, and for only\r\nmodest numbers of lines, the processing time in the GUI thread well exceeds the overhead\r\nof posting the function call to the main thread. Therefore one might as well\r\nmake smaller batches, and update the GUI more frequently to not hang the GUI in\r\none large call, and so that output is continuously produced rather than all at\r\nonce after a hang. A batch size as small as ten seems to have good performance.\r\n\r\nusing `inmain_decorator(False)` to not block on calling `add_text()`  also seems to make output faster, and probably more importantly, resolves a deadlock. If a GUI thread writes more than the zmq high-water-mark worth of text to the outputbox, the PUSH socket it is writing to blocks, and the outputbox's mainloop is waiting on the GUI to call `add_text`, so it cannot read any new messages, and your app is deadlocked in the GUI thread.\r\n\r\nThis change actually seems to make output faster all up, i.e. more throughput,\r\nnot just better responsiveness. I'm not quite sure why (really doesn't seem like I'm imagining it but I guess I might be), but it is a nice improvement.\r\n\r\nIf you want to test the difference, try having a lyse routine do:\r\n\r\n```python\r\nfor name in sys.modules:\r\n    print(name)\r\n```\r\nOn my computer at least, this is much nicer with this change (smooth printing text scrolling quickly) than without it (hang for maybe a second and then all the text at once).", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/21/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diffstat/philipstarkey/qtutils:4aa7c2be36a4%0D412580d1cb95?from_pullrequest_id=21"}, "commits": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/21/commits.json"}, "self": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/21.json"}, "comments": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/21/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/21/merge"}, "html": {"href": "#!/philipstarkey/qtutils/pull-requests/21"}, "activity": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/21/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/diff/philipstarkey/qtutils:4aa7c2be36a4%0D412580d1cb95?from_pullrequest_id=21"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/philipstarkey/qtutils/pullrequests/21/approve"}, "statuses": {"href": "data/repositories/philipstarkey/qtutils/pullrequests/21/statuses_page=1.json"}}, "title": "Outputbox responsiveness and deadlock fix", "close_source_branch": false, "type": "pullrequest", "id": 21, "destination": {"commit": {"hash": "412580d1cb95", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/412580d1cb95.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/412580d1cb95"}}}, "repository": {"links": {"self": {"href": "data/repositories/philipstarkey/qtutils.json"}, "html": {"href": "#!/philipstarkey/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{eb85b0e6-11dc-449a-96ec-21935a03d721}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "philipstarkey/qtutils", "uuid": "{eb85b0e6-11dc-449a-96ec-21935a03d721}"}, "branch": {"name": "default"}}, "created_on": "2019-05-10T02:36:19.130439+00:00", "summary": {"raw": "Make outputbox more responsive for large numbers of lines.\r\nThe time to print lines to the GUI scales with the number of lines, and for only\r\nmodest numbers of lines, the processing time in the GUI thread well exceeds the overhead\r\nof posting the function call to the main thread. Therefore one might as well\r\nmake smaller batches, and update the GUI more frequently to not hang the GUI in\r\none large call, and so that output is continuously produced rather than all at\r\nonce after a hang. A batch size as small as ten seems to have good performance.\r\n\r\nusing `inmain_decorator(False)` to not block on calling `add_text()`  also seems to make output faster, and probably more importantly, resolves a deadlock. If a GUI thread writes more than the zmq high-water-mark worth of text to the outputbox, the PUSH socket it is writing to blocks, and the outputbox's mainloop is waiting on the GUI to call `add_text`, so it cannot read any new messages, and your app is deadlocked in the GUI thread.\r\n\r\nThis change actually seems to make output faster all up, i.e. more throughput,\r\nnot just better responsiveness. I'm not quite sure why (really doesn't seem like I'm imagining it but I guess I might be), but it is a nice improvement.\r\n\r\nIf you want to test the difference, try having a lyse routine do:\r\n\r\n```python\r\nfor name in sys.modules:\r\n    print(name)\r\n```\r\nOn my computer at least, this is much nicer with this change (smooth printing text scrolling quickly) than without it (hang for maybe a second and then all the text at once).", "markup": "markdown", "html": "<p>Make outputbox more responsive for large numbers of lines.\nThe time to print lines to the GUI scales with the number of lines, and for only\nmodest numbers of lines, the processing time in the GUI thread well exceeds the overhead\nof posting the function call to the main thread. Therefore one might as well\nmake smaller batches, and update the GUI more frequently to not hang the GUI in\none large call, and so that output is continuously produced rather than all at\nonce after a hang. A batch size as small as ten seems to have good performance.</p>\n<p>using <code>inmain_decorator(False)</code> to not block on calling <code>add_text()</code>  also seems to make output faster, and probably more importantly, resolves a deadlock. If a GUI thread writes more than the zmq high-water-mark worth of text to the outputbox, the PUSH socket it is writing to blocks, and the outputbox's mainloop is waiting on the GUI to call <code>add_text</code>, so it cannot read any new messages, and your app is deadlocked in the GUI thread.</p>\n<p>This change actually seems to make output faster all up, i.e. more throughput,\nnot just better responsiveness. I'm not quite sure why (really doesn't seem like I'm imagining it but I guess I might be), but it is a nice improvement.</p>\n<p>If you want to test the difference, try having a lyse routine do:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre></div>\n\n\n<p>On my computer at least, this is much nicer with this change (smooth printing text scrolling quickly) than without it (hang for maybe a second and then all the text at once).</p>", "type": "rendered"}, "source": {"commit": {"hash": "4aa7c2be36a4", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils/commit/4aa7c2be36a4"}, "html": {"href": "#!/cbillington/qtutils/commits/4aa7c2be36a4"}}}, "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/cbillington/qtutils"}, "html": {"href": "#!/cbillington/qtutils"}, "avatar": {"href": "data/bytebucket.org/ravatar/{0c98b491-bfb0-4ce7-9729-bc4606436bde}ts=python"}}, "type": "repository", "name": "qtutils", "full_name": "cbillington/qtutils", "uuid": "{0c98b491-bfb0-4ce7-9729-bc4606436bde}"}, "branch": {"name": "default"}}, "comment_count": 1, "state": "MERGED", "task_count": 0, "reason": "", "updated_on": "2019-05-20T14:49:27.274406+00:00", "author": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}, "merge_commit": {"hash": "4aa7c2be36a4", "type": "commit", "links": {"self": {"href": "data/repositories/philipstarkey/qtutils/commit/4aa7c2be36a4.json"}, "html": {"href": "#!/philipstarkey/qtutils/commits/4aa7c2be36a4"}}}, "closed_by": {"display_name": "Chris Billington", "uuid": "{e363c5a9-5075-4656-afb5-88bd6a6dceeb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D"}, "html": {"href": "https://bitbucket.org/%7Be363c5a9-5075-4656-afb5-88bd6a6dceeb%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/9238baf7300c41c0e7294db922899e6ad=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCB-1.png"}}, "nickname": "cbillington", "type": "user", "account_id": "557058:cbf1bc43-1dc2-477b-9e25-1a8f40fd7ee3"}}], "page": 1, "size": 21}